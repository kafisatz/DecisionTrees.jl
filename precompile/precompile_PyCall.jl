function _precompile_()
    ccall(:jl_generating_output, Cint, ()) == 1 || return nothing
    precompile(Tuple{typeof(PyCall.array2py), Array{Any, 1}, Int64, Int64})
    precompile(Tuple{typeof(PyCall.pyint_query), PyCall.PyObject})
    precompile(Tuple{typeof(PyCall.pyjlwrap_new), PyCall.PyTypeObject, Char})
    precompile(Tuple{typeof(PyCall.array2py), Array{Symbol, 1}, Int64, Int64})
    precompile(Tuple{typeof(PyCall.pynothing_query), PyCall.PyObject})
    precompile(Tuple{typeof(PyCall.pyeval_), String, PyCall.PyDict{String, PyCall.PyObject, false}, PyCall.PyDict{String, PyCall.PyObject, false}, Int64, String})
    precompile(Tuple{getfield(PyCall, Symbol("##_pycall#82")), (Base.Iterators).Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(identity), PyCall.PyObject, PyCall.PyObject})
    precompile(Tuple{getfield(PyCall, Symbol("##_pycall#82")), (Base.Iterators).Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(identity), PyCall.PyObject, String, Int})
    precompile(Tuple{typeof(PyCall.ActivatePyActCtx)})
    precompile(Tuple{typeof(PyCall.pyexc_initialize)})
    precompile(Tuple{typeof(PyCall.Py_SetPythonHome), Ptr{Nothing}, String, Array{UInt16, 1}, Base.VersionNumber})
    precompile(Tuple{typeof(PyCall.PyTypeObject!), getfield(PyCall, Symbol("##95#96")){Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}}, PyCall.PyTypeObject, String, Int64})
    precompile(Tuple{getfield(PyCall, Symbol("##_pycall#82")), (Base.Iterators).Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(identity), PyCall.PyObject, Base.Dict{AbstractString, Any}})
    precompile(Tuple{getfield(PyCall, Symbol("##_pycall#82")), (Base.Iterators).Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(identity), PyCall.PyObject})
    precompile(Tuple{typeof(PyCall.init_datetime)})
    precompile(Tuple{typeof(PyCall.pystring), PyCall.PyObject})
    precompile(Tuple{getfield(PyCall, Symbol("##83#84")), Base.Pair{Symbol, Any}})
    precompile(Tuple{typeof(PyCall.pyjlwrap_getattr), Ptr{PyCall.PyObject_struct}, Ptr{PyCall.PyObject_struct}})
    precompile(Tuple{typeof(PyCall.pyptr_query), PyCall.PyObject})
    precompile(Tuple{typeof(PyCall.pyjlwrap_getiter), Ptr{PyCall.PyObject_struct}})
    precompile(Tuple{typeof(PyCall.maindict)})
    precompile(Tuple{typeof(PyCall.pybytes), String})
    precompile(Tuple{typeof(PyCall.pytype_query), PyCall.PyObject, Type{PyCall.PyObject}})
    precompile(Tuple{getfield(PyCall, Symbol("#kw#PyObject")), NamedTuple{(:engine,), Tuple{String}}, PyCall.PyObject, String})
    precompile(Tuple{typeof(PyCall.pyjlwrap_hash32), Ptr{PyCall.PyObject_struct}})
    precompile(Tuple{typeof(PyCall._pyimport), String})
    precompile(Tuple{getfield(PyCall, Symbol("##_pycall#82")), (Base.Iterators).Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:engine,), Tuple{String}}}, typeof(identity), PyCall.PyObject, String})
    precompile(Tuple{getfield(PyCall, Symbol("##_pycall#82")), (Base.Iterators).Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:header, :index, :sheet_name, :startrow, :startcol, :encoding), Tuple{Bool, Bool, String, Int64, Int64, String}}}, typeof(identity), PyCall.PyObject, PyCall.PyObject})
    precompile(Tuple{getfield(PyCall, Symbol("##_pycall#82")), (Base.Iterators).Pairs{Symbol, Array{Symbol, 1}, Tuple{Symbol}, NamedTuple{(:columns,), Tuple{Array{Symbol, 1}}}}, typeof(identity), PyCall.PyObject, Base.Dict{AbstractString, Array{Any, 1}}})
    precompile(Tuple{typeof(PyCall.pyjlwrap_repr), Ptr{PyCall.PyObject_struct}})
    precompile(Tuple{typeof(PyCall.pycall), PyCall.PyObject, Type{PyCall.PyAny}, PyCall.PyObject})
    precompile(Tuple{typeof(PyCall.pyimport), String})
    precompile(Tuple{typeof(PyCall.pyimport_conda), String, String, String})
    precompile(Tuple{getfield(PyCall, Symbol("#kw##pycall")), NamedTuple{(:header, :index, :sheet_name, :startrow, :startcol, :encoding), Tuple{Bool, Bool, String, Int64, Int64, String}}, typeof(PyCall.pycall), PyCall.PyObject, Type{PyCall.PyAny}, PyCall.PyObject})
    precompile(Tuple{typeof(PyCall.pyjlwrap_call), Ptr{PyCall.PyObject_struct}, Ptr{PyCall.PyObject_struct}, Ptr{PyCall.PyObject_struct}})
    precompile(Tuple{typeof(PyCall.__init__)})
    precompile(Tuple{typeof(PyCall.pysequence_query), PyCall.PyObject})
    precompile(Tuple{getfield(PyCall, Symbol("#kw##pycall")), NamedTuple{(:columns,), Tuple{Array{Symbol, 1}}}, typeof(PyCall.pycall), PyCall.PyObject, Type{PyCall.PyObject}, Base.Dict{AbstractString, Array{Any, 1}}})
    precompile(Tuple{typeof(PyCall.pydecref), PyCall.PyObject})
    precompile(Tuple{typeof(PyCall.pycall), PyCall.PyObject, Type{PyCall.PyAny}, Base.Dict{AbstractString, Any}})
    precompile(Tuple{typeof(PyCall.pyjlwrap_dealloc), Ptr{PyCall.PyObject_struct}})
    precompile(Tuple{getfield(PyCall, Symbol("##pycall#86")), (Base.Iterators).Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(identity), PyCall.PyObject, Type{PyCall.PyAny}, String, Int})
    precompile(Tuple{PyCall.PyObject})
    precompile(Tuple{typeof(PyCall.pycall), PyCall.PyObject, Type{PyCall.PyAny}, String, Int})
    precompile(Tuple{typeof(PyCall.pyjlwrap_new), PyCall.PyTypeObject, Distributed.WorkerState})
    precompile(Tuple{typeof(PyCall.pyjlwrap_init)})
    precompile(Tuple{typeof(PyCall._pycall), PyCall.PyObject, String, Int})
    precompile(Tuple{typeof(PyCall.pyjlwrap_hash), Ptr{PyCall.PyObject_struct}})
    precompile(Tuple{typeof(PyCall.pytype_query), PyCall.PyObject})
end
