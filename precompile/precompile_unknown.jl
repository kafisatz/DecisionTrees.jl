function _precompile_()
    ccall(:jl_generating_output, Cint, ()) == 1 || return nothing
    precompile(Tuple{Type{Array{Any, 2}}, Int64, Int64})
    precompile(Tuple{getfield(CSV, Symbol("#push_buf_to_vals!#10")){Array{CSV.RawField, 1}, Base.GenericIOBuffer{Array{UInt8, 1}}}})
    precompile(Tuple{Type{Array{Array{Bool, 1}, N} where N}, Int64})
    precompile(Tuple{getfield(Distributed, Symbol("##131#132")){Distributed.ProcessGroup, Distributed.RRID, typeof(Distributed.def_rv_channel)}})
    precompile(Tuple{Type{Base.Dict{AbstractString, Base.Dict{AbstractString, Any}}}})
    precompile(Tuple{getfield(DataStreams.Data, Symbol("##73#89")){Array{Any, 1}}, Int64})
    precompile(Tuple{Type{PyCall.PyObject}, Float64})
    precompile(Tuple{Type{Base.BitArray{1}}, Int64})
    precompile(Tuple{Type{Base.VersionNumber}, String})
    precompile(Tuple{Type{PyCall.PyError}, String})
    precompile(Tuple{Type{Ref{Base.Cstring}}, Array{String, 1}})
    precompile(Tuple{Type{FileWatching.PollingFileWatcher}, String, Float64})
    precompile(Tuple{Type{Base.Dict{AbstractString, Array{Any, 1}}}})
    precompile(Tuple{Type{Array{DecisionTrees.Splitdef{UInt8}, 1}}, Int64})
    precompile(Tuple{Type{Base.Dict{Any, Nothing}}})
    precompile(Tuple{Type{Base.Dict{String, Int64}}, Base.Generator{Base.Iterators.Enumerate{Array{String, 1}}, getfield(DataStreams.Data, Symbol("##2#4"))}})
    precompile(Tuple{Type{Array{Array{Float64, 1}, N} where N}, Int64})
    precompile(Tuple{getfield(Base, Symbol("##660#661")){String}, Base.IOStream})
    precompile(Tuple{Type{Array{Array{String, 1}, N} where N}, Int64})
    precompile(Tuple{getfield(Base, Symbol("##662#663")){String}, Base.IOStream})
    precompile(Tuple{Type{Base.Dict{Symbol, Int64}}})
    precompile(Tuple{Type{FileWatching.FileMonitor}, String})
    precompile(Tuple{Type{Array{UInt16, N} where N}, Tuple{Int64}})
    precompile(Tuple{Type{PyCall.PyObject}, Int64})
    precompile(Tuple{Type{Base.Dict{WeakRefStrings.WeakRefString{UInt8}, Int64}}})
    precompile(Tuple{Type{Base.Dict{String, UInt8}}})
    precompile(Tuple{Type{Base.Dict{String, String}}})
    precompile(Tuple{Type{Base.Dict{UInt8, Nothing}}})
    precompile(Tuple{Type{Base.Dict{String, Nothing}}})
    precompile(Tuple{Type{Base.BitArray{N} where N}, Int64})
    precompile(Tuple{Type{PyCall.PyObject}, Base.Dict{AbstractString, Any}})
    precompile(Tuple{Type{Base.Pipe}})
    precompile(Tuple{getfield(Test, Symbol("##1#2")){String, Tuple{Symbol, Symbol}}, Base.StackTraces.StackFrame})
    precompile(Tuple{getfield(Test, Symbol("##1#2")){String, Tuple{Symbol}}, Base.StackTraces.StackFrame})
    precompile(Tuple{Type{Base.Dict{Int64, Nothing}}})
    precompile(Tuple{Type{Base.Dict{AbstractString, Any}}})
    precompile(Tuple{Type{Base.Dict{Module, Revise.ExprsSigs}}})
    precompile(Tuple{Type{Base.Dict{Float64, Nothing}}})
    precompile(Tuple{Type{NamedTuple{(:col,), T} where T<:Tuple}, Int64})
    precompile(Tuple{Type{Array{DecisionTrees.ExcelSheet, N} where N}, Int64})
    precompile(Tuple{Type{Base.Set{Int64}}, Int64})
    precompile(Tuple{Type{PyCall.PyObject}, UInt64})
    precompile(Tuple{Type{Array{UInt8, N} where N}, Tuple{Int64}})
    precompile(Tuple{getfield(StatsBase, Symbol("##136#137")){StatsBase.Histogram{Int64, 1, Tuple{Array{Float64, 1}}}}, Array{Float64, 1}, Float64})
    precompile(Tuple{Type{PyCall.PyObject}, Base.Dict{Any, Any}})
    precompile(Tuple{Type{Base.ProcessChain}, Base.ProcessChain, Symbol})
    precompile(Tuple{getfield(Base, Symbol("##664#665")){String, String}, Base.IOStream})
    precompile(Tuple{getfield(Distributed, Symbol("##137#138")){Distributed.ProcessGroup, Distributed.RRID, Int64}})
    precompile(Tuple{Type{Base.Dict{Symbol, Nothing}}})
    precompile(Tuple{Type{DecisionTrees.PooledArraysDTM.PooledArray{Float64, R, N, RA} where RA where N where R<:Integer}, Array{Float64, 1}})
    precompile(Tuple{Type{Base.Dict{Int64, Function}}})
    precompile(Tuple{Type{StatsBase.Histogram{T, N, E} where E where N where T<:Real}, Tuple{Array{Float64, 1}}, Type{Int64}, Symbol, Bool})
    precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Pair{Symbol, Any}})
    precompile(Tuple{Type{Revise.ExprsSigs}})
    precompile(Tuple{Type{Base.Dict{WeakRef, Nothing}}})
    precompile(Tuple{getfield(Base, Symbol("##666#667")){String, Base.UUID, String}, Base.IOStream})
    precompile(Tuple{getfield(Base, Symbol("##258#259")){Tuple{Char, String, Char}}, Base.GenericIOBuffer{Array{UInt8, 1}}})
    precompile(Tuple{getfield(DataFrames, Symbol("##178#181")){Array{UInt8, 1}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}}, Int64})
    precompile(Tuple{Type{PyCall.PyObject}, UInt8})
    precompile(Tuple{Type{Array{Union{Array{Float64, 1}, Array{String, 1}}, 1}}, Int64})
    precompile(Tuple{getfield(Base, Symbol("##668#669")){String, Base.PkgId}, Base.IOStream})
    precompile(Tuple{Type{Array{Array{Array{Int64, 1}, 1}, N} where N}, Int64})
    precompile(Tuple{Type{Array{Any, N} where N}, Int64, Int64})
    precompile(Tuple{Type{Array{Array{DecisionTrees.Leaf, 1}, N} where N}, Int64})
    precompile(Tuple{getfield(Base, Symbol("##666#667")){String, Base.UUID, String}, Base.IOStream})
    precompile(Tuple{Type{DecisionTrees.PooledArraysDTM.PooledArray{T, R, N, RA} where RA where N where R<:Integer where T}, Array{String, 1}, Array{String, 1}, Type{UInt8}})
    precompile(Tuple{Type{ProgressMeter.Progress}, Int64, Int64, String, Int64, Symbol, Base.TTY})
    precompile(Tuple{Type{Array{Float64, N} where N}, Int64})
    precompile(Tuple{Type{Base.Dict{Float64, UInt16}}})
    precompile(Tuple{Type{DataStreams.Data.Schema{R, T} where T where R}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}, Tuple{String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String}, Int64, Base.Dict{Any, Any}})
    precompile(Tuple{getfield(Base, Symbol("##654#655")){Int64}, Base.GenericIOBuffer{Array{UInt8, 1}}})
    precompile(Tuple{Type{DataFrames.DataFrame}, Array{Any, 1}, DataFrames.Index})
    precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{String, Int64}, (Base.Pair{A, B} where B) where A})
    precompile(Tuple{Type{Base.Dict{Float64, UInt8}}})
    precompile(Tuple{Type{DataStreams.Data.Query{code, T, E, L, O} where O where L where E where T where code}, Array{Any, 1}, Array{String, 1}, Array{Any, 1}, Nothing, Nothing})
    precompile(Tuple{getfield(Base, Symbol("##258#259")){Tuple{Char, String, Char, String, Char}}, Base.GenericIOBuffer{Array{UInt8, 1}}})
    precompile(Tuple{Type{Array{UInt8, 1}}, Array{UInt8, 1}})
    precompile(Tuple{Type{Array{String, N} where N}, Int64, Int64})
    precompile(Tuple{Type{PyCall.PyObject}, Bool})
    precompile(Tuple{Type{PyCall.PyObject}, Nothing})
    precompile(Tuple{Type{Array{DecisionTrees.Rulepath{T} where T<:Unsigned, N} where N}, Int64})
    precompile(Tuple{Type{Array{AbstractString, N} where N}, Int64, Int64})
    precompile(Tuple{Type{Base.DimensionMismatch}, Nothing})
    precompile(Tuple{Type{Array{Int64, 1}}, Int64})
    precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{String, String}, (Base.Pair{A, B} where B) where A})
    precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{String, String}, Base.Pair{String, String}})
    precompile(Tuple{Type{DecisionTrees.ModelSettings}})
    precompile(Tuple{Type{Array{Union{DecisionTrees.Leaf, DecisionTrees.Node{UInt16}, DecisionTrees.Node{UInt8}}, N} where N}, Int64})
    precompile(Tuple{getfield(Base.StackTraces, Symbol("##10#11")){Base.StackTraces.StackFrame}, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}})
    precompile(Tuple{Type{Base.Dict{AbstractString, Any}}, Array{Base.Pair{String, String}, 1}})
    precompile(Tuple{Type{Core.Compiler.NewNode}, Int64, Bool, Core.Compiler.Const, Core.SSAValue, Int64})
    precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Base.Iterators.Enumerate{Array{String, 1}}, getfield(DataStreams.Data, Symbol("##2#4"))}})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Type{NamedTuple{(:col,), T} where T<:Tuple}, Base.UnitRange{Int64}})
    precompile(Tuple{Type{Tuple}, Core.SimpleVector})
    precompile(Tuple{Type{Base.Dict{AbstractString, Any}}, Base.Dict{Any, Any}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, String, 43, 43, :VORSCHAEDEN1_typetk, nothing, ()}}})
    precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Pair{Symbol, Tuple{Int64, Int64}}})
    precompile(Tuple{Type{PyCall.PyObject}, Base.Dict{AbstractString, Array{Any, 1}}})
    precompile(Tuple{Type{CSV.Options{Nothing}}, UInt8, UInt8, UInt8, Array{UInt8, 1}, Nothing, Bool, Nothing, UInt8, Array{UInt8, 1}, Array{UInt8, 1}, Bool, Int64, Int64, Int64, Array{Type{T} where T, 1}})
    precompile(Tuple{getfield(Core.Compiler, Symbol("##117#118")){Int64}, Int64})
    precompile(Tuple{getfield(Base, Symbol("##268#269")){Tuple{DataType}}, Base.IOStream})
    precompile(Tuple{Type{DecisionTrees.Leaf}, Int64, Float64, Float64, Float64, Int64, Array{DecisionTrees.Rulepath{T} where T<:Unsigned, 1}, Float64, Float64, Int64})
    precompile(Tuple{Type{DataStreams.Data.Schema{R, T} where T where R}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}, Tuple{String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String}, Int64})
    precompile(Tuple{Type{Base.StackTraces.StackFrame}, Symbol, Symbol, Int64, Core.CodeInfo, Bool, Bool, Int64})
    precompile(Tuple{Type{DecisionTrees.PooledArraysDTM.PooledArray{String, R, N, RA} where RA where N where R<:Integer}, Array{String, 1}})
    precompile(Tuple{Type{DecisionTrees.PooledArraysDTM.PooledArray{T, R, N, RA} where RA where N where R<:Integer where T}, Array{Float64, 1}, Array{Float64, 1}, Type{UInt16}})
    precompile(Tuple{Type{Base.Val{x} where x}, Type{Int}})
    precompile(Tuple{Type{Array{UInt64, N} where N}, Int64})
    precompile(Tuple{Type{Array{Array{Int64, 1}, N} where N}, Int64})
    precompile(Tuple{Type{DecisionTrees.DTMTable}, Array{String, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, DataFrames.DataFrame, Array{Array{Float64, 1}, 1}, Array{Array{String, 1}, 1}})
    precompile(Tuple{Type{Base.Dict{Symbol, Int64}}, Base.Iterators.Zip2{Array{Symbol, 1}, Base.UnitRange{Int64}}})
    precompile(Tuple{Type{Array{Int64, N} where N}, Int64})
    precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Pair{Symbol, TypeVar}})
    precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Type{T} where T, 1}})
    precompile(Tuple{Type{DecisionTrees.Node{T} where T<:Unsigned}, Int64, Int64, Array{UInt8, 1}, DecisionTrees.Leaf, DecisionTrees.Node{UInt8}, Array{DecisionTrees.Rulepath{T} where T<:Unsigned, 1}})
    precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Symbol, 1}})
    precompile(Tuple{Type{DecisionTrees.PooledArraysDTM.PooledArray{T, R, N, RA} where RA where N where R<:Integer where T}, Array{Float64, 1}, Array{Float64, 1}, Type{UInt8}})
    precompile(Tuple{Type{Array{Float64, N} where N}, Int64, Int64})
    precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Pair{Symbol, Any}})
    precompile(Tuple{Type{Array{UInt8, N} where N}, Int64})
    precompile(Tuple{Type{Array{DecisionTrees.Chart, N} where N}, Int64})
    precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Expr, 1}})
    precompile(Tuple{Type{Array{DecisionTrees.Leaf, N} where N}, Int64})
    precompile(Tuple{Type{DecisionTrees.Node{T} where T<:Unsigned}, Int64, Int64, Array{UInt8, 1}, DecisionTrees.Node{UInt8}, DecisionTrees.Leaf, Array{DecisionTrees.Rulepath{T} where T<:Unsigned, 1}})
    precompile(Tuple{Type{Test.Fail}, Symbol, Expr, String, Bool, LineNumberNode})
    precompile(Tuple{Type{DecisionTrees.Tree}, DecisionTrees.Node{UInt8}, Array{Array{Int64, 1}, 1}, Array{Array{Float64, 1}, 1}, Array{Array{String, 1}, 1}, Array{Int64, 1}, DecisionTrees.ModelSettings, DecisionTrees.ExcelData, Array{Union{Array{Float64, 1}, Array{String, 1}}, 1}})
    precompile(Tuple{Type{Array{Int64, N} where N}, Int64, Int64})
    precompile(Tuple{Type{Base.Dict{WeakRef, Nothing}}, Base.Dict{Any, Nothing}})
    precompile(Tuple{Type{DecisionTrees.Node{T} where T<:Unsigned}, Int64, Int64, Array{UInt8, 1}, DecisionTrees.Leaf, DecisionTrees.Leaf, Array{DecisionTrees.Rulepath{T} where T<:Unsigned, 1}})
    precompile(Tuple{Type{CSV.Options{D} where D}, UInt8, UInt8, UInt8, Array{UInt8, 1}, Nothing, Bool, Nothing, UInt8, Array{UInt8, 1}, Array{UInt8, 1}, Bool, Int64, Int64, Int64, Array{Type{T} where T, 1}})
    precompile(Tuple{Type{DecisionTrees.BoostedTree}, Array{Union{DecisionTrees.Leaf, DecisionTrees.Node{UInt16}, DecisionTrees.Node{UInt8}}, 1}, DecisionTrees.ModelSettings, Array{Array{Array{Int64, 1}, 1}, 1}, Array{Array{Float64, 1}, 1}, Array{Array{String, 1}, 1}, Array{Array{Int64, 1}, 1}, Array{Float64, 1}, Array{Int64, 1}, Array{Float64, 1}, Array{Float64, 1}, Float64, Bool, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 2}, DataFrames.DataFrame, DecisionTrees.ExcelData, Array{UInt8, 1}, Array{Union{Array{Float64, 1}, Array{String, 1}}, 1}})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(DecisionTrees, Symbol("##97#100")), Base.UnitRange{Int64}})
    precompile(Tuple{getfield(CSV, Symbol("##23#31")){Bool}, Base.IOStream})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, String, 66, 66, :Karosserie, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{getfield(Base, Symbol("##501#502")){Base.Cmd}, Tuple{Base.DevNullStream, Base.PipeEndpoint, Base.TTY}})
    precompile(Tuple{Type{Base.Order.Perm{O, V} where V<:(AbstractArray{T, 1} where T) where O<:Base.Order.Ordering}, Base.Order.ForwardOrdering, Array{Int64, 1}})
    precompile(Tuple{Type{Base.InterpreterIP}, Core.CodeInfo, Ptr{Nothing}})
    precompile(Tuple{Type{Tuple}, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("##178#181")){Array{UInt8, 1}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}}}})
    precompile(Tuple{Type{NamedTuple{(:col,), T} where T<:Tuple}, Tuple{Int64}})
    precompile(Tuple{Type{Array{String, N} where N}, Int64})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(DecisionTrees, Symbol("##96#99")), Base.UnitRange{Int64}})
    precompile(Tuple{Type{Array{String, N} where N}, UndefInitializer, Tuple{Int64, Int64}})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Test, Symbol("##23#24")){Int64}, Array{Any, 1}})
    precompile(Tuple{Type{Test.Returned}, Bool, Expr, LineNumberNode})
    precompile(Tuple{Type{Array{Any, N} where N}, UndefInitializer, Tuple{Int64, Int64}})
    precompile(Tuple{Type{DataStreams.Data.Schema{true, Tuple{Int64, Float64, Float64, Float64, Float64, Float64, Int64, String, String, String, Int64, String, String, String, String, String, String, String, String, String, String, Int64, String, Int64, String, String, Int64, String, String, Int64, String, String, Int64, String, String, Int64, String, Int64, String, String, Int64, Int64, String, Int64, Int64, String, Int64, Int64, String, Int64, String, String, String, Int64, String, String, String, String, Int64, Int64, Int64, String, String, String, String, String, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Float64, Int64, Float64, Float64, Float64, Float64, Int64, Int64, Int64, Int64, Int64, Int64}}}, Array{String, 1}, Int64, Int64, Base.Dict{Any, Any}, Base.Dict{String, Int64}})
    precompile(Tuple{Type{Test.DefaultTestSet}, String})
    precompile(Tuple{getfield(Base, Symbol("##501#502")){Base.Cmd}, Tuple{Base.PipeEndpoint, Base.TTY, Base.TTY}})
    precompile(Tuple{Type{NamedTuple{(:col,), Tuple{Int64}}}, Tuple{Int64}})
    precompile(Tuple{Type{CSV.Source{I, D} where D where I}, DataStreams.Data.Schema{true, Tuple{Int64, Float64, Float64, Float64, Float64, Float64, Int64, String, String, String, Int64, String, String, String, String, String, String, String, String, String, String, Int64, String, Int64, String, String, Int64, String, String, Int64, String, String, Int64, String, String, Int64, String, Int64, String, String, Int64, Int64, String, Int64, Int64, String, Int64, Int64, String, Int64, String, String, String, Int64, String, String, String, String, Int64, Int64, Int64, String, String, String, String, String, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Float64, Int64, Float64, Float64, Float64, Float64, Int64, Int64, Int64, Int64, Int64, Int64}}, CSV.Options{Nothing}, Base.GenericIOBuffer{Array{UInt8, 1}}, String, Int64})
    precompile(Tuple{Type{Test.Returned}, Bool, String, LineNumberNode})
    precompile(Tuple{getfield(Base, Symbol("##488#491")){String}, Base.GenericIOBuffer{Array{UInt8, 1}}})
    precompile(Tuple{Type{Array{Float64, 2}}, UndefInitializer, Int64, Int64})
    precompile(Tuple{Type{NamedTuple{(:sinkindex, :sortindex), Tuple{Int64, Nothing}}}, Tuple{Int64, Nothing}})
    precompile(Tuple{getfield(Base, Symbol("##501#502")){Base.Cmd}, Tuple{Base.DevNullStream, Base.DevNullStream, Base.DevNullStream}})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(DataFrames, Symbol("##178#181")){Array{UInt8, 1}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}}, Base.UnitRange{Int64}})
    precompile(Tuple{Type{DecisionTrees.Rulepath{T} where T<:Unsigned}, Int64, Array{UInt8, 1}, Bool})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, String, 63, 63, :Kraftstoffart, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, String, 57, 57, :Fahrzeugklasse, nothing, ()}}})
    precompile(Tuple{Type{Base.Order.Perm{O, V} where V<:(AbstractArray{T, 1} where T) where O<:Base.Order.Ordering}, Base.Order.ForwardOrdering, Array{Float64, 1}})
    precompile(Tuple{Type{DataStreams.Data.Schema{R, T} where T where R}, Array{Type{T} where T, 1}, Array{Base.SubString{String}, 1}, Int64, Base.Dict{Any, Any}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, Int64, 42, 42, :VORSCHAEDEN0_year, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, String, 17, 17, :SFKLASSE_VOLLKASKO, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, Int64, 89, 89, :anzahlzylinder2, nothing, ()}}})
    precompile(Tuple{Type{PyCall.PyDict{PyCall.PyAny, PyCall.PyAny, true}}, PyCall.PyObject})
    precompile(Tuple{Type{Array{Array{T, 1} where T, 1}}, UndefInitializer, Int64})
    precompile(Tuple{Type{ArgumentError}, Base.Missing})
    precompile(Tuple{Type{Array{Base.Pair{String, _} where _, 1}}, UndefInitializer, Int64})
    precompile(Tuple{Type{Array{Symbol, 1}}, UndefInitializer, Int64})
    precompile(Tuple{Type{NamedTuple{(:stderr,), Tuple{Base.TTY}}}, Tuple{Base.TTY}})
    precompile(Tuple{Type{NamedTuple{(:weightcol, :numcol, :denomcol, :independent_vars), T} where T<:Tuple}, Tuple{String, String, String, Array{String, 1}}})
    precompile(Tuple{(getfield(DataStreams.Data, Symbol("##68#70"))){Bool}, Type{Int}})
    precompile(Tuple{Type{Base.Dict{AbstractString, Any}}, Array{Base.Pair{String, _} where _, 1}})
    precompile(Tuple{Type{NamedTuple{(:allowmissing, :types, :categorical, :rows_for_type_detect), T} where T<:Tuple}, Tuple{Symbol, Array{DataType, 1}, Bool, Int64}})
    precompile(Tuple{Type{DataFrames.DataFrame}, Array{Float64, 2}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Int64})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Bool})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(DecisionTrees, Symbol("##36#37")), Array{UInt8, 1}})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, Float64, 85, 85, :beschleunigung2, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{Base.ImmutableDict{Symbol, Any}}, Base.ImmutableDict{Symbol, Any}, Symbol, DecisionTrees.DifferenceSplit})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, String, 35, 35, :NATIONALITAET, nothing, ()}}})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, Int64, 87, 87, :kfzsteuer2, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, String, 10, 10, :FREIE_WERKSTATTWAHL, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, Int64, 75, 75, :laenge2, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, Float64, 4, 4, :EXPOSURE, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, Int64, 81, 81, :hoechstgeschwindigkeit2, nothing, ()}}})
    precompile(Tuple{Type{Base.Order.Perm{O, V} where V<:(AbstractArray{T, 1} where T) where O<:Base.Order.Ordering}, Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}, Array{Float64, 1}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, Int64, 88, 88, :anzahlgaenge2, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, Int64, 47, 47, :VORSCHAEDEN2_month, nothing, ()}}})
    precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.string), Tuple{Array{Int64, 1}}})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, String, 10, 10, :FREIE_WERKSTATTWAHL, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{PyCall.PyObject}, String})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, Int64, 87, 87, :kfzsteuer2, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, String, 53, 53, :modell, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, String, 29, 29, :KENNZEICHEN, nothing, ()}}})
    precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Dict{Symbol, Int64}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, Int64, 41, 41, :VORSCHAEDEN0_month, nothing, ()}}})
    precompile(Tuple{Type{Base.ImmutableDict{Symbol, Any}}, Base.ImmutableDict{Symbol, Any}, Symbol, DecisionTrees.SortByMean})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, Float64, 82, 82, :verbrauchgesamt2, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, Int64, 50, 50, :adacid, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, Float64, 6, 6, :PREMIUM66, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, Int64, 71, 71, :hubraum2, nothing, ()}}})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, String, 46, 46, :VORSCHAEDEN2_typevk, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, Int64, 41, 41, :VORSCHAEDEN0_month, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{Array{Expr, 1}}, UndefInitializer, Int64})
    precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(==)), Tuple{Array{Float64, 1}, Int64}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, Int64, 76, 76, :hoehe2, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, Int64, 69, 69, :typklassetk_num, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, String, 64, 64, :Motorbauart, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, Float64, 5, 5, :LOSS20HALF, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, Int64, 1, 1, :ID, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, String, 19, 19, :STELLPLATZ_ABSCHLIESSBAR, nothing, ()}}})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, String, 15, 15, :MOTORRAD_BESITZER, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, Int64, 78, 78, :gesamtgewicht2, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, Int64, 77, 77, :leergewicht2, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, Int64, 61, 61, :tueranzahl, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, String, 25, 25, :HSN, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, String, 18, 18, :SFKLASSE_HAFTPFLICHT, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, Float64, 2, 2, :RAND1, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, Int64, 72, 72, :drehmoment2, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, Int64, 36, 36, :PLZ_WOHNORT, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, Int64, 24, 24, :ERSTZULASSUNG, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, TypeVar})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, String, 49, 49, :scrapedate, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, Int64, 42, 42, :VORSCHAEDEN0_year, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, String, 37, 37, :GESCHLECHT, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, String, 35, 35, :NATIONALITAET, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, String, 9, 9, :SCHUTZBRIEF_INKL, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, String, 8, 8, :MALLORCA_POLICE, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, Int64, 86, 86, :tank2, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, Float64, 85, 85, :beschleunigung2, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, String, 58, 58, :co2klasse, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, String, 56, 56, :antriebsart, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, String, 55, 55, :getriebeart, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, Int64, 38, 38, :FUEHRERSCHEIN_ERWORBEN_AM, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, Int64, 27, 27, :ZULASSUNG_AUF_VERSICHERUNGSNEHM, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, String, 25, 25, :HSN, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, String, 8, 8, :MALLORCA_POLICE, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, Float64, 6, 6, :PREMIUM66, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, Float64, 2, 2, :RAND1, nothing, ()}}})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, Int64, 75, 75, :laenge2, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, Int64, 73, 73, :breite2, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, String, 57, 57, :Fahrzeugklasse, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, String, 39, 39, :VORSCHAEDEN0_typeKH, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, String, 34, 34, :FAMILIENSTAND, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, String, 23, 23, :TSN, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, String, 21, 21, :NUTZUNGSWEISE, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, String, 20, 20, :NAECHTLICHER_STELLPLATZ, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, String, 19, 19, :STELLPLATZ_ABSCHLIESSBAR, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, String, 17, 17, :SFKLASSE_VOLLKASKO, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, String, 13, 13, :ZAHLUNGSWEISE, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, Float64, 3, 3, :RAND2, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, Float64, 84, 84, :verbrauchinnerorts2, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, Int64, 78, 78, :gesamtgewicht2, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, Int64, 54, 54, :preis, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, String, 40, 40, :VORSCHAEDEN0_typetk, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, String, 21, 21, :NUTZUNGSWEISE, nothing, ()}}})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, Int64, 91, 91, :modellstart_y, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, Int64, 89, 89, :anzahlzylinder2, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, String, 63, 63, :Kraftstoffart, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, String, 51, 51, :name, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, String, 16, 16, :AUTOMOBILCLUB, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, Float64, 4, 4, :EXPOSURE, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.length), Tuple{Array{Array{T, 1} where T, 1}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, Float64, 83, 83, :verbrauchausserorts2, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, Int64, 70, 70, :typklassevk_num, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, String, 66, 66, :Karosserie, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, String, 32, 32, :ART_DES_WOHNEIGENTUM, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, Int64, 24, 24, :ERSTZULASSUNG, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, String, 23, 23, :TSN, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, Int64, 22, 22, :JAEHRLICHE_FAHRLEISTUNG, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, String, 20, 20, :NAECHTLICHER_STELLPLATZ, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, Int64, 7, 7, :VORSCHAEDEN_ANZAHL, nothing, ()}}})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, Float64, 80, 80, :kofferraumvolumen_num, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, Int64, 70, 70, :typklassevk_num, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, String, 62, 62, :Motorart, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, String, 53, 53, :modell, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, String, 52, 52, :marke, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, Int64, 48, 48, :VORSCHAEDEN2_year, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, Int64, 38, 38, :FUEHRERSCHEIN_ERWORBEN_AM, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, String, 29, 29, :KENNZEICHEN, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, Int64, 27, 27, :ZULASSUNG_AUF_VERSICHERUNGSNEHM, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, Int64, 11, 11, :AUTOMOBILCLUB_MITGLIED_SEIT, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, Int64, 7, 7, :VORSCHAEDEN_ANZAHL, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, Float64, 3, 3, :RAND2, nothing, ()}}})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, String, 43, 43, :VORSCHAEDEN1_typetk, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, String, 32, 32, :ART_DES_WOHNEIGENTUM, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{UInt8}, Tuple{Array{Float64, 1}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, Float64, 80, 80, :kofferraumvolumen_num, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, Int64, 60, 60, :ps, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, String, 39, 39, :VORSCHAEDEN0_typeKH, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, Int64, 30, 30, :PLZ_DES_HALTER, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, String, 13, 13, :ZAHLUNGSWEISE, nothing, ()}}})
    precompile(Tuple{Type{DataFrames.DataFrameStream{T} where T}, Tuple{Array{Int64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Int64, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{Int64, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{Int64, 1}, Array{String, 1}, Array{Int64, 1}, Array{String, 1}, Array{String, 1}, Array{Int64, 1}, Array{String, 1}, Array{String, 1}, Array{Int64, 1}, Array{String, 1}, Array{String, 1}, Array{Int64, 1}, Array{String, 1}, Array{String, 1}, Array{Int64, 1}, Array{String, 1}, Array{Int64, 1}, Array{String, 1}, Array{String, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{String, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{String, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{String, 1}, Array{Int64, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{Int64, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{String, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Float64, 1}, Array{Int64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}}, Array{String, 1}})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, Int64, 86, 86, :tank2, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, Float64, 83, 83, :verbrauchausserorts2, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, Int64, 71, 71, :hubraum2, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, Int64, 68, 68, :typklasseh_num, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, String, 65, 65, :Schadstoffklasse, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, Int64, 60, 60, :ps, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, Int64, 59, 59, :kw, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, String, 58, 58, :co2klasse, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, String, 56, 56, :antriebsart, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, Int64, 45, 45, :VORSCHAEDEN1_year, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, Int64, 33, 33, :GEBURTSDATUM, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, String, 31, 31, :SELBSTGENUTZTES_WOHNEIGENTUM, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, Int64, 22, 22, :JAEHRLICHE_FAHRLEISTUNG, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, String, 12, 12, :BAHNCARD, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, Int64, 48, 48, :VORSCHAEDEN2_year, nothing, ()}}})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, Int64, 88, 88, :anzahlgaenge2, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, Float64, 84, 84, :verbrauchinnerorts2, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, Int64, 76, 76, :hoehe2, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, Int64, 67, 67, :Sitzanzahl, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, String, 28, 28, :STADT, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{Base.ImmutableDict{Symbol, Any}}, Base.ImmutableDict{Symbol, Any}, Symbol, Type{Int}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, Int64, 91, 91, :modellstart_y, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, Int64, 74, 74, :radstand2, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, Int64, 68, 68, :typklasseh_num, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, String, 65, 65, :Schadstoffklasse, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, Int64, 61, 61, :tueranzahl, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, Int64, 59, 59, :kw, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, String, 26, 26, :FINANZIERUNGSART, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, String, 18, 18, :SFKLASSE_HAFTPFLICHT, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, String, 15, 15, :MOTORRAD_BESITZER, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, String, 14, 14, :JAHRESKARTE_OEPNV, nothing, ()}}})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, Int64, 81, 81, :hoechstgeschwindigkeit2, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, Int64, 79, 79, :zuladung2, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, Int64, 74, 74, :radstand2, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, String, 64, 64, :Motorbauart, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, Int64, 44, 44, :VORSCHAEDEN1_month, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, String, 40, 40, :VORSCHAEDEN0_typetk, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, Int64, 30, 30, :PLZ_DES_HALTER, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, String, 46, 46, :VORSCHAEDEN2_typevk, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, String, 9, 9, :SCHUTZBRIEF_INKL, nothing, ()}}})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, String, 55, 55, :getriebeart, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, Int64, 90, 90, :co2_wert, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, Float64, 82, 82, :verbrauchgesamt2, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, Int64, 79, 79, :zuladung2, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, Int64, 73, 73, :breite2, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, String, 37, 37, :GESCHLECHT, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, Int64, 36, 36, :PLZ_WOHNORT, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, Int64, 33, 33, :GEBURTSDATUM, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, String, 31, 31, :SELBSTGENUTZTES_WOHNEIGENTUM, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, String, 28, 28, :STADT, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, String, 16, 16, :AUTOMOBILCLUB, nothing, ()}}})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, Int64, 69, 69, :typklassetk_num, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, String, 26, 26, :FINANZIERUNGSART, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, String, 14, 14, :JAHRESKARTE_OEPNV, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, String, 62, 62, :Motorart, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, Int64, 50, 50, :adacid, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, Int64, 45, 45, :VORSCHAEDEN1_year, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, Int64, 44, 44, :VORSCHAEDEN1_month, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, String, 34, 34, :FAMILIENSTAND, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, Int64, 11, 11, :AUTOMOBILCLUB_MITGLIED_SEIT, nothing, ()}}})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, Int64, 54, 54, :preis, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(<)), Tuple{Array{Float64, 1}, Int64}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, Int64, 77, 77, :leergewicht2, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, Int64, 72, 72, :drehmoment2, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, String, 51, 51, :name, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, String, 12, 12, :BAHNCARD, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, String, 49, 49, :scrapedate, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, Int64, 67, 67, :Sitzanzahl, nothing, ()}}})
    precompile(Tuple{Type{DataStreams.Data.Query{0x01, Tuple{DataStreams.Data.QueryColumn{0x01, Int64, 1, 1, :ID, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Float64, 2, 2, :RAND1, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Float64, 3, 3, :RAND2, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Float64, 4, 4, :EXPOSURE, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Float64, 5, 5, :LOSS20HALF, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Float64, 6, 6, :PREMIUM66, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 7, 7, :VORSCHAEDEN_ANZAHL, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 8, 8, :MALLORCA_POLICE, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 9, 9, :SCHUTZBRIEF_INKL, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 10, 10, :FREIE_WERKSTATTWAHL, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 11, 11, :AUTOMOBILCLUB_MITGLIED_SEIT, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 12, 12, :BAHNCARD, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 13, 13, :ZAHLUNGSWEISE, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 14, 14, :JAHRESKARTE_OEPNV, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 15, 15, :MOTORRAD_BESITZER, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 16, 16, :AUTOMOBILCLUB, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 17, 17, :SFKLASSE_VOLLKASKO, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 18, 18, :SFKLASSE_HAFTPFLICHT, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 19, 19, :STELLPLATZ_ABSCHLIESSBAR, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 20, 20, :NAECHTLICHER_STELLPLATZ, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 21, 21, :NUTZUNGSWEISE, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 22, 22, :JAEHRLICHE_FAHRLEISTUNG, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 23, 23, :TSN, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 24, 24, :ERSTZULASSUNG, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 25, 25, :HSN, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 26, 26, :FINANZIERUNGSART, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 27, 27, :ZULASSUNG_AUF_VERSICHERUNGSNEHM, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 28, 28, :STADT, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 29, 29, :KENNZEICHEN, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 30, 30, :PLZ_DES_HALTER, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 31, 31, :SELBSTGENUTZTES_WOHNEIGENTUM, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 32, 32, :ART_DES_WOHNEIGENTUM, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 33, 33, :GEBURTSDATUM, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 34, 34, :FAMILIENSTAND, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 35, 35, :NATIONALITAET, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 36, 36, :PLZ_WOHNORT, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 37, 37, :GESCHLECHT, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 38, 38, :FUEHRERSCHEIN_ERWORBEN_AM, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 39, 39, :VORSCHAEDEN0_typeKH, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 40, 40, :VORSCHAEDEN0_typetk, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 41, 41, :VORSCHAEDEN0_month, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 42, 42, :VORSCHAEDEN0_year, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 43, 43, :VORSCHAEDEN1_typetk, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 44, 44, :VORSCHAEDEN1_month, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 45, 45, :VORSCHAEDEN1_year, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 46, 46, :VORSCHAEDEN2_typevk, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 47, 47, :VORSCHAEDEN2_month, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 48, 48, :VORSCHAEDEN2_year, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 49, 49, :scrapedate, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 50, 50, :adacid, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 51, 51, :name, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 52, 52, :marke, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 53, 53, :modell, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 54, 54, :preis, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 55, 55, :getriebeart, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 56, 56, :antriebsart, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 57, 57, :Fahrzeugklasse, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 58, 58, :co2klasse, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 59, 59, :kw, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 60, 60, :ps, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 61, 61, :tueranzahl, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 62, 62, :Motorart, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 63, 63, :Kraftstoffart, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 64, 64, :Motorbauart, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 65, 65, :Schadstoffklasse, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 66, 66, :Karosserie, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 67, 67, :Sitzanzahl, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 68, 68, :typklasseh_num, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 69, 69, :typklassetk_num, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 70, 70, :typklassevk_num, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 71, 71, :hubraum2, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 72, 72, :drehmoment2, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 73, 73, :breite2, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 74, 74, :radstand2, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 75, 75, :laenge2, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 76, 76, :hoehe2, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 77, 77, :leergewicht2, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 78, 78, :gesamtgewicht2, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 79, 79, :zuladung2, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Float64, 80, 80, :kofferraumvolumen_num, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 81, 81, :hoechstgeschwindigkeit2, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Float64, 82, 82, :verbrauchgesamt2, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Float64, 83, 83, :verbrauchausserorts2, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Float64, 84, 84, :verbrauchinnerorts2, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Float64, 85, 85, :beschleunigung2, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 86, 86, :tank2, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 87, 87, :kfzsteuer2, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 88, 88, :anzahlgaenge2, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 89, 89, :anzahlzylinder2, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 90, 90, :co2_wert, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 91, 91, :modellstart_y, nothing, ()}}, (), nothing, nothing}}, Tuple{DataStreams.Data.QueryColumn{0x01, Int64, 1, 1, :ID, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Float64, 2, 2, :RAND1, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Float64, 3, 3, :RAND2, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Float64, 4, 4, :EXPOSURE, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Float64, 5, 5, :LOSS20HALF, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Float64, 6, 6, :PREMIUM66, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 7, 7, :VORSCHAEDEN_ANZAHL, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 8, 8, :MALLORCA_POLICE, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 9, 9, :SCHUTZBRIEF_INKL, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 10, 10, :FREIE_WERKSTATTWAHL, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 11, 11, :AUTOMOBILCLUB_MITGLIED_SEIT, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 12, 12, :BAHNCARD, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 13, 13, :ZAHLUNGSWEISE, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 14, 14, :JAHRESKARTE_OEPNV, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 15, 15, :MOTORRAD_BESITZER, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 16, 16, :AUTOMOBILCLUB, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 17, 17, :SFKLASSE_VOLLKASKO, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 18, 18, :SFKLASSE_HAFTPFLICHT, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 19, 19, :STELLPLATZ_ABSCHLIESSBAR, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 20, 20, :NAECHTLICHER_STELLPLATZ, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 21, 21, :NUTZUNGSWEISE, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 22, 22, :JAEHRLICHE_FAHRLEISTUNG, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 23, 23, :TSN, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 24, 24, :ERSTZULASSUNG, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 25, 25, :HSN, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 26, 26, :FINANZIERUNGSART, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 27, 27, :ZULASSUNG_AUF_VERSICHERUNGSNEHM, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 28, 28, :STADT, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 29, 29, :KENNZEICHEN, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 30, 30, :PLZ_DES_HALTER, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 31, 31, :SELBSTGENUTZTES_WOHNEIGENTUM, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 32, 32, :ART_DES_WOHNEIGENTUM, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 33, 33, :GEBURTSDATUM, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 34, 34, :FAMILIENSTAND, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 35, 35, :NATIONALITAET, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 36, 36, :PLZ_WOHNORT, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 37, 37, :GESCHLECHT, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 38, 38, :FUEHRERSCHEIN_ERWORBEN_AM, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 39, 39, :VORSCHAEDEN0_typeKH, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 40, 40, :VORSCHAEDEN0_typetk, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 41, 41, :VORSCHAEDEN0_month, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 42, 42, :VORSCHAEDEN0_year, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 43, 43, :VORSCHAEDEN1_typetk, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 44, 44, :VORSCHAEDEN1_month, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 45, 45, :VORSCHAEDEN1_year, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 46, 46, :VORSCHAEDEN2_typevk, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 47, 47, :VORSCHAEDEN2_month, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 48, 48, :VORSCHAEDEN2_year, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 49, 49, :scrapedate, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 50, 50, :adacid, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 51, 51, :name, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 52, 52, :marke, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 53, 53, :modell, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 54, 54, :preis, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 55, 55, :getriebeart, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 56, 56, :antriebsart, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 57, 57, :Fahrzeugklasse, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 58, 58, :co2klasse, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 59, 59, :kw, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 60, 60, :ps, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 61, 61, :tueranzahl, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 62, 62, :Motorart, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 63, 63, :Kraftstoffart, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 64, 64, :Motorbauart, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 65, 65, :Schadstoffklasse, nothing, ()}, DataStreams.Data.QueryColumn{0x01, String, 66, 66, :Karosserie, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 67, 67, :Sitzanzahl, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 68, 68, :typklasseh_num, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 69, 69, :typklassetk_num, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 70, 70, :typklassevk_num, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 71, 71, :hubraum2, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 72, 72, :drehmoment2, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 73, 73, :breite2, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 74, 74, :radstand2, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 75, 75, :laenge2, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 76, 76, :hoehe2, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 77, 77, :leergewicht2, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 78, 78, :gesamtgewicht2, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 79, 79, :zuladung2, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Float64, 80, 80, :kofferraumvolumen_num, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 81, 81, :hoechstgeschwindigkeit2, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Float64, 82, 82, :verbrauchgesamt2, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Float64, 83, 83, :verbrauchausserorts2, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Float64, 84, 84, :verbrauchinnerorts2, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Float64, 85, 85, :beschleunigung2, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 86, 86, :tank2, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 87, 87, :kfzsteuer2, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 88, 88, :anzahlgaenge2, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 89, 89, :anzahlzylinder2, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 90, 90, :co2_wert, nothing, ()}, DataStreams.Data.QueryColumn{0x01, Int64, 91, 91, :modellstart_y, nothing, ()}}})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Int64, Type{DataStreams.Data.QueryColumn{0x01, String, 52, 52, :marke, nothing, ()}}})
    precompile(Tuple{Type{Base.Order.Perm{O, V} where V<:(AbstractArray{T, 1} where T) where O<:Base.Order.Ordering}, Base.Order.By{getfield(DataStreams.Data, Symbol("##72#88"))}, Array{Any, 1}})
    precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{Symbol}, Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.Unicode.lowercase), Tuple{Array{Base.SubString{String}, 1}}}}})
    precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(!)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.isvalid), Tuple{Array{String, 1}}}}})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, Float64, 5, 5, :LOSS20HALF, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, PyCall.PyObject})
    precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.isvalid), Tuple{Array{String, 1}}})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, Int64, 90, 90, :co2_wert, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.Unicode.lowercase), Tuple{Array{Base.SubString{String}, 1}}})
    precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{String, Float64}, Base.Pair{String, Float64}})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, Int64, 47, 47, :VORSCHAEDEN2_month, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{Base.Dict{AbstractString, Any}}, Array{Base.Pair{String, Array{Symbol, 1}}, 1}})
    precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(<=)), Tuple{Array{Float64, 1}, Int64}})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Dates, Symbol("##36#37")), Tuple{DataType, DataType, DataType}})
    precompile(Tuple{Type{DataStreams.Data.QueryColumn{0x01, Int64, 1, 1, :ID, nothing, ()}}, Nothing, Nothing, Nothing, Nothing})
    precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(DataStreams.Data, Symbol("##57#63")), Tuple{Symbol}})
    precompile(Tuple{Type{UInt64}, Ptr{Nothing}})
    precompile(Tuple{Type{ArgumentError}, PyCall.PyObject})
    precompile(Tuple{Type{Base.TwicePrecision{Float64}}, Tuple{Int64, Int64}})
    precompile(Tuple{Type{PyCall.PyObject}, PyCall.PyObject})
    precompile(Tuple{Type{Tuple}, Base.Generator{Tuple{DataType, DataType, DataType}, getfield(Dates, Symbol("##36#37"))}})
    precompile(Tuple{Type{DataStreams.Data.Schema{R, T} where T where R}, Array{Type{T} where T, 1}, Array{Base.SubString{String}, 1}, Int64})
    precompile(Tuple{Type{DecisionTrees.PooledArraysDTM.PooledArray{T, R, N, RA} where RA where N where R<:Integer where T}, Array{Float64, 1}})
    precompile(Tuple{Type{DecisionTrees.PooledArraysDTM.PooledArray{T, R, N, RA} where RA where N where R<:Integer where T}, Array{String, 1}})
    precompile(Tuple{getfield(Base, Symbol("##489#492")){String}, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}})
    precompile(Tuple{Type{PyCall.PyObject}, Array{Symbol, 1}})
    precompile(Tuple{getfield(Revise, Symbol("##7#8")){Base.PkgId}})
    precompile(Tuple{getfield(Revise, Symbol("##7#8")){Base.PkgId}})
    precompile(Tuple{Type{PyCall.PyAny}, PyCall.PyObject})
    precompile(Tuple{getfield(Revise, Symbol("##7#8")){Base.PkgId}})
end
