        - #tbd todo add single quotes around sheetnames for all chart formulas
        - export write_statistics
        - 
        - function create_dataframe{T<:AbstractString,U<:Any}(arr::Array{U,2},header::Array{T,1})
        - 	res=convert(DataFrame,arr)
        - 	hsym=Symbol[x for x in header]
        - 	names!(res,hsym)
        - 	return res
        - end
        - 
        - function create_custom_dict(df::DataFrame)	
        0 	header=names(df)
        0 	d=Dict{AbstractString,Array{Any,1}}()
        0 	for i=1:length(header)			
        0 		d[string(header[i])]=df[i]
        - 	end
        0 	return d
        - end
        - 
        - function addChartToWorkbook!(workbook::PyObject,worksheet::PyObject,chartDict::Dict{AbstractString,Dict{AbstractString,Any}},location::AbstractString) #;properties=["set_x_axis", "set_y_axis","set_legend"])
        - 	chart = pycall(workbook["add_chart"],PyAny,chartDict["add_chart"])
        - 	stopboolean=true
        - 	i=1
        - 	local thiskey
        - 	while stopboolean
        - 		thiskey=string("series",i)
        - 		if haskey(chartDict,thiskey)
        - 			pycall(chart["add_series"],PyAny,chartDict[thiskey])
        - 		else
        - 			stopboolean=false
        - 			break #if there is no series2 then we assume there is no series 3 to n either
        - 		end
        - 		i+=1
        - 	end
        - 	#check if this is a combined chart
        - 	thiskey="combChart"
        - 	i2=1
        - 	stopboolean=true
        - 	if haskey(chartDict,thiskey)
        - 		second_chart = pycall(workbook["add_chart"],PyAny,chartDict[thiskey])
        - 		while stopboolean
        - 			thiskey=string("series_comb",i2)
        - 			if haskey(chartDict,thiskey)
        - 				pycall(second_chart["add_series"],PyAny,chartDict[thiskey])
        - 			else
        - 				stopboolean=false
        - 				break #if there is no series2 then we assume there is no series 3 to n either
        - 			end
        - 			i2+=1
        - 		end
        - 		#combine the charts
        - 		pycall(chart["combine"],PyAny,second_chart)		
        - 	end
        - 	#set other properties
        - 	for x in keys(chartDict)
        - 		fieldsWhichAreAlreadySet=[convert(String,string("series",zz)) for zz in 1:i]
        - 		resevedKeywords=["combChart","series_comb1","series_comb2","series_comb3", "series_comb4"] #currently limited to 1+4 series for combined charts
        - 		append!(fieldsWhichAreAlreadySet,["add_series","add_chart"])
        - 		append!(fieldsWhichAreAlreadySet,resevedKeywords)		
        - 		if !in(x,fieldsWhichAreAlreadySet)
        - 			pycall(chart[x],PyAny,chartDict[x])	
        - 		end			
        - 	end
        - 	pycall(worksheet["insert_chart"],PyAny,location, chart)
        - 	#writer[:save]()
        - end
        - 
        - function write_statistics{T<:AbstractString}(excelData::ExcelData,statsfile::T) #,charts::Array{Chart,1})		
        - 	#writing an Excel file seems very slow if the file already exists!
        0 	isfile(statsfile)&&rm(statsfile)
        - 	
        0 	writer=writeDFtoExcel(excelData,statsfile,0,0)
        0 	workbook = writer[:book]
        - 	#Plot charts	
        0 	for c in excelData.charts
        0 		sheetWhereChartIsLocated=c.sheet		
        0 		worksheet = writer[:sheets][sheetWhereChartIsLocated]
        0 		addChartToWorkbook!(workbook,worksheet,c.chartDict,c.location);
        - 	end
        - 	#save (=write) Excel file and close it	
        0 	writer[:save]()
        0 	return nothing
        - end
        - 
        - function writeDFtoExcel{T<:AbstractString}(excelData::ExcelData,existingFile::T,row::Int,col::Int)
        - #http://search.cpan.org/~jmcnamara/Excel-Writer-XLSX/lib/Excel/Writer/XLSX.pm
        - 	#@assert isfile(existingFile)
        0 	@assert min(row,col)>=0
        - 	#write all data    
        - 	#writer = pyModPandas.ExcelWriter(existingFile, engine = "xlsxwriter")
        -     #pyModPandas[:ExcelWriter]
        0     writer=pyModPandas[:ExcelWriter](existingFile, engine = "xlsxwriter")
        -     
        0 	for xlSheet in excelData.sheets
        0 		df=xlSheet.data
        0 	    sheet=xlSheet.name
        - 		#create python dataframe	
        0 		dataDict = create_custom_dict(df)
        0 		dataDict = create_custom_dict(df)
        - 		#pyDF = pyModPandas.DataFrame(dataDict,columns=names(df)) #this was working under 0.4 but in 0.5 is converted to a julia dict (instead of being a python DF)
        0 		pyDF=pycall(pyModPandas[:DataFrame], PyObject, dataDict,columns=names(df))		
        0 		pycall(pyDF["to_excel"],PyAny,writer, header=false,index=false, sheet_name = sheet,startrow=row, startcol=col, encoding="utf-8")  #index=false suppress the rowcount		
        - 	end
        - 	#DataFrame.to_excel(excel_writer, sheet_name='Sheet1', na_rep='', float_format=None, columns=None, header=True, index=True, index_label=None, startrow=0, startcol=0, engine=None, merge_cells=True, encoding=None, inf_rep='inf')
        - 	#writer[:save]()
        0 	return writer
        - 	#book = pyModOpenpyxl.load_workbook(excel_file)
        - 	#snames=pycall(book["get_sheet_names"],PyAny)
        - 	#pyeval("df.to_excel(writer,sheet_name='Sheet1',startrow=5,startcol=3)",df=pyDF,writer=writer)
        - 	#writer[:sheets]=pyeval("dict((ws.title, ws) for ws in book.worksheets)",book=book,writer=writer)
        - end
        - 
        - function excelLetter(x::Int)
        0 	@assert x>0
        0 	if x>702
        0 		error("Only columns up to 702 are supported")
        - 	else
        0 		d,r=divrem(x,26)
        0 		if r==0
        0 			r+=26
        0 			d-=1
        - 		end		
        0 			if d>0
        0 				letter=string(Char(64+d))
        - 			else
        0 				letter=""			
        - 			end
    72576 			letter=string(letter,string(Char(64+r)))
        - 		#end
        - 	end
        0 	return convert(String,letter)
        - end
        - 
        - function defineRelativityChart{T<:AbstractString}(sheetWhereChartIsLocated::T,dataSheet::T,location::T,rows::Int,headercol1::Int,headerrow1::Int;headerrow2::Int=0,headercol2::Int=0,datarow2::Int=0,xtitle="Score Band",ytitle="Relativity",xscale=1.4,title="",datarow::Int=0,valuescol::Int=0,categoriescol::Int=0,valuescol2::Int=0,yscale::Float64=NaN)
     4976 	chartDict=Dict{AbstractString,Dict{AbstractString,Any}}()
    36000 	chartDict["add_chart"]=Dict{Any,Any}("type"=>"column")
        0 	if categoriescol==0
        0 		categoriescol=1
        - 	end
        0 	if datarow==0
        0 		datarow=headerrow1+1
        - 	end
        0 	if valuescol==0
        0 		valuescol=headercol1
        - 	end
        - 	
        - 	#line1
    22752 		nameref=string("=",dataSheet,"!\$",excelLetter(headercol1),'$',headerrow1)
    30336 		valueref=string("=",dataSheet,"!\$",excelLetter(valuescol),'$',datarow,":\$",excelLetter(valuescol),'\$',datarow+rows-1)
    30336 		categoriesref=string("=",dataSheet,"!\$",excelLetter(categoriescol),'$',datarow,":\$",excelLetter(categoriescol),'\$',datarow+rows-1)	
    35200 		series=Dict{Any,Any}("name"=>nameref,"categories"=>categoriesref,"values"=>valueref)
        - 		#series1=Dict{Any,Any}("name"=>nameref,"categories"=>categoriesref,"values"=>valueref,"line"=>{"width"=>1.00})
    84000 		chartDict["series1"]=deepcopy(series)
        - 	#line2
        0 		if headerrow2==0
        0 			headerrow2=headerrow1
        - 		end		
        0 		if headercol2==0
        0 			headercol2=headercol1+1
        - 		end		
        0 		if datarow2==0
        0 			datarow2=datarow
        - 		end
        0 		if valuescol2==0
        0 			valuescol2=headercol2
        - 		end
        - 		
    22752 		nameref=string("=",dataSheet,"!\$",excelLetter(headercol2),'$',headerrow2)
    30336 		valueref=string("=",dataSheet,"!\$",excelLetter(valuescol2),'$',datarow2,":\$",excelLetter(valuescol2),'\$',datarow2+rows-1)
    30336 		categoriesref=string("=",dataSheet,"!\$",excelLetter(categoriescol),'$',datarow2,":\$",excelLetter(categoriescol),'\$',datarow2+rows-1)	
    35200 		series=Dict{Any,Any}("name"=>nameref,"categories"=>categoriesref,"values"=>valueref)
    84000 		chartDict["series2"]=deepcopy(series)
        - 	#options
    67200 	chartDict["set_x_axis"]=Dict{Any,Any}("name"=>xtitle, "date_axis"=>false)
    71200 	chartDict["set_y_axis"]=Dict{Any,Any}("name"=>ytitle, "major_gridlines"=>Dict{Any,Any}("visible"=>true))
    36000 	chartDict["set_legend"]=Dict{Any,Any}("position"=>"right")
        0 	if length(title)!=0
        0 		chartDict["set_title"]=Dict{Any,Any}("name"=>title)
        - 	end
        - 	#NOTE: the default chart size is about 14.41 rows in Excel
        0 	if isnan(yscale)
        0 		yscale=1.0/14.41*(min(30,rows)+2)
        - 	end
    70400 	chartDict["set_size"]=Dict{Any,Any}("x_scale"=>xscale, "y_scale"=>yscale)
        - 	
    14400 	resChart=Chart(convert(String,sheetWhereChartIsLocated),chartDict,convert(String,uppercase(location)))
        0 	return resChart
        - end
        - 
        - function defineScoreChart{T<:AbstractString}(sheetWhereChartIsLocated::T,dataSheet::T,location::T,rows::Int,scoreCol::Int,weightCol::Int,observedCol::Int,SmoothedCol::Int)
        - 	#headercol1::Int,headerrow1::Int)
       80 	chartDict=Dict{AbstractString,Dict{AbstractString,Any}}()
      720 	chartDict["add_chart"]=Dict{Any,Any}("type"=>"line")
        - 	categoriescol=scoreCol
        - 	headerrow=1
        0 	datarow=headerrow+1
        - 		
      656 	categoriesref=string("=",dataSheet,"!\$",excelLetter(categoriescol),'$',datarow,":\$",excelLetter(categoriescol),'\$',datarow+rows-1)	
        - 	
        - 	#line1
        0 	valuescol=observedCol
      416 		nameref=string("=",dataSheet,"!\$",excelLetter(valuescol),'$',headerrow)
      656 		valueref=string("=",dataSheet,"!\$",excelLetter(valuescol),'$',datarow,":\$",excelLetter(valuescol),'\$',datarow+rows-1)		
      704 		series=Dict{Any,Any}("name"=>nameref,"categories"=>categoriesref,"values"=>valueref)
     1664 		chartDict["series1"]=deepcopy(series)
        - 	#line2
        0 	valuescol=SmoothedCol
      416 		nameref=string("=",dataSheet,"!\$",excelLetter(valuescol),'$',headerrow)
      656 		valueref=string("=",dataSheet,"!\$",excelLetter(valuescol),'$',datarow,":\$",excelLetter(valuescol),'\$',datarow+rows-1)		
      704 		series=Dict{Any,Any}("name"=>nameref,"categories"=>categoriesref,"values"=>valueref)
     1664 		chartDict["series2"]=deepcopy(series)
        - 	#line3 on Secondary Axis
        0 	valuescol=weightCol
      416 		nameref=string("=",dataSheet,"!\$",excelLetter(valuescol),'$',headerrow)
      656 		valueref=string("=",dataSheet,"!\$",excelLetter(valuescol),'$',datarow,":\$",excelLetter(valuescol),'\$',datarow+rows-1)				
      736 		series=Dict{Any,Any}("name"=>nameref,"categories"=>categoriesref,"values"=>valueref,"y2_axis"=>1)
     1760 		chartDict["series3"]=deepcopy(series)
        - 		
        - 	#options
     1344 	chartDict["set_x_axis"]=Dict{Any,Any}("name"=>"Score", "date_axis"=>false)
     1424 	chartDict["set_y_axis"]=Dict{Any,Any}("name"=>"", "major_gridlines"=>Dict{Any,Any}("visible"=>true))
      720 	chartDict["set_y2_axis"]=Dict{Any,Any}("name"=>"Weight")
      720 	chartDict["set_legend"]=Dict{Any,Any}("position"=>"bottom")	
     1408 	chartDict["set_size"]=Dict{Any,Any}("x_scale"=>3.4, "y_scale"=>2.4)
      720 	chartDict["set_title"]=Dict{Any,Any}("name"=>"Estimates")
        - 	
      288 	resChart=Chart(convert(String,sheetWhereChartIsLocated),chartDict,convert(String,uppercase(location)))
        0 	return resChart
        - end
        - 
        - function defineUnivariateChart{T<:AbstractString}(sheetWhereChartIsLocated::T,dataSheet::T,location::T,charttitle::String,rows::Int,categoriescol::Int,scoreCol::Int,weightCol::Int,headerrow::Int)
        - 	#headercol1::Int,headerrow1::Int)
     1840 	chartDict=Dict{AbstractString,Dict{AbstractString,Any}}()
    16560 	chartDict["add_chart"]=Dict{Any,Any}("type"=>"column")
        - 	#categoriescol=scoreCol
        - 	#headerrow=1
        0 	datarow=headerrow+1		
    14672 	categoriesref=string("=",dataSheet,"!\$",excelLetter(categoriescol),'$',datarow,":\$",excelLetter(categoriescol),'\$',datarow+rows-1)	
        - 	
        - 	#line1
        0 	valuescol=weightCol
    10752 		nameref=string("=",dataSheet,"!\$",excelLetter(valuescol),'$',headerrow)
    14672 		valueref=string("=",dataSheet,"!\$",excelLetter(valuescol),'$',datarow,":\$",excelLetter(valuescol),'\$',datarow+rows-1)		
    16192 		series=Dict{Any,Any}("name"=>nameref,"categories"=>categoriesref,"values"=>valueref)	
    38640 		chartDict["series1"]=deepcopy(series)
        - 	#line2 on Secondary Axis
        0 	valuescol=scoreCol
    10752 		nameref=string("=",dataSheet,"!\$",excelLetter(valuescol),'$',headerrow)
    14672 		valueref=string("=",dataSheet,"!\$",excelLetter(valuescol),'$',datarow,":\$",excelLetter(valuescol),'\$',datarow+rows-1)				
    16928 		series=Dict{Any,Any}("name"=>nameref,"categories"=>categoriesref,"values"=>valueref,"y2_axis"=>1)
    16560 		chartDict["combChart"]=Dict{Any,Any}("type"=>"line")
    40848 		chartDict["series_comb1"]=deepcopy(series) #combined Charts (bar/line charts) use a specific notation of combChart instead of Series2
        - 		
        - 	#options
    30912 	chartDict["set_x_axis"]=Dict{Any,Any}("name"=>charttitle, "date_axis"=>false)
    32752 	chartDict["set_y_axis"]=Dict{Any,Any}("name"=>"Weight", "major_gridlines"=>Dict{Any,Any}("visible"=>true))
    16560 	chartDict["set_y2_axis"]=Dict{Any,Any}("name"=>"Average Score")
    16560 	chartDict["set_legend"]=Dict{Any,Any}("position"=>"bottom")
    32384 	chartDict["set_size"]=Dict{Any,Any}("x_scale"=>3.4, "y_scale"=>1.4)
    16560 	chartDict["set_title"]=Dict{Any,Any}("name"=>charttitle)
        - 	
     6624 	resChart=Chart(convert(String,sheetWhereChartIsLocated),chartDict,convert(String,uppercase(location)))
        0 	return resChart
        - end
        - 
        - 
        - function defineUnivariateChartWith2Lines{T<:AbstractString}(sheetWhereChartIsLocated::T,dataSheet::T,location::T,charttitle::String,rows::Int,categoriescol::Int,line1Col::Int,line2Col::Int,weightCol::Int,headerrow::Int)
        - 	#headercol1::Int,headerrow1::Int)
     1840 	chartDict=Dict{AbstractString,Dict{AbstractString,Any}}()
    16560 	chartDict["add_chart"]=Dict{Any,Any}("type"=>"column")
        - 	#categoriescol=line1Col
        - 	#headerrow=1
        0 	datarow=headerrow+1		
    14672 	categoriesref=string("=",dataSheet,"!\$",excelLetter(categoriescol),'$',datarow,":\$",excelLetter(categoriescol),'\$',datarow+rows-1)	
        - 	
        - 	#line1 (which is a bar here)
        0 	valuescol=weightCol
    10752 		nameref=string("=",dataSheet,"!\$",excelLetter(valuescol),'$',headerrow)
    14672 		valueref=string("=",dataSheet,"!\$",excelLetter(valuescol),'$',datarow,":\$",excelLetter(valuescol),'\$',datarow+rows-1)		
    16192 		series=Dict{Any,Any}("name"=>nameref,"categories"=>categoriesref,"values"=>valueref)	
    38640 		chartDict["series1"]=deepcopy(series)
        - 	#line2 on Secondary Axis
        0 	valuescol=line1Col
    10752 		nameref=string("=",dataSheet,"!\$",excelLetter(valuescol),'$',headerrow)
    14672 		valueref=string("=",dataSheet,"!\$",excelLetter(valuescol),'$',datarow,":\$",excelLetter(valuescol),'\$',datarow+rows-1)				
    16928 		series=Dict{Any,Any}("name"=>nameref,"categories"=>categoriesref,"values"=>valueref,"y2_axis"=>1)
    16560 		chartDict["combChart"]=Dict{Any,Any}("type"=>"line")
    40848 		chartDict["series_comb1"]=deepcopy(series) #combined Charts (bar/line charts) use a specific notation of combChart instead of Series2
        - 	#line3 on Secondary Axis
        0 	valuescol=line2Col
    10752 		nameref=string("=",dataSheet,"!\$",excelLetter(valuescol),'$',headerrow)
    14672 		valueref=string("=",dataSheet,"!\$",excelLetter(valuescol),'$',datarow,":\$",excelLetter(valuescol),'\$',datarow+rows-1)				
    16928 		series=Dict{Any,Any}("name"=>nameref,"categories"=>categoriesref,"values"=>valueref,"y2_axis"=>1)
    16560 		chartDict["combChart"]=Dict{Any,Any}("type"=>"line")
    40848 		chartDict["series_comb2"]=deepcopy(series) #combined Charts (bar/line charts) use a specific notation of combChart instead of Series2
        - 		
        - 	#options
    30912 	chartDict["set_x_axis"]=Dict{Any,Any}("name"=>charttitle, "date_axis"=>false)
    32752 	chartDict["set_y_axis"]=Dict{Any,Any}("name"=>"Weight", "major_gridlines"=>Dict{Any,Any}("visible"=>true))
    16560 	chartDict["set_y2_axis"]=Dict{Any,Any}("name"=>"Average Score")
    16560 	chartDict["set_legend"]=Dict{Any,Any}("position"=>"bottom")
    32384 	chartDict["set_size"]=Dict{Any,Any}("x_scale"=>3.4, "y_scale"=>1.4)
    52992 	chartDict["set_title"]=Dict{Any,Any}("name"=>charttitle)
        - 	
     6624 	resChart=Chart(convert(String,sheetWhereChartIsLocated),chartDict,convert(String,uppercase(location)))
        0 	return resChart
        - end
        - 
        - function defineTwoWayCharts{T<:AbstractString}(sheetWhereChartIsLocated::T,dataSheet::T,location::T,charttype::T,firstdatarow::Int,rows::Int,headercol::Int,nClasses::Int,descriptorcolumn::Int,xaxisname::T,yaxisname::T,
        - 		title::T;legendpos="top",categoriescol=1,xaxisformat="",yaxisformat="",xscale=3,yscale=1.5)
        - 	#http://xlsxwriter.readthedocs.org/en/latest/chart.html
      320 	chartDict=Dict{AbstractString,Dict{AbstractString,Any}}()
     2880 	chartDict["add_chart"]=Dict{Any,Any}("type"=>charttype)
        0 	datarow=firstdatarow
     2560 	categoriesref=string("=",dataSheet,"!\$",excelLetter(categoriescol),'$',datarow,":\$",excelLetter(categoriescol),'\$',datarow+rows-1)		
        - 
        - 	valuescol=headercol
        0 	for count=1:nClasses # in headercols						
    74880 		chartDict[string("series",count)]=deepcopy(Dict{Any,Any}("name"=>string("=",dataSheet,"!\$",excelLetter(descriptorcolumn),'$',datarow),"categories"=>categoriesref,
        - 				"values"=>string("=",dataSheet,"!\$",excelLetter(valuescol),'$',datarow,":\$",excelLetter(valuescol),'\$',datarow+rows-1)))
        0 		datarow+=rows+2
        - 	end
        - 	#options
     5376 	chartDict["set_x_axis"]=Dict{Any,Any}("name"=>xaxisname, "date_axis"=>false)
     5696 	chartDict["set_y_axis"]=Dict{Any,Any}("name"=>yaxisname,"major_gridlines"=>Dict{Any,Any}("visible"=>true))
     2880 	chartDict["set_legend"]=Dict{Any,Any}("position"=>legendpos)
     5568 	chartDict["set_size"]=Dict{Any,Any}("x_scale"=>xscale, "y_scale"=>yscale)
     9216 	chartDict["set_title"]=Dict{Any,Any}("name"=>title)
        0 	if length(xaxisformat)>0
        0 		chartDict["set_x_axis"]["num_format"]=xaxisformat
        - 	end
        0 	if length(yaxisformat)>0
        0 		chartDict["set_y_axis"]["num_format"]=yaxisformat
        - 	end
     1152 	resChart=Chart(convert(String,sheetWhereChartIsLocated),chartDict,convert(String,uppercase(location)))
        0 	return resChart
        - end
        - 
        - 
        - function defineChartWithNSeries{T<:AbstractString}(sheetWhereChartIsLocated::T,dataSheet::T,location::T,charttype::T,firstdatarow::Int,rows::Int,headercols::Array{Int,1},headerrow1::Int,xaxisname::T,yaxisname::T,title::T;legendpos="top",categoriescol=1,xaxisformat="",yaxisformat="",xscale=3,yscale=1.5)
        - 	#http://xlsxwriter.readthedocs.org/en/latest/chart.html
      160 	chartDict=Dict{AbstractString,Dict{AbstractString,Any}}()
     1440 	chartDict["add_chart"]=Dict{Any,Any}("type"=>charttype)
        - 	datarow=firstdatarow
     1184 	categoriesref=string("=",dataSheet,"!\$",excelLetter(categoriescol),'$',datarow,":\$",excelLetter(categoriescol),'\$',datarow+rows-1)		
        - 
        0 	count=0
        0 	for ii in headercols
        0 		count+=1	
        - 		valuescol=ii;headercol=ii #line1
    29696 		chartDict[string("series",count)]=deepcopy(Dict{Any,Any}("name"=>string("=",dataSheet,"!\$",excelLetter(headercol),'$',headerrow1),"categories"=>categoriesref,
        - 				"values"=>string("=",dataSheet,"!\$",excelLetter(valuescol),'$',datarow,":\$",excelLetter(valuescol),'\$',datarow+rows-1)))
        - 	end
        - 	#options
     2688 	chartDict["set_x_axis"]=Dict{Any,Any}("name"=>xaxisname, "date_axis"=>false)
     2848 	chartDict["set_y_axis"]=Dict{Any,Any}("name"=>yaxisname,"major_gridlines"=>Dict{Any,Any}("visible"=>true))
     1440 	chartDict["set_legend"]=Dict{Any,Any}("position"=>legendpos)
     2784 	chartDict["set_size"]=Dict{Any,Any}("x_scale"=>xscale, "y_scale"=>yscale)
     1440 	chartDict["set_title"]=Dict{Any,Any}("name"=>title)
        0 	if length(xaxisformat)>0
        0 		chartDict["set_x_axis"]["num_format"]=xaxisformat
        - 	end
        0 	if length(yaxisformat)>0
        0 		chartDict["set_y_axis"]["num_format"]=yaxisformat
        - 	end
      576 	resChart=Chart(convert(String,sheetWhereChartIsLocated),chartDict,convert(String,uppercase(location)))
        0 	return resChart
        - end
        - 
        - function defineChartWith2Series{T<:AbstractString}(sheetWhereChartIsLocated::T,dataSheet::T,location::T,charttype::T,rows::Int,headercol1::Int,headercol2::Int,headerrow1::Int)
        - 	#http://xlsxwriter.readthedocs.org/en/latest/chart.html
     1840 	chartDict=Dict{AbstractString,Dict{AbstractString,Any}}()
     3600 	chartDict["add_chart"]=Dict{Any,Any}("type"=>charttype)
        - 	categoriescol=1
        0 	datarow=headerrow1+1
        - 	
     2960 	categoriesref=string("=",dataSheet,"!\$",excelLetter(categoriescol),'$',datarow,":\$",excelLetter(categoriescol),'\$',datarow+rows-1)	
        - 	
        - 	#line1
        0 	valuescol=headercol1
        0 	headercol=headercol1
     2240 		nameref=string("=",dataSheet,"!\$",excelLetter(headercol),'$',headerrow1)
     2960 		valueref=string("=",dataSheet,"!\$",excelLetter(valuescol),'$',datarow,":\$",excelLetter(valuescol),'\$',datarow+rows-1)		
     3520 		series=Dict{Any,Any}("name"=>nameref,"categories"=>categoriesref,"values"=>valueref)
     8400 		chartDict["series1"]=deepcopy(series)
        - 	#line2
        0 		headercol=headercol2
        0 		valuescol=headercol2
     2240 		nameref=string("=",dataSheet,"!\$",excelLetter(headercol),'$',headerrow1)
     2960 		valueref=string("=",dataSheet,"!\$",excelLetter(valuescol),'$',datarow,":\$",excelLetter(valuescol),'\$',datarow+rows-1)		
     3520 		series=Dict{Any,Any}("name"=>nameref,"categories"=>categoriesref,"values"=>valueref)
     8400 		chartDict["series2"]=deepcopy(series)
        - 	#options
     6720 	chartDict["set_x_axis"]=Dict{Any,Any}("name"=>"Iteration", "date_axis"=>false)
     4000 	chartDict["set_y_axis"]=Dict{Any,Any}("major_gridlines"=>Dict{Any,Any}("visible"=>true))
     3600 	chartDict["set_legend"]=Dict{Any,Any}("position"=>"top")
     6960 	chartDict["set_size"]=Dict{Any,Any}("x_scale"=>3, "y_scale"=>1.5)
        - 
     1440 	resChart=Chart(convert(String,sheetWhereChartIsLocated),chartDict,convert(String,uppercase(location)))
        0 	return resChart
        - end
        - 
        - 
        - function add_iteration_charts!(xlData::ExcelData,settings::ModelSettings,startrow)
        - 	chartRowStep=22
        - 	
        0 	currentChartRow=startrow
        0 	thischart=defineChartWith2Series("Overview","ModelStatistics",string("A",currentChartRow),"line",settings.niter,2,5,1)
     9136 	push!(xlData.charts,deepcopy(thischart))
        0 	currentChartRow+=chartRowStep
        0 	thischart=defineChartWith2Series("Overview","ModelStatistics",string("A",currentChartRow),"line",settings.niter,6,7,1)
     9136 	push!(xlData.charts,deepcopy(thischart))
        0 	currentChartRow+=chartRowStep
        0 	thischart=defineChartWith2Series("Overview","ModelStatistics",string("A",currentChartRow),"line",settings.niter,3,4,1)
     9136 	push!(xlData.charts,deepcopy(thischart))
        0 	currentChartRow+=chartRowStep
        0 	thischart=defineChartWith2Series("Overview","ModelStatistics",string("A",currentChartRow),"column",settings.niter,8,9,1)
     9136 	push!(xlData.charts,deepcopy(thischart))
        0 	currentChartRow+=chartRowStep
      400 	thischart=defineChartWithNSeries("Overview","ModelStatistics",string("A",currentChartRow),"line",2,settings.niter,Int[14,15,18,19],1,"Iteration","","")		
    14192 	push!(xlData.charts,deepcopy(thischart))
        0 	currentChartRow+=chartRowStep
      400 	thischart=defineChartWithNSeries("Overview","ModelStatistics",string("A",currentChartRow),"line",2,settings.niter,Int[12,13,16,17],1,"Iteration","","")		
    14192 	push!(xlData.charts,deepcopy(thischart))
        0 	currentChartRow+=chartRowStep
        0 	thischart=defineChartWith2Series("Overview","ModelStatistics",string("A",currentChartRow),"line",settings.niter,20,21,1)
     9136 	push!(xlData.charts,deepcopy(thischart))
        0 return nothing
        - end
        - 
