function _precompile_()
    ccall(:jl_generating_output, Cint, ()) == 1 || return nothing
    precompile(Tuple{typeof(CSV.scale), Int64, Int64, Int64, Int64, Int64})
    precompile(Tuple{typeof(CSV.readline), Base.GenericIOBuffer{Array{UInt8, 1}}, UInt8, UInt8, Base.GenericIOBuffer{Array{UInt8, 1}}})
    precompile(Tuple{typeof(CSV.parsefield), Base.GenericIOBuffer{Array{UInt8, 1}}, Type{Int64}, CSV.Options{Nothing}, Int64, Int64, Base.RefValue{CSV.ParsingState}, getfield(CSV, Symbol("##4#5"))})
    precompile(Tuple{typeof(CSV.readsplitline!), Array{CSV.RawField, 1}, Base.GenericIOBuffer{Array{UInt8, 1}}, UInt8, UInt8, UInt8, Base.GenericIOBuffer{Array{UInt8, 1}}})
    precompile(Tuple{typeof(CSV.parsefield), Base.GenericIOBuffer{Array{UInt8, 1}}, Type{Float64}, CSV.Options{Nothing}, Int64, Int64, Base.RefValue{CSV.ParsingState}, getfield(CSV, Symbol("##4#5"))})
    precompile(Tuple{getfield(CSV, Symbol("##Source#22")), String, CSV.Options{Nothing}, Int64, Int64, Array{DataType, 1}, Symbol, Nothing, Bool, Nothing, Symbol, Int64, Int64, Int64, Bool, Type{Int}})
    precompile(Tuple{getfield(CSV, Symbol("##Source#21")), UInt8, UInt8, UInt8, String, Nothing, Int64, Int64, Array{DataType, 1}, Symbol, Nothing, Nothing, UInt8, String, String, Bool, Nothing, Symbol, Int64, Int64, Int64, Bool, Type{Int}, String})
    precompile(Tuple{typeof(CSV.countlines), Base.GenericIOBuffer{Array{UInt8, 1}}, UInt8, UInt8})
    precompile(Tuple{getfield(CSV, Symbol("##Options#1")), UInt8, UInt8, UInt8, String, Nothing, Nothing, UInt8, String, String, Bool, Int64, Int64, Int64, Array{Type{T} where T, 1}, Type{Int}})
    precompile(Tuple{typeof(CSV.parsefield), Base.GenericIOBuffer{Array{UInt8, 1}}, Type{String}, CSV.Options{Nothing}, Int64, Int64, Base.RefValue{CSV.ParsingState}, getfield(CSV, Symbol("##4#5"))})
    precompile(Tuple{getfield(CSV, Symbol("#kw##read")), NamedTuple{(:allowmissing, :types, :categorical, :rows_for_type_detect), Tuple{Symbol, Array{DataType, 1}, Bool, Int64}}, typeof(CSV.read), String})
    precompile(Tuple{getfield(CSV, Symbol("##read#39")), Bool, Base.Dict{Int64, Function}, Bool, (Base.Iterators).Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:allowmissing, :types, :categorical, :rows_for_type_detect), Tuple{Symbol, Array{DataType, 1}, Bool, Int64}}}, typeof(identity), String, Type{Int}})
    precompile(Tuple{typeof(CSV.skipto!), Base.GenericIOBuffer{Array{UInt8, 1}}, Int64, Int64, UInt8, UInt8})
    precompile(Tuple{typeof(CSV.readsplitline!), Array{CSV.RawField, 1}, Base.GenericIOBuffer{Array{UInt8, 1}}, UInt8, UInt8, UInt8})
end
