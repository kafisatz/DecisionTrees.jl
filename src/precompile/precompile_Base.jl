function _precompile_()
    ccall(:jl_generating_output, Cint, ()) == 1 || return nothing
    precompile(Tuple{typeof(Base.collect_to!), Array{String, 2}, Base.Generator{Array{String, 2}, getfield(DecisionTrees, Symbol("##20#22"))}, Int64, Int64})
    precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 1}, Tuple{Array{Int64, 1}}})
    precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
    precompile(Tuple{typeof(Base.mapfoldl_impl), getfield(Base, Symbol("##99#101")), typeof(Base.add_sum), Int64, Tuple{Array{Any, 2}, Array{String, 2}}, Int64})
    precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Tuple{Int64}})
    precompile(Tuple{typeof(Base.rehash!), Base.Dict{DataType, Base.WeakKeyDict{K, V} where V where K}, Int64})
    precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(/)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
    precompile(Tuple{typeof(Base.setproperty!), Base.Iterators.Stateful{String, Union{Nothing, Tuple{Char, Int64}}}, Symbol, Nothing})
    precompile(Tuple{typeof(Base.collect_to!), Array{Float64, 1}, Base.Generator{Array{DecisionTrees.TreeWithErrorStats, 1}, getfield(DecisionTrees, Symbol("##23#24")){String}}, Int64, Int64})
    precompile(Tuple{typeof(Base.mapfoldl_impl), getfield(Base, Symbol("##99#101")), typeof(Base.add_sum), Int64, Tuple{Array{Any, 2}, Array{Any, 2}, Array{Any, 2}}, Int64})
    precompile(Tuple{typeof(Base.show_list), Base.TTY, Array{Any, 1}, String, Int64, Int64, Bool})
    precompile(Tuple{typeof(Base.show_enclosed_list), Base.IOContext{Base.TTY}, Char, Array{Any, 1}, String, Char, Int64, Int64, Bool})
    precompile(Tuple{typeof(Base.show_enclosed_list), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Char, Array{Any, 1}, String, Char, Int64, Int64, Bool})
    precompile(Tuple{typeof(Base.getindex), Array{DecisionTrees.Rulepath{T} where T<:Unsigned, 1}, Int64})
    precompile(Tuple{typeof(Base.escape_string), Base.GenericIOBuffer{Array{UInt8, 1}}, String, String})
    precompile(Tuple{typeof(Base.gc_enable), Bool})
    precompile(Tuple{typeof(Base.mapfoldl_impl), getfield(Base, Symbol("##99#101")), typeof(Base.add_sum), Int64, Tuple{Array{String, 2}, Array{Float64, 2}}, Int64})
    precompile(Tuple{typeof(Base.throw_boundserror), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Int64}})
    precompile(Tuple{typeof(Base.hash), Array{Float64, 1}, UInt64})
    precompile(Tuple{typeof(Base.hash), DecisionTrees.PooledArraysDTM.PooledArray{Float64, UInt8, 1, Array{UInt8, 1}}, UInt64})
    precompile(Tuple{typeof(Base.fill!), Array{Int64, 2}, Int64})
    precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{Any, 2}, Array{Any, 1}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
    precompile(Tuple{typeof(Base.show_unquoted), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Expr, Int64, Int64})
    precompile(Tuple{typeof(Base.mapfoldl_impl), getfield(Base, Symbol("##99#101")), typeof(Base.add_sum), Int64, Tuple{Array{String, 2}, Array{Any, 2}, Array{String, 2}}, Int64})
    precompile(Tuple{typeof(Base.throw_boundserror), Array{String, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
    precompile(Tuple{typeof(Base.promote_shape), Array{Float64, 1}, Array{Int64, 1}})
    precompile(Tuple{typeof(Base.collect_to!), Array{Expr, 1}, Base.Generator{Array{Any, 1}, getfield(DataStreams.Data, Symbol("##76#92"))}, Int64, Int64})
    precompile(Tuple{typeof(Base.deepcopy), Array{Int64, 1}})
    precompile(Tuple{typeof(Base.show_unquoted_quote_expr), Base.IOContext{Base.TTY}, Symbol, Int64, Int64})
    precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.success), typeof(Base.:(&)), Array{Base.Process, 1}, Int64, Int64, Int64})
    precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(-)), Tuple{Float64, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(/)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Int64}}, Base.RefValue{Base.Val{2}}}}}}, Tuple{Int64}})
    precompile(Tuple{typeof(Base.stale_cachefile), String, String})
    precompile(Tuple{typeof(Base.implicit_manifest_uuid_path), String, Base.PkgId})
    precompile(Tuple{typeof(Base.hash), Array{Int64, 1}, UInt64})
    precompile(Tuple{typeof(Base.manifest_file_name_uuid), String, String, Base.IOStream})
    precompile(Tuple{typeof(Base.rehash!), Base.Dict{Ptr{PyCall.PyObject_struct}, Any}, Int64})
    precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Any, Int64}, Symbol})
    precompile(Tuple{typeof(Base.rehash!), Base.Dict{Any, Int64}, Int64})
    
    precompile(Tuple{typeof(Base.collect_to!), Array{Float64, 1}, Base.Generator{Array{Float64, 1}, getfield(DecisionTrees, Symbol("##92#93")){Float64}}, Int64, Int64})
    precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.success), typeof(Base.:(&)), Array{Base.Process, 1}, Int64, Int64, Int64})
    precompile(Tuple{typeof(Base.reduced_indices), Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, Int64, Base.OneTo{Int64}})
    precompile(Tuple{typeof(Base.show_generator), Base.IOContext{Base.TTY}, Expr, Int64})
    precompile(Tuple{typeof(Base.show_generator), Base.TTY, Expr, Int64})
    precompile(Tuple{typeof(Base.throw_checksize_error), Array{UInt8, 1}, Tuple{Base.OneTo{UInt64}}})
    precompile(Tuple{typeof(Base.rehash!), Base.Dict{Float64, UInt16}, Int64})
    precompile(Tuple{typeof(Base.show_generator), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Expr, Int64})
    precompile(Tuple{typeof(Base.rehash!), Base.Dict{String, UInt8}, Int64})
    precompile(Tuple{typeof(Base.rehash!), Base.Dict{Float64, UInt8}, Int64})
    precompile(Tuple{typeof(Base.hash), DecisionTrees.PooledArraysDTM.PooledArray{String, UInt8, 1, Array{UInt8, 1}}, UInt64})
    precompile(Tuple{typeof(Base._any), getfield(Base, Symbol("##182#183")){String}, Array{String, 2}, Base.Colon})
    precompile(Tuple{getfield(Base.Sort, Symbol("##sort#8")), (Base.Iterators).Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(identity), Array{UInt8, 1}})
    precompile(Tuple{typeof(Base._jl_spawn), String, Array{String, 1}, Base.Cmd, Tuple{Base.DevNullStream, Base.PipeEndpoint, Base.TTY}})
    precompile(Tuple{typeof(Base.copyto!), Array{Any, 2}, Int64, Array{String, 2}, Int64, Int64})
    precompile(Tuple{typeof(Base.rehash!), Base.Dict{UInt8, Nothing}, Int64})
    precompile(Tuple{typeof(Base.cache_file_entry), Base.PkgId})
    precompile(Tuple{typeof(Base.rehash!), Base.Dict{Any, Nothing}, Int64})
    precompile(Tuple{typeof(Base.show_list), Base.IOContext{Base.TTY}, Array{Any, 1}, String, Int64, Int64, Bool})
    precompile(Tuple{typeof(Base.unpreserve_handle), Base.Process})
    precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, Int64}, Int64})
    precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
    precompile(Tuple{typeof(Base.floatrange), Type{Float64}, Int64, Int64, Int64, Int64})
    precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Int64, 1}, Char, String, String, Bool, Int64, Int64})
    precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Array{Symbol, 1}, getfield(DataFrames, Symbol("##12#13")){DataFrames.Index}}, Int64, Int64})
    precompile(Tuple{typeof(Base._jl_spawn), String, Array{String, 1}, Base.Cmd, Tuple{Base.DevNullStream, Base.DevNullStream, Base.DevNullStream}})
    precompile(Tuple{typeof(Base.rehash!), Base.Dict{Float64, Nothing}, Int64})
    precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, Array{String, 1}}, Int64})
    precompile(Tuple{getfield(Base, Symbol("##sprint#336")), Nothing, Int64, typeof(identity), typeof(identity), String, String})
    
    
    
    precompile(Tuple{typeof(Base.filter!), getfield(Base, Symbol("##41#42")), Array{Any, 1}})
    precompile(Tuple{typeof(Base.rehash!), Base.Dict{AbstractString, Base.Dict{AbstractString, Any}}, Int64})
    precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
    precompile(Tuple{typeof(Base.show), Base.IOContext{Base.TTY}, Module})
    precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Any, Any}, Int64})
    precompile(Tuple{typeof(Base.tic)})
    
    precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{Any, 2}, Array{String, 1}, Base.Slice{Base.OneTo{Int64}}, Base.UnitRange{Int64}})
    precompile(Tuple{typeof(Base._sortedfindin), Array{Int64, 1}, Int64})
    precompile(Tuple{typeof(Base.arg_gen), Array{String, 1}})
    precompile(Tuple{typeof(Base.register_root_module), Module})
    precompile(Tuple{typeof(Base.Filesystem.joinpath), String, String})
    precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Module})
    precompile(Tuple{typeof(Base.rehash!), Base.Dict{AbstractString, Any}, Int64})
    precompile(Tuple{typeof(Base.fullname), Module})
    precompile(Tuple{typeof(Base.print), Base.TTY, String, String, Int})
    precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.success), typeof(Base.:(&)), Array{Base.Process, 1}, Int64, Int64, Int64})
    precompile(Tuple{typeof(Base.hcat), String, String})
    precompile(Tuple{typeof(Base.escape_string), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, String})
    precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Float64, 1}, Char, String, String, Bool, Int64, Int64})
    precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Symbol, 1}, Char, String, String, Bool, Int64, Int64})
    precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.abs), Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
    precompile(Tuple{typeof(Base.show), Base.IOContext{Base.TTY}, Core.MethodInstance})
    precompile(Tuple{typeof(Base.check_reducedims), Array{Int64, 2}, Array{Int64, 2}})
    precompile(Tuple{typeof(Base.vect), DecisionTrees.Leaf})
    precompile(Tuple{typeof(Base.rehash!), Base.Dict{AbstractString, Array{Any, 1}}, Int64})
    precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Base.Cartesian, Symbol("##1#2")){Expr}}})
    precompile(Tuple{typeof(Base.rehash!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Int64})
    precompile(Tuple{typeof(Base.promote_shape), Array{Float64, 1}, Array{Float64, 1}})
    precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Any, 2}, Base.Slice{Base.OneTo{Int64}}, Base.UnitRange{Int64}})
    precompile(Tuple{typeof(Base.show_list), Base.IOContext{Base.TTY}, Array{Any, 1}, Char, Int64, Int64, Bool})
    precompile(Tuple{typeof(Base.show_type_name), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Core.TypeName})
    precompile(Tuple{typeof(Base.manifest_file_name_uuid), String, String, Base.IOStream})
    precompile(Tuple{typeof(Base.replace), Base.SubString{String}, Char, String})
    precompile(Tuple{typeof(Base.show_list), Base.TTY, Array{Any, 1}, Char, Int64, Int64, Bool})
    precompile(Tuple{typeof(Base.typejoin), Int, Int})
    precompile(Tuple{typeof(Base.show_list), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Any, 1}, String, Int64, Int64, Bool})
    precompile(Tuple{typeof(Base.show_block), Base.TTY, String, Array{Any, 1}, Expr, Int64})
    precompile(Tuple{typeof(Base.rehash!), Base.Dict{Any, Any}, Int64})
    precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Char, String, Int})
    precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Extruded{Base.BitArray{1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
    precompile(Tuple{typeof(Base.throw_boundserror), Array{UInt8, 1}, Tuple{Array{Int64, 1}}})
    precompile(Tuple{typeof(Base.union!), Base.Set{Symbol}, Array{Symbol, 1}})
    precompile(Tuple{typeof(Base.open), Base.Cmd, String, Base.TTY})
    precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{String}, Tuple{Base.SubString{String}, String}, Tuple{Base.SubString{String}, String}, Tuple{Base.SubString{String}, String}, Tuple{Base.SubString{String}, String}}})
    precompile(Tuple{typeof(Base.show_list), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Any, 1}, Char, Int64, Int64, Bool})
    precompile(Tuple{typeof(Base.getindex), Array{Base.WeakKeyDict{K, V} where V where K, 1}, Int64})
    precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Tuple{Int64}})
    precompile(Tuple{typeof(Base.throw_boundserror), Array{Int64, 1}, Tuple{Array{Int64, 1}}})
    precompile(Tuple{typeof(Base.splitprec), Type{Float64}, Int128})
    precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{Test.Error, 1}, Int64, Int64})
    precompile(Tuple{typeof(Base._linspace1), Type{Float64}, Float64, Float64, Int64})
    precompile(Tuple{typeof(Base._linspace), Float64, Float64, Int64})
    precompile(Tuple{typeof(Base.throw_boundserror), Array{String, 2}, Tuple{Array{Int64, 1}, Base.Slice{Base.OneTo{Int64}}}})
    precompile(Tuple{typeof(Base.mapfoldl_impl), getfield(Base, Symbol("##99#101")), typeof(Base.add_sum), Int64, Tuple{Array{String, 2}, Array{Float64, 2}, Array{String, 2}}, Int64})
    precompile(Tuple{typeof(Base.unsafe_copyto!), Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}, Int64, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}, Int64, Int64})
    precompile(Tuple{typeof(Base.show_call), Base.TTY, Symbol, Symbol, Array{Any, 1}, Int64})
    precompile(Tuple{typeof(Base.Filesystem.isdirpath), String})
    precompile(Tuple{typeof(Base._sortedfindin), Array{Int64, 1}, Array{Int64, 1}})
    precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{String, String}, 1}, Base.Generator{Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:engine,), Tuple{String}}}, getfield(PyCall, Symbol("##83#84"))}, Int64, Int64})
    precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Array{UInt8, 1}, getfield(DecisionTrees, Symbol("##31#32"))}, Int64, Int64})
    precompile(Tuple{typeof(Base.copyto!), Base.BitArray{1}, Base.BitArray{1}})
    precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Array{Any, 1}})
    precompile(Tuple{typeof(Base.unsafe_copyto!), Array{Float64, 2}, Int64, Array{Float64, 1}, Int64, Int64})
    precompile(Tuple{typeof(Base.Cartesian.lreplace!), String, Base.Cartesian.LReplace{String}})
    precompile(Tuple{typeof(Base.open), Base.Cmd, String, Base.TTY})
    precompile(Tuple{typeof(Base.__cat), Array{String, 2}, Tuple{Int64, Int64}, Tuple{Bool, Bool}, String, Int})
    precompile(Tuple{typeof(Base.open), Base.Cmd, String, Base.DevNullStream})
    precompile(Tuple{typeof(Base.Cartesian.exprresolve_arith), Expr})
    precompile(Tuple{typeof(Base.typed_vcat), Type{UInt8}, Base.UnitRange{Int64}})
    precompile(Tuple{typeof(Base.Broadcast.broadcast), typeof(Base.:(-)), Array{Float64, 1}, Array{Float64, 1}})
    precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(/)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Float64}}, Tuple{Int64}})
    precompile(Tuple{typeof(Base.extrema), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
    precompile(Tuple{typeof(Base.show_unquoted), Base.IOContext{Base.TTY}, Expr, Int64, Int64})
    precompile(Tuple{typeof(Base.print), Base.IOContext{Base.TTY}, Symbol, Char})
    precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Array{UInt8, 1}, getfield(DecisionTrees, Symbol("##138#139"))}, Int64, Int64})
    precompile(Tuple{typeof(Base.:(==)), WeakRef, Nothing})
    precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
    precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Any, 1}, Char, String, String, Bool, Int64, Int64})
    precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(!)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.isvalid), Tuple{Base.Broadcast.Extruded{Array{String, 1}, Tuple{Bool}, Tuple{Int64}}}}}}, Tuple{Int64}})
    precompile(Tuple{typeof(Base.print), Base.TTY, Symbol, Char})
    precompile(Tuple{typeof(Base.ntuple), getfield(Base, Symbol("##9#10")){DataType}, Int64})
    precompile(Tuple{typeof(Base.show_call), Base.TTY, Symbol, Expr, Array{Any, 1}, Int64})
    precompile(Tuple{typeof(Base.:(&)), PyCall.PyObject, PyCall.PyObject})
    precompile(Tuple{typeof(Base.setindex_shape_check), Array{Float64, 2}, Int64, Int64})
    precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Float64, 2}, Base.Slice{Base.OneTo{Int64}}, Int64})
    precompile(Tuple{typeof(Base.package_slug), Base.UUID, Int64})
    precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Any, 1}, Char, Char, Char, Bool, Int64, Int64})
    precompile(Tuple{typeof(Base.iterate), DataFrames.SubDataFrame{Array{Int64, 1}}})
    precompile(Tuple{getfield(Base, Symbol("##with_output_color#680")), Bool, typeof(identity), typeof(identity), Symbol, Base.TTY, String, String})
    precompile(Tuple{typeof(Base.:(/)), Base.TwicePrecision{Float64}, Int64})
    precompile(Tuple{typeof(Base.show_unquoted), Base.TTY, Expr, Int64, Int64})
    precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, getfield(DataFrames, Symbol("##48#50"))}})
    precompile(Tuple{typeof(Base.nbitslen), Type{Float64}, Int64, Int64})
    precompile(Tuple{typeof(Base.copyto!), Array{Any, 2}, Int64, Array{Any, 1}, Int64, Int64})
    precompile(Tuple{typeof(Base.:(>=)), PyCall.PyObject, PyCall.PyObject})
    precompile(Tuple{typeof(Base.unalias), Array{Float64, 1}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}})
    precompile(Tuple{typeof(Base.rstrip), String, Array{Char, 1}})
    precompile(Tuple{typeof(Base.:(^)), PyCall.PyObject, PyCall.PyObject})
    precompile(Tuple{typeof(Base.unsafe_write), Base.TTY, Base.RefValue{UInt8}, Int64})
    precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(<)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Tuple{Int64}})
    precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, String, String})
    precompile(Tuple{getfield(Base, Symbol("##with_output_color#680")), Bool, typeof(identity), typeof(identity), Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.SubString{String}})
    precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(<=)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Tuple{Int64}})
    precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.round), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(/)), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}}}}}, Tuple{Int64}})
    precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(==)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Tuple{Int64}})
    precompile(Tuple{typeof(Base.show_list), Base.IOContext{Base.TTY}, Array{Any, 1}, Symbol, Int64, Int64, Bool})
    precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{Base.SubString{String}, 1}, Int64, Int64})
    precompile(Tuple{typeof(Base.filter!), getfield(Base, Symbol("##788#789")), Array{Base.StackTraces.StackFrame, 1}})
    precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(|)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(>)), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Base.Broadcast.Extruded{Array{Bool, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
    precompile(Tuple{typeof(Base._collect), Array{String, 1}, Base.Generator{Array{String, 1}, getfield(Base, Symbol("##487#490"))}, Base.EltypeUnknown, Base.HasShape{1}})
    precompile(Tuple{typeof(Base.unsafe_copyto!), Array{String, 2}, Int64, Array{String, 2}, Int64, Int64})
    precompile(Tuple{typeof(Base.Sort.sortperm_int_range), Array{Int64, 1}, Int64, Int64})
    precompile(Tuple{typeof(Base.collect_to!), Array{UInt8, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(DecisionTrees, Symbol("##74#76")){Array{Int64, 1}}}, Int64, Int64})
    precompile(Tuple{getfield(Base, Symbol("##with_output_color#680")), Bool, typeof(identity), typeof(identity), Symbol, Base.IOContext{Base.TTY}})
    precompile(Tuple{typeof(Base.hidigit), Float64, Int64})
    precompile(Tuple{getfield(Base, Symbol("##with_output_color#680")), Bool, typeof(identity), typeof(identity), Symbol, Base.TTY, Symbol, Int})
    precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, Type{Symbol}, Tuple{Base.Broadcast.Extruded{Array{String, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
    precompile(Tuple{typeof(Base.:(==)), WeakRef, Base.UUID})
    precompile(Tuple{typeof(Base.Broadcast.broadcast), typeof(Base.:(/)), Array{Int64, 1}, Int64})
    precompile(Tuple{typeof(Base.throw_boundserror), Base.BitArray{2}, Tuple{Base.UnitRange{Int64}}})
    precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Any, Int64}, Symbol})
    precompile(Tuple{typeof(Base.__cat), Array{Any, 1}, Tuple{Int64}, Tuple{Bool}, Array{Int64, 1}, Int})
    precompile(Tuple{typeof(Base.uv_write_async), Base.TTY, Ptr{UInt8}, UInt64})
    precompile(Tuple{typeof(Base.Filesystem.unlink), String})
    precompile(Tuple{typeof(Base.wait_readnb), Base.PipeEndpoint, Int64})
    precompile(Tuple{typeof(Base.Sort.partition!), Array{Int64, 1}, Int64, Int64, Base.Order.Perm{Base.Order.By{getfield(DataStreams.Data, Symbol("##72#88"))}, Array{Any, 1}}})
    precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{Any, 2}, Array{String, 2}, Base.Slice{Base.OneTo{Int64}}, Base.UnitRange{Int64}})
    precompile(Tuple{getfield(Base, Symbol("##with_output_color#680")), Bool, typeof(identity), typeof(identity), Symbol, Base.IOContext{Base.TTY}, String})
    precompile(Tuple{typeof(Base.getindex), Array{Any, 2}, Int64})
    precompile(Tuple{typeof(Base.show_list), Base.TTY, Array{Any, 1}, Symbol, Int64, Int64, Bool})
    precompile(Tuple{typeof(Base._mean), Array{Float64, 1}, Base.Colon})
    
    precompile(Tuple{typeof(Base.iterate), Nothing})
    precompile(Tuple{typeof(Base.typed_hcat), Type{Any}, Array{String, 1}, Array{Int64, 1}, Array{Float64, 1}})
    precompile(Tuple{typeof(Base.show_type_name), Base.GenericIOBuffer{Array{UInt8, 1}}, Core.TypeName})
    precompile(Tuple{typeof(Base.throw_checksize_error), Array{String, 2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
    precompile(Tuple{typeof(Base.setindex_shape_check), Array{Any, 2}, Int64, Int64})
    precompile(Tuple{typeof(Base.uv_write_async), Base.PipeEndpoint, Ptr{UInt8}, UInt64})
    precompile(Tuple{typeof(Base.Printf.print_fixed), Base.TTY, Int64, Int32, Int32, Bool})
    precompile(Tuple{typeof(Base.vect), DecisionTrees.Splitdef{UInt8}})
    precompile(Tuple{typeof(Base.typeinfo_prefix), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Any, 1}})
    precompile(Tuple{typeof(Base._collect), Array{Char, 1}, Base.Generator{Array{Char, 1}, Type{UInt8}}, Base.EltypeUnknown, Base.HasShape{1}})
    precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Int64, 1}, String, String, Char, Bool, Int64, Int64})
    precompile(Tuple{typeof(Base.show_type_name), Base.GenericIOBuffer{Array{UInt8, 1}}, Core.TypeName})
    precompile(Tuple{typeof(Base.setindex_shape_check), Array{Any, 1}, Int64, Int64})
    precompile(Tuple{typeof(Base.Filesystem.tempdir)})
    precompile(Tuple{typeof(Base.sync_end), Array{Any, 1}})
    precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Array{UInt8, 1}, getfield(DecisionTrees, Symbol("##41#42"))}, Int64, Int64})
    precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Any, 1}, String, String, Char, Bool, Int64, Int64})
    precompile(Tuple{typeof(Base.isequal), PyCall.PyObject, String})
    precompile(Tuple{getfield(Base, Symbol("##with_output_color#680")), Bool, typeof(identity), typeof(identity), Symbol, Base.TTY, String})
    precompile(Tuple{typeof(Base.show_tuple_as_call), Base.IOContext{Base.TTY}, Symbol, Type{Int}})
    precompile(Tuple{typeof(Base.collect_to!), Array{String, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(DecisionTrees, Symbol("##131#132"))}, Int64, Int64})
    precompile(Tuple{typeof(Base.throw_boundserror), Array{AbstractString, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
    precompile(Tuple{typeof(Base.print), Base.TTY, Char, String})
    precompile(Tuple{typeof(Base.show_list), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Any, 1}, Symbol, Int64, Int64, Bool})
    precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{String, 1}, String, String, Char, Bool, Int64, Int64})
    precompile(Tuple{typeof(Base.unsafe_copyto!), Array{UInt128, 1}, Int64, Array{UInt128, 1}, Int64, Int64})
    precompile(Tuple{typeof(Base._mapreduce), typeof(Base.identity), typeof(Base.min), Base.IndexLinear, Array{Float64, 1}})
    precompile(Tuple{typeof(Base.parse_cache_header), String})
    precompile(Tuple{typeof(Base.unsafe_copyto!), Array{Any, 2}, Int64, Array{Any, 2}, Int64, Int64})
    precompile(Tuple{typeof(Base.getindex), Tuple{Symbol}, Base.UnitRange{Int64}})
    precompile(Tuple{typeof(Base._tryrequire_from_serialized), Base.PkgId, UInt64, Nothing})
    precompile(Tuple{typeof(Base._include_dependency), Module, String})
    precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{String, 2}, Array{String, 2}, Base.Slice{Base.OneTo{Int64}}, Base.UnitRange{Int64}})
    precompile(Tuple{typeof(Base.task_done_hook), Task})
    precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Int64, 1}, Char, String, Char, Bool, Int64, Int64})
    precompile(Tuple{typeof(Base.unique), Array{Int64, 1}})
    precompile(Tuple{typeof(Base.copyto!), Array{Float64, 2}, Int64, Array{Int64, 1}, Int64, Int64})
    precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Any, 1}, Char, String, Char, Bool, Int64, Int64})
    precompile(Tuple{typeof(Base.hash), PyCall.PyObject})
    precompile(Tuple{typeof(Base.map), typeof(Base.Unicode.lowercase), Base.SubString{String}})
    precompile(Tuple{typeof(Base.task_done_hook), Task})
    precompile(Tuple{typeof(Base.Sort.sort_int_range!), Array{UInt8, 1}, UInt8, UInt8})
    precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{AbstractString, Base.Dict{AbstractString, Any}}, String})
    precompile(Tuple{typeof(Base.filter!), getfield(Base, Symbol("##58#59")){typeof(Base.isempty)}, Array{Base.SubString{String}, 1}})
    precompile(Tuple{typeof(Base.sync_end), Array{Any, 1}})
    precompile(Tuple{typeof(Base._require), Base.PkgId})
    precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Symbol, 1}, String, String, Char, Bool, Int64, Int64})
    precompile(Tuple{typeof(Base.show_unquoted_quote_expr), Base.TTY, Symbol, Int64, Int64})
    precompile(Tuple{typeof(Base.open), Base.CmdRedirect, String, Base.TTY})
    precompile(Tuple{typeof(Base.:(*)), PyCall.PyObject, PyCall.PyObject})
    precompile(Tuple{typeof(Base.setindex_shape_check), Array{Int64, 1}, Int64, Int64})
    precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{Float64, 2}, Array{Int64, 1}, Base.Slice{Base.OneTo{Int64}}, Base.UnitRange{Int64}})
    precompile(Tuple{typeof(Base.copyto!), Array{Array{Float64, 1}, 1}, Int64, Array{Array{Float64, 1}, 1}, Int64, Int64})
    precompile(Tuple{typeof(Base.mapfoldl_impl), getfield(Base, Symbol("##99#101")), typeof(Base.add_sum), Int64, Tuple{Array{String, 1}, Array{String, 2}}, Int64})
    precompile(Tuple{typeof(Base.show_tuple_as_call), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Symbol, Type{Int}})
    precompile(Tuple{getfield(Base, Symbol("##replace#334")), Int64, typeof(identity), String, Base.Pair{Base.Regex, String}})
    precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Type{T} where T, 1}, getfield(Dates, Symbol("##33#34"))}})
    precompile(Tuple{getfield(Base, Symbol("##with_output_color#680")), Bool, typeof(identity), typeof(identity), Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
    precompile(Tuple{typeof(Base.throw_boundserror), Array{Any, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
    precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{String}, Tuple{Base.SubString{String}}}})
    precompile(Tuple{typeof(Base.pipeline_error), Base.ProcessChain})
    precompile(Tuple{getfield(Base, Symbol("##with_output_color#680")), Bool, typeof(identity), typeof(identity), Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}})
    precompile(Tuple{typeof(Base.:(==)), Array{String, 1}, Array{String, 1}})
    precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Float64, 1}, String, String, Char, Bool, Int64, Int64})
    precompile(Tuple{typeof(Base.project_file_manifest_path), String})
    precompile(Tuple{typeof(Base.typed_hcat), Type{Any}, Array{Any, 1}, Array{String, 2}, Array{Any, 2}})
    precompile(Tuple{typeof(Base.show_backtrace), Base.TTY, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}})
    precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Array{UInt8, 1}, getfield(DecisionTrees, Symbol("##33#34"))}, Int64, Int64})
    precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{Any, 2}, Array{Any, 2}, Base.Slice{Base.OneTo{Int64}}, Base.UnitRange{Int64}})
    precompile(Tuple{typeof(Base.setindex_shape_check), Array{Float64, 1}, Int64, Int64})
    precompile(Tuple{typeof(Base.sort!), Array{Float64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.ForwardOrdering})
    precompile(Tuple{typeof(Base.convert), Type{String}, PyCall.PyObject})
    precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, Type{Symbol}, Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.Unicode.lowercase), Tuple{Base.Broadcast.Extruded{Array{Base.SubString{String}, 1}, Tuple{Bool}, Tuple{Int64}}}}}}, Tuple{Int64}})
    precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.add_sum), Array{Float64, 1}, Int64, Int64, Int64})
    precompile(Tuple{typeof(Base.explicit_manifest_uuid_path), String, Base.PkgId})
    precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{String, 1}, Char, String, Char, Bool, Int64, Int64})
    precompile(Tuple{typeof(Base.setindex_shape_check), Array{String, 2}, Int64, Int64})
    precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Float64, 1}, Char, String, Char, Bool, Int64, Int64})
    precompile(Tuple{typeof(Base.copyto!), Array{Any, 2}, Int64, Array{Int64, 1}, Int64, Int64})
    precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Symbol, 1}, Char, String, Char, Bool, Int64, Int64})
    precompile(Tuple{typeof(Base.mapfoldl_impl), getfield(Base, Symbol("##99#101")), typeof(Base.add_sum), Int64, Tuple{Array{Any, 2}, Array{Float64, 2}}, Int64})
    precompile(Tuple{getfield(Base, Symbol("##with_output_color#680")), Bool, typeof(identity), typeof(identity), Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, String})
    precompile(Tuple{typeof(Base.unique), Array{String, 1}})
    precompile(Tuple{typeof(Base.throw_boundserror), Array{DecisionTrees.Splitdef{UInt8}, 1}, Tuple{Array{Int64, 1}}})
    precompile(Tuple{typeof(Base.typed_hcat), Type{Float64}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}, Union{AbstractArray{T, 2}, AbstractArray{T, 1}} where T})
    precompile(Tuple{typeof(Base.vcat), Array{String, 1}, Array{String, 1}})
    precompile(Tuple{typeof(Base._any), getfield(Base, Symbol("##182#183")){String}, Array{String, 1}, Base.Colon})
    precompile(Tuple{typeof(Base.implicit_manifest_deps_get), String, Base.PkgId, String})
    precompile(Tuple{typeof(Base.sort!), Array{Any, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.By{getfield(DataStreams.Data, Symbol("##83#99"))}})
    precompile(Tuple{typeof(Base.copyto!), Array{Array{String, 1}, 1}, Int64, Array{Array{String, 1}, 1}, Int64, Int64})
    precompile(Tuple{typeof(Base.create_expr_cache), String, String, Array{Base.Pair{Base.PkgId, UInt64}, 1}, Base.UUID})
    precompile(Tuple{typeof(Base.deepcopy), DataFrames.DataFrame})
    precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Any, Nothing}, Base.SubString{String}})
    precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(/)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Tuple{Int64}})
    precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 1}, Tuple{Base.OneTo{Int64}}})
    precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{String, 2}, Base.Slice{Base.OneTo{Int64}}, Base.UnitRange{Int64}})
    precompile(Tuple{typeof(Base.throw_checksize_error), Array{UInt8, 1}, Tuple{Base.OneTo{Int64}}})
    precompile(Tuple{typeof(Base.typed_hcat), Type{Any}, Array{String, 1}, Array{Float64, 1}, Array{Float64, 1}, Union{AbstractArray{T, 2}, AbstractArray{T, 1}} where T})
    precompile(Tuple{typeof(Base.iterate), Base.EachLine, Nothing})
    precompile(Tuple{typeof(Base.unpreserve_handle), Base.PipeEndpoint})
    precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{Test.Fail, 1}, Int64, Int64})
    
    precompile(Tuple{typeof(Base.Filesystem.readdir), String})
    precompile(Tuple{typeof(Base.vcat), Array{Int64, 1}, Array{Int64, 1}})
    precompile(Tuple{typeof(Base.throw_checksize_error), Array{String, 1}, Tuple{Base.OneTo{Int64}}})
    precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Array{Int64, 1}, Int64})
    precompile(Tuple{typeof(Base.getindex), Tuple{Symbol, Symbol, Symbol}, Base.UnitRange{Int64}})
    precompile(Tuple{typeof(Base.copyto!), Array{Type{T} where T, 1}, Int64, Array{Type{T} where T, 1}, Int64, Int64})
    precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{String, 2}, Array{String, 1}, Base.Slice{Base.OneTo{Int64}}, Base.UnitRange{Int64}})
    precompile(Tuple{typeof(Base.next), PyCall.PyDict{PyCall.PyAny, PyCall.PyAny, true}, PyCall.PyDict_Iterator})
    precompile(Tuple{typeof(Base._append!), Array{Any, 1}, Base.HasShape{1}, Base.Generator{Base.Iterators.Enumerate{Array{Any, 1}}, getfield(DataStreams.Data, Symbol("##59#65")){Array{Any, 1}, Array{String, 1}}}})
    
    precompile(Tuple{typeof(Base.copyto!), Array{Array{T, 1} where T, 1}, Int64, Array{Array{Float64, 1}, 1}, Int64, Int64})
    precompile(Tuple{typeof(Base.print), Base.IOContext{Base.TTY}, Char, String})
    precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Base.LogicalIndex{Int64, Base.BitArray{1}}, getfield(Base, Symbol("##385#386"))}, Int64, Tuple{Int64, Int64}})
    
    precompile(Tuple{typeof(Base.StackTraces.lookup), Base.InterpreterIP})
    precompile(Tuple{typeof(Base.iterate), Base.EnvDict, Tuple{Ptr{UInt16}, Ptr{UInt16}}})
    precompile(Tuple{typeof(Base.copyto!), Array{Base.Pair{String, Bool}, 1}, Int64, Array{Base.Pair{String, Bool}, 1}, Int64, Int64})
    precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{Float64, 2}, Array{Float64, 1}, Base.Slice{Base.OneTo{Int64}}, Base.UnitRange{Int64}})
    precompile(Tuple{typeof(Base.copyto!), Array{Any, 2}, Int64, Array{String, 1}, Int64, Int64})
    precompile(Tuple{typeof(Base.show_delim_array), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{UInt64, UInt64}, Char, Char, Char, Bool, Int64, Int64})
    precompile(Tuple{typeof(Base.iterate), Base.Iterators.Filter{typeof(DataStreams.Data.selected), Core.SimpleVector}})
    precompile(Tuple{typeof(Base.map), typeof(Base.Unicode.lowercase), String})
    precompile(Tuple{typeof(Base.:(/)), Base.TwicePrecision{Float64}, Int128})
    precompile(Tuple{typeof(Base.Filesystem.joinpath), String, String})
    precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{String, Array{Symbol, 1}}, 1}, Base.Generator{Base.Iterators.Pairs{Symbol, Array{Symbol, 1}, Tuple{Symbol}, NamedTuple{(:columns,), Tuple{Array{Symbol, 1}}}}, getfield(PyCall, Symbol("##83#84"))}, Int64, Int64})
    precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.add_sum), Array{Int64, 2}, Int64, Int64, Int64})
    precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, Type{UInt8}, Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
    precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Int64, Function}, Int64})
    precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Any, Nothing}, Int64})
    precompile(Tuple{typeof(Base.mapfoldl_impl), getfield(Base, Symbol("##99#101")), typeof(Base.add_sum), Int64, Tuple{Array{Any, 2}, Array{Any, 2}}, Int64})
    precompile(Tuple{typeof(Base.unique), Array{Symbol, 1}})
    precompile(Tuple{typeof(Base.copyto!), Array{Array{Int64, 1}, 1}, Int64, Array{Array{Int64, 1}, 1}, Int64, Int64})
    precompile(Tuple{typeof(Base.Cartesian.poplinenum), Expr})
    precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{String}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{String, Base.SubString{String}, String}}})
    precompile(Tuple{typeof(Base.sourceinfo_slotnames), Core.CodeInfo})
    precompile(Tuple{typeof(Base.throw_boundserror), Array{UInt8, 1}, Tuple{Base.LogicalIndex{Int64, Base.BitArray{1}}}})
    precompile(Tuple{getfield(Base, Symbol("##process_backtrace#638")), Bool, typeof(identity), (getfield(Base, Symbol("##636#637"))){Array{Any, 1}}, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}, Int64})
    precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{String, 2}, Array{String, 1}, Base.UnitRange{Int64}, Base.Slice{Base.OneTo{Int64}}})
    precompile(Tuple{typeof(Base._append!), Array{PyCall.PyMemberDef, 1}, Base.HasLength, Tuple{PyCall.PyMemberDef, PyCall.PyMemberDef}})
    precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.string), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
    precompile(Tuple{typeof(Base.map), typeof(Base.Unicode.uppercase), String})
    precompile(Tuple{typeof(Base.push!), Array{Int64, 1}, Nothing})
    precompile(Tuple{typeof(Base._all), getfield(Base, Symbol("##226#228")), Base.Dict{Symbol, Int64}, Base.Colon})
    precompile(Tuple{typeof(Base._mapreduce), typeof(Base.identity), typeof(Base.max), Base.IndexLinear, Array{Float64, 1}})
    precompile(Tuple{typeof(Base._include_dependency), Module, String})
    precompile(Tuple{typeof(Base.copyto!), Array{Any, 2}, Int64, Array{Float64, 1}, Int64, Int64})
    precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}}})
    precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{Base.SubString{String}}, Tuple{Base.Cmd}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{String}}})
    precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Float64, 1}, Array{Int64, 1}})
    precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Symbol, Int64}, Symbol})
    precompile(Tuple{typeof(Base.vcat), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
    precompile(Tuple{typeof(Base.throw_boundserror), Array{Int64, 1}, Tuple{Base.LogicalIndex{Int64, Base.BitArray{1}}}})
    precompile(Tuple{typeof(Base.iterate), Base.StackTraces.StackFrame})
    precompile(Tuple{typeof(Base.Filesystem.splitdir), String})
    precompile(Tuple{typeof(Base._jl_spawn), String, Array{String, 1}, Base.Cmd, Tuple{Base.PipeEndpoint, Base.TTY, Base.TTY}})
    precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{AbstractString, Any}, Base.IdDict{Any, Any}})
    precompile(Tuple{typeof(Base.unsafe_copyto!), Array{NamedTuple{(:col,), Tuple{Int64}}, 1}, Int64, Array{NamedTuple{(:col,), Tuple{Int64}}, 1}, Int64, Int64})
    precompile(Tuple{typeof(Base.arg_gen), Base.SubString{String}})
    precompile(Tuple{typeof(Base.throw_checksize_error), Array{Any, 2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
    precompile(Tuple{typeof(Base.copyto!), Array{Char, 1}, String})
    precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{String, 2}, Array{String, 1}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
    precompile(Tuple{typeof(Base.collect_to!), Array{String, 2}, Base.Generator{Array{String, 2}, getfield(DecisionTrees, Symbol("##19#21"))}, Int64, Int64})
    precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.length), Tuple{Base.Broadcast.Extruded{Array{Array{T, 1} where T, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
    precompile(Tuple{typeof(Base.mapfoldl_impl), getfield(Base, Symbol("##99#101")), typeof(Base.add_sum), Int64, Tuple{Array{String, 2}, Array{Any, 2}}, Int64})
    precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{String, 2}, Array{String, 2}, Base.UnitRange{Int64}, Base.Slice{Base.OneTo{Int64}}})
    precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{UInt64, 1}, Base.IndexLinear, Array{UInt8, 1}})
    precompile(Tuple{typeof(Base.typed_hcat), Type{Any}, Array{String, 1}, Array{Int64, 1}, Array{Int64, 1}, Union{AbstractArray{T, 2}, AbstractArray{T, 1}} where T})
    precompile(Tuple{typeof(Base._append!), Array{DecisionTrees.Chart, 1}, Base.HasLength, Tuple{DecisionTrees.Chart, DecisionTrees.Chart, DecisionTrees.Chart, DecisionTrees.Chart, DecisionTrees.Chart, DecisionTrees.Chart, DecisionTrees.Chart, DecisionTrees.Chart, DecisionTrees.Chart, DecisionTrees.Chart, DecisionTrees.Chart, DecisionTrees.Chart, DecisionTrees.Chart, DecisionTrees.Chart, DecisionTrees.Chart, DecisionTrees.Chart, DecisionTrees.Chart, DecisionTrees.Chart}})
    precompile(Tuple{typeof(Base.convert), Type{String}, Symbol})
    precompile(Tuple{typeof(Base.copyto!), Array{Base.Pair{Int64, DataType}, 1}, Int64, Array{Base.Pair{Int64, DataType}, 1}, Int64, Int64})
    precompile(Tuple{typeof(Base.vect), Int64, Int64})
    precompile(Tuple{typeof(Base.unpreserve_handle), Base.TTY})
    precompile(Tuple{typeof(Base.Cartesian.exprresolve_conditional), Expr})
    precompile(Tuple{typeof(Base.ascii), String})
    precompile(Tuple{typeof(Base.throw_checksize_error), Array{Int64, 1}, Tuple{Base.OneTo{Int64}}})
    precompile(Tuple{typeof(Base.throw_boundserror), Base.SubArray{Float64, 1, Array{Float64, 2}, Tuple{Array{Int64, 1}, Int64}, false}, Tuple{Int64}})
    precompile(Tuple{getfield(Base, Symbol("##open#303")), Bool, Nothing, Nothing, Nothing, Bool, typeof(identity), String})
    precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Float64, 2}, Base.IndexLinear, Array{Any, 2}})
    precompile(Tuple{typeof(Base.throw_checksize_error), Array{Float64, 1}, Tuple{Base.OneTo{Int64}}})
    precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Tuple{DataType, DataType, DataType}, getfield(Dates, Symbol("##36#37"))}, Int64, Int64})
    precompile(Tuple{typeof(Base.throw_boundserror), Array{Int64, 1}, Tuple{Base.OneTo{Int64}}})
    precompile(Tuple{typeof(Base.show), Base.TTY, Test.Fail})
    precompile(Tuple{typeof(Base.Iterators.zip_iterate), Base.UnitRange{Int64}, Base.Generator{Array{Any, 1}, getfield(DataStreams.Data, Symbol("##80#96"))}, Tuple{}, Tuple{}})
    precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{String, 2}, Array{Int64, 1}, Base.Slice{Base.OneTo{Int64}}})
    precompile(Tuple{typeof(Base._mapreduce), typeof(Base.identity), typeof(Base.max), Base.IndexLinear, Array{UInt16, 1}})
    precompile(Tuple{getfield(Base, Symbol("##replace#334")), Int64, typeof(identity), String, Base.Pair{Base.Fix2{typeof(Base.isequal), Char}, String}})
    precompile(Tuple{typeof(Base.Filesystem.normpath), String})
    precompile(Tuple{typeof(Base._tryrequire_from_serialized), Base.PkgId, UInt64, String})
    precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{String}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}, String}}})
    precompile(Tuple{typeof(Base.setindex_shape_check), Array{String, 1}, Int64, Int64})
    precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, TypeVar})
    precompile(Tuple{typeof(Base.copyto!), Array{Base.Pair{String, _} where _, 1}, Int64, Array{Base.Pair{String, Bool}, 1}, Int64, Int64})
    precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{Any, Any}, Base.IdDict{Any, Any}})
    precompile(Tuple{typeof(Base.iterate), Nothing})
    precompile(Tuple{typeof(Base.Math.throw_complex_domainerror), Symbol, Float64})
    precompile(Tuple{typeof(Base.getindex), Array{String, 2}, Base.Colon})
    precompile(Tuple{typeof(Base.byteenv), Base.Dict{String, String}})
    precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, UInt8}, String})
    precompile(Tuple{typeof(Base.isempty), Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:header, :index, :sheet_name, :startrow, :startcol, :encoding), Tuple{Bool, Bool, String, Int64, Int64, String}}}})
    precompile(Tuple{typeof(Base.setproperty!), Base.Iterators.Stateful{Array{Float64, 1}, Union{Nothing, Tuple{Float64, Int64}}}, Symbol, Nothing})
    precompile(Tuple{typeof(Base.union!), Base.Set{String}, Array{String, 1}})
    precompile(Tuple{typeof(Base.StackTraces.lookup), Ptr{Nothing}})
    precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{UInt8, 1}, Base.IndexLinear, Array{Int64, 1}})
    precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Any, 1}, Base.IndexLinear, Array{AbstractString, 1}})
    precompile(Tuple{typeof(Base.vect), Type{DataStreams.Data.Row}})
    precompile(Tuple{typeof(Base.throw_boundserror), Array{AbstractString, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}})
    precompile(Tuple{typeof(Base.copyto!), Array{Array{T, 1} where T, 1}, Int64, Array{Array{Int64, 1}, 1}, Int64, Int64})
    precompile(Tuple{typeof(Base.union!), Base.Set{Int64}, Array{Int64, 1}})
    precompile(Tuple{typeof(Base.uv_alloc_buf), Ptr{Nothing}, UInt64, Ptr{Nothing}})
    precompile(Tuple{typeof(Base._findin), Array{String, 2}, Array{String, 1}})
    precompile(Tuple{typeof(Base.:(==)), WeakRef, Symbol})
    precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(<)), Tuple{Array{Float64, 1}, Int64}}})
    precompile(Tuple{typeof(Base.collect_to!), Array{Symbol, 1}, Base.Generator{Array{Any, 1}, getfield(DataStreams.Data, Symbol("##87#103"))}, Int64, Int64})
    precompile(Tuple{typeof(Base._append!), Array{DecisionTrees.Chart, 1}, Base.HasLength, Tuple{DecisionTrees.Chart, DecisionTrees.Chart, DecisionTrees.Chart, DecisionTrees.Chart}})
    precompile(Tuple{typeof(Base.typed_vcat), Type{Any}, Array{Any, 2}, Array{Any, 2}, Array{Any, 2}, Array{Any, 2}})
    
    precompile(Tuple{typeof(Base.throw_boundserror), Array{Any, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}})
    precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{String, 2}, Array{String, 2}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
    precompile(Tuple{typeof(Base._mapreduce), typeof(Base.identity), typeof(Base.max), Base.IndexLinear, Array{UInt8, 1}})
    precompile(Tuple{typeof(Base.entry_point_and_project_file), String, String})
    precompile(Tuple{typeof(Base.throw_boundserror), Array{String, 2}, Tuple{Base.LogicalIndex{Int64, Base.BitArray{1}}, Base.Slice{Base.OneTo{Int64}}}})
    precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Dict{Symbol, Any}})
    precompile(Tuple{typeof(Base.Sort.partition!), Array{Int64, 1}, Int64, Int64, Base.Order.Perm{Base.Sort.Float.Left, Array{Float64, 1}}})
    precompile(Tuple{typeof(Base.Sort.partition!), Array{Int64, 1}, Int64, Int64, Base.Order.Perm{Base.Sort.Float.Right, Array{Float64, 1}}})
    precompile(Tuple{typeof(Base.typed_vcat), Type{Any}, Array{Any, 2}, Array{String, 2}})
    precompile(Tuple{typeof(Base.throw_checksize_error), Array{DecisionTrees.Splitdef{UInt8}, 1}, Tuple{Base.OneTo{Int64}}})
    precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{DataType, (Base.WeakKeyDict{K, V} where V) where K}, Type{Int}})
    precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Array{Base.SubString{String}, 1}, getfield(DecisionTrees, Symbol("##3#4"))}, Int64, Int64})
    precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(DecisionTrees, Symbol("##101#106"))}, Int64, Int64})
    precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.Perm{Base.Order.By{getfield(DataStreams.Data, Symbol("##72#88"))}, Array{Any, 1}}})
    
    precompile(Tuple{typeof(Base.Sort.partition!), Array{Int64, 1}, Int64, Int64, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Int64, 1}}})
    precompile(Tuple{typeof(Base.hcat), String, String, String, String})
    precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Int64, 1}, String})
    precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Bool, String})
    precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(!)), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.isvalid), Tuple{Array{String, 1}}}}}})
    precompile(Tuple{getfield(Base, Symbol("##sprint#336")), Base.Pair{Symbol, Nothing}, Int64, typeof(identity), typeof(identity), Array{Any, 1}})
    precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Float64, 1}, Base.IndexLinear, Array{Int64, 1}})
    precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Core.MethodInstance})
    precompile(Tuple{typeof(Base.throw_boundserror), Base.SubArray{AbstractString, 2, Array{AbstractString, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}, Tuple{Int64, Int64}})
    precompile(Tuple{typeof(Base.Cartesian.exprresolve_conditional), Expr})
    precompile(Tuple{typeof(Base.Broadcast.throwdm), Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
    precompile(Tuple{getfield(Base, Symbol("##sprint#336")), Nothing, Int64, typeof(identity), typeof(identity), Array{String, 1}, Int})
    
    precompile(Tuple{typeof(Base.throw_checksize_error), Array{AbstractString, 1}, Tuple{Base.OneTo{Int64}}})
    precompile(Tuple{typeof(Base.fill!), Base.SubArray{Any, 2, Array{Any, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}, Int64})
    precompile(Tuple{typeof(Base.merge), NamedTuple{(:sinkindex, :sortindex), Tuple{Int64, Nothing}}, Base.Generator{Tuple{Symbol}, getfield(DataStreams.Data, Symbol("##57#63"))}})
    precompile(Tuple{typeof(Base.collect_to!), Array{Float64, 1}, Base.Generator{Array{DecisionTrees.Leaf, 1}, getfield(DecisionTrees, Symbol("##17#18"))}, Int64, Int64})
    precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Array{UInt8, 1}, getfield(DecisionTrees, Symbol("##36#37"))}, Int64, Int64})
    precompile(Tuple{typeof(Base.catch_backtrace)})
    precompile(Tuple{typeof(Base.copyto!), Array{Array{T, 1} where T, 1}, Int64, Array{Array{T, 1} where T, 1}, Int64, Int64})
    precompile(Tuple{typeof(Base.Cartesian.lreplace!), Expr, Base.Cartesian.LReplace{String}})
    precompile(Tuple{typeof(Base.copyto!), Array{DecisionTrees.Splitdef{UInt8}, 1}, Int64, Array{DecisionTrees.Splitdef{UInt8}, 1}, Int64, Int64})
    precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Type{T} where T, 1}, Base.IndexLinear, Array{DataType, 1}})
    precompile(Tuple{typeof(Base.throw_checksize_error), Array{Any, 1}, Tuple{Base.OneTo{Int64}}})
    precompile(Tuple{getfield(Base.Sort, Symbol("##sortperm#11")), (Base.Sort).QuickSortAlg, typeof(identity), typeof(identity), Bool, (Base.Order).ForwardOrdering, typeof(identity), Array{Float64, 1}})
    precompile(Tuple{typeof(Base.print), Base.IOContext{Base.TTY}, String, String})
    precompile(Tuple{typeof(Base.unsafe_copyto!), Array{Float64, 1}, Int64, Array{Float64, 1}, Int64, Int64})
    precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{Any, 2}, Array{String, 2}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
    precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Array{Type{T} where T, 1}, getfield(Dates, Symbol("##33#34"))}, Int64, Int64})
    precompile(Tuple{typeof(Base.copy_exprargs), Array{Any, 1}})
    precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{String, 1}, Array{UInt8, 1}})
    precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Array{Any, 1}, getfield(Test, Symbol("##23#24")){Int64}}, Int64, Int64})
    precompile(Tuple{typeof(Base.hcat), DecisionTrees.Chart, DecisionTrees.Chart, DecisionTrees.Chart, DecisionTrees.Chart})
    precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Any, 2}, Base.Slice{Base.OneTo{Int64}}, Int64})
    precompile(Tuple{typeof(Base.setindex!), PyCall.PyObject, String, String})
    precompile(Tuple{typeof(Base.typed_vcat), Type{Any}, Array{String, 2}, Array{String, 2}, Array{Any, 2}, Union{AbstractArray{T, 2}, AbstractArray{T, 1}} where T})
    precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.string), Tuple{Base.Broadcast.Extruded{Array{Symbol, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
    precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), typeof(Base.add_sum), Float64, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Base.OneTo{Int64}, Int64}})
    precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Float64, UInt8}, Float64})
    precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(<=)), Tuple{Array{Float64, 1}, Int64}}})
    precompile(Tuple{typeof(Base.typed_vcat), Type{Any}, Array{String, 2}, Array{Any, 2}, Array{String, 2}})
    precompile(Tuple{getfield(Base.Sort, Symbol("##sortperm#11")), (Base.Sort).QuickSortAlg, typeof(identity), typeof(identity), Nothing, (Base.Order).ForwardOrdering, typeof(identity), Array{Float64, 1}})
    precompile(Tuple{typeof(Base.hvcat_fill), Array{Float64, 2}, Tuple{Int64, Int64}})
    precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, typeof(Base.esc)}})
    precompile(Tuple{typeof(Base.setindex_shape_check), Array{AbstractString, 1}, Int64, Int64})
    precompile(Tuple{typeof(Base.collect_to!), Array{String, 1}, Base.Generator{Array{DecisionTrees.ExcelSheet, 1}, getfield(DecisionTrees, Symbol("##73#75"))}, Int64, Int64})
    precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{Base.SubString{String}}, Tuple{Base.Cmd}, Tuple{Base.SubString{String}}, Tuple{String}}})
    precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Array{Any, 1}, getfield(DataFrames, Symbol("##48#50"))}, Int64, Int64})
    precompile(Tuple{getfield(Base.Sort, Symbol("##sortperm#11")), (Base.Sort).QuickSortAlg, typeof(identity), typeof(identity), Nothing, (Base.Order).ForwardOrdering, typeof(identity), Array{Any, 1}})
    precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Type{Int}})
    precompile(Tuple{typeof(Base.rat), Float64})
    precompile(Tuple{typeof(Base.vcat), Array{DecisionTrees.Leaf, 1}, Array{DecisionTrees.Leaf, 1}})
    precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.Perm{Base.Sort.Float.Left, Array{Float64, 1}}})
    precompile(Tuple{typeof(Base.typed_vcat), Type{Any}, Array{String, 2}, Array{Float64, 2}, Array{String, 2}})
    precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Float64, 1}, Int64}}})
    precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Tuple{}, Char, Char, Char, Bool, Int64, Int64})
    precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{UInt8, Nothing}, UInt8})
    precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Float64, Nothing}, Float64})
    precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{Base.SubString{String}}}})
    precompile(Tuple{typeof(Base._any), getfield(Base, Symbol("##182#183")){Symbol}, Array{Any, 1}, Base.Colon})
    precompile(Tuple{getfield(Base.Filesystem, Symbol("##rm#9")), Bool, Bool, typeof(identity), String})
    precompile(Tuple{typeof(Base.map), getfield(DataStreams.Data, Symbol("##7#8")), Core.SimpleVector})
    precompile(Tuple{typeof(Base.print_shell_word), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, String})
    precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{String, 1}, Array{Int64, 1}})
    precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
    precompile(Tuple{typeof(Base._redirect), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Dict{Tuple{Union{Nothing, Module}, Union{Nothing, Symbol}}, IO}, Base.StackTraces.StackFrame})
    precompile(Tuple{typeof(Base.throw_checksize_error), Array{Symbol, 1}, Tuple{Base.OneTo{Int64}}})
    precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Float64, String})
    precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(DecisionTrees, Symbol("##102#107"))}, Int64, Int64})
    precompile(Tuple{typeof(Base.view), Array{Any, 2}, Int64, typeof(identity)})
    precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
    precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, DataType}, String})
    precompile(Tuple{typeof(Base.mightalias), Array{Float64, 1}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}})
    precompile(Tuple{typeof(Base.print), String})
    precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Any, Any}, Symbol})
    precompile(Tuple{typeof(Base.collect_to!), Array{Expr, 1}, Base.Generator{Array{Any, 1}, getfield(DataStreams.Data, Symbol("##85#101"))}, Int64, Int64})
    precompile(Tuple{typeof(Base.:(*)), PyCall.PyObject, String})
    precompile(Tuple{typeof(Base.iterate), Base.Iterators.Filter{getfield(Distributed, Symbol("##65#67")), Array{Any, 1}}})
    precompile(Tuple{typeof(Base.Filesystem.splitdir), String})
    precompile(Tuple{typeof(Base.setindex!), Array{Base.SubString{String}, 1}, Int64, Int64})
    precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Float64, UInt16}, Float64})
    precompile(Tuple{typeof(Base.throw_boundserror), Array{String, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}})
    precompile(Tuple{typeof(Base.fill!), Base.SubArray{Any, 2, Array{Any, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}, Float64})
    precompile(Tuple{typeof(Base.Sort.Float.nans2right!), Array{Int64, 1}, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Float64, 1}}, Int64, Int64})
    precompile(Tuple{typeof(Base.collect_to!), Array{QuoteNode, 1}, Base.Generator{Array{Any, 1}, Type{QuoteNode}}, Int64, Int64})
    precompile(Tuple{typeof(Base.unshift!), Array{Float64, 1}, Float64})
    precompile(Tuple{typeof(Base.Filesystem.joinpath), String, String})
    precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
    
    precompile(Tuple{typeof(Base.read), Base.IOStream})
    precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Union{Test.Error, Test.Fail}, 1}, Base.IndexLinear, Array{Any, 1}})
    precompile(Tuple{typeof(Base.lock), Base.ReentrantLock})
    precompile(Tuple{typeof(Base.print), Base.IOContext{Base.TTY}, String, Type{Int}})
    precompile(Tuple{typeof(Base.collect_to!), Array{Expr, 1}, Base.Generator{Array{Any, 1}, getfield(DataStreams.Data, Symbol("##84#100"))}, Int64, Int64})
    precompile(Tuple{typeof(Base.pop!), Base.Dict{String, String}, String})
    precompile(Tuple{typeof(Base.throw_boundserror), Base.SubArray{String, 2, Array{String, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}, Tuple{Int64, Int64}})
    precompile(Tuple{getfield(Base, Symbol("#throw1#313")), Int64, Int64})
    
    precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(DecisionTrees, Symbol("##103#108"))}, Int64, Int64})
    precompile(Tuple{typeof(Base.typed_vcat), Type{Any}, Array{Any, 2}, Array{Float64, 2}})
    precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Cmd})
    precompile(Tuple{typeof(Base.lstrip), Base.SubString{String}, Array{Char, 1}})
    precompile(Tuple{typeof(Base.close), Base.PipeEndpoint})
    precompile(Tuple{typeof(Base.getindex), PyCall.PyObject, String})
    precompile(Tuple{typeof(Base.getindex), DecisionTrees.PooledArraysDTM.PooledArray{String, UInt8, 1, Array{UInt8, 1}}, Array{Int64, 1}})
    precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Float64, 1}, Array{UInt8, 1}})
    precompile(Tuple{typeof(Base.iterate), Base.Iterators.Filter{typeof(DataStreams.Data.selected), Core.SimpleVector}, Int64})
    precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Base.Set{Any}})
    precompile(Tuple{typeof(Base._mapreducedim!), typeof(Base.identity), typeof(Base.add_sum), Array{Int64, 2}, Array{Int64, 2}})
    precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
    precompile(Tuple{typeof(Base.collect_to!), Array{Expr, 1}, Base.Generator{Array{Any, 1}, getfield(DataStreams.Data, Symbol("##86#102"))}, Int64, Int64})
    
    precompile(Tuple{typeof(Base.:(>)), PyCall.PyObject, PyCall.PyObject})
    precompile(Tuple{typeof(Base.vcat), Base.UnitRange{UInt8}})
    precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Any, Any}, String})
    precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol}})
    precompile(Tuple{typeof(Base.unsafe_write), Base.PipeEndpoint, Ptr{UInt8}, UInt64})
    
    precompile(Tuple{typeof(Base.getindex), DecisionTrees.PooledArraysDTM.PooledArray{Float64, UInt8, 1, Array{UInt8, 1}}, Array{Int64, 1}})
    precompile(Tuple{typeof(Base._any), getfield(Base, Symbol("##182#183")){String}, Tuple{String, String, String, String, String}, Base.Colon})
    precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
    precompile(Tuple{typeof(Base.iterate), Base.Iterators.Filter{getfield(Distributed, Symbol("##65#67")), Array{Any, 1}}})
    
    precompile(Tuple{typeof(Base.firstcaller), Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}, Tuple{Symbol}})
    precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{UInt8, 1}, Array{Int64, 1}})
    precompile(Tuple{typeof(Base.convert), Type{AbstractString}, PyCall.PyObject})
    precompile(Tuple{typeof(Base.find_env), Base.CurrentEnv, String})
    precompile(Tuple{getfield(Base, Symbol("##print_to_string#337")), Nothing, typeof(identity), Float64, Int})
    precompile(Tuple{typeof(Base.Filesystem.cd), String})
    precompile(Tuple{getfield(Base, Symbol("##Cmd#484#485")), Bool, Nothing, String, Bool, Bool, Bool, Type{Int}, Base.Cmd})
    precompile(Tuple{typeof(Base._deepcopy_array_t), Int, Type{Int}, Base.IdDict{Any, Any}})
    precompile(Tuple{typeof(Base.Filesystem.mktempdir), String})
    precompile(Tuple{typeof(Base._require_search_from_serialized), Base.PkgId, String})
    precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Int64, 1}}})
    precompile(Tuple{typeof(Base.Sort.Float.nans2left!), Array{Int64, 1}, Base.Order.Perm{Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}, Array{Float64, 1}}, Int64, Int64})
    precompile(Tuple{typeof(Base.throw_boundserror), Base.SubArray{Any, 2, Array{Any, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}, Tuple{Int64, Int64}})
    precompile(Tuple{typeof(Base.print), String, String})
    precompile(Tuple{typeof(Base.throw_boundserror), Array{String, 2}, Tuple{Base.UnitRange{Int64}, Base.Slice{Base.OneTo{Int64}}}})
    precompile(Tuple{typeof(Base.setindex!), Base.Dict{AbstractString, Any}, Array{Symbol, 1}, String})
    precompile(Tuple{typeof(Base.unsafe_write), Base.TTY, Ptr{UInt8}, UInt64})
    precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.literal_pow), Tuple{Base.RefValue{typeof(Base.:(^))}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}, Float64}}, Base.RefValue{Base.Val{2}}}}}}, Tuple{Int64}})
    precompile(Tuple{getfield(Base, Symbol("##print_to_string#337")), Nothing, typeof(identity), Type{Int}})
    precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.isnan), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
    precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, UnionAll})
    precompile(Tuple{typeof(Base.collect_to!), Array{Symbol, 1}, Base.Generator{Array{Any, 1}, getfield(DataStreams.Data, Symbol("##79#95"))}, Int64, Int64})
    precompile(Tuple{typeof(Base.setproperty!), Base.Iterators.Stateful{Array{Int64, 1}, Union{Nothing, Tuple{Int64, Int64}}}, Symbol, Nothing})
    precompile(Tuple{typeof((Base.Cartesian)._nloops), Int64, Symbol, Expr, Expr, Expr})
    precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(/)), Tuple{Base.Broadcast.Extruded{Array{Int64, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Tuple{Int64}})
    precompile(Tuple{typeof(Base.Filesystem.isdirpath), String})
    precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(>)), Tuple{Base.Broadcast.Extruded{Array{Int64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}, Int64}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
    precompile(Tuple{typeof(Base.Sort.searchsorted), Array{Int64, 1}, Int64, Int64, Int64, Base.Order.ForwardOrdering})
    precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
    precompile(Tuple{typeof(Base.throw_boundserror), DecisionTrees.PooledArraysDTM.PooledArray{String, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}})
    precompile(Tuple{typeof(Base.setindex!), Array{Any, 1}, Array{Int64, 1}, Base.UnitRange{Int64}})
    precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Type{Int}})
    precompile(Tuple{typeof(Base.Sort.partition!), Array{Float64, 1}, Int64, Int64, Base.Order.ForwardOrdering})
    precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}})
    precompile(Tuple{getfield(Base, Symbol("#kw##cat_t")), NamedTuple{(:dims,), Tuple{Base.Val{2}}}, typeof(Base.cat_t), Type{AbstractString}, String, String})
    precompile(Tuple{typeof(Base.Sort.partition!), Array{Int64, 1}, Int64, Int64, Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}})
    precompile(Tuple{typeof(Base.unpreserve_handle), Task})
    precompile(Tuple{typeof(Base.Filesystem.joinpath), String, String})
    precompile(Tuple{typeof(Base.hvcat_fill), Array{Float64, 2}, Tuple{Int64, Float64, Float64, Float64, Float64, Float64, Float64, Int64, Int64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}})
    precompile(Tuple{typeof(Base.sum), Array{Int64, 1}})
    precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.Perm{Base.Sort.Float.Right, Array{Float64, 1}}})
    precompile(Tuple{typeof(Base.collect_to!), Array{Expr, 1}, Base.Generator{Array{Any, 1}, getfield(DataStreams.Data, Symbol("##77#93"))}, Int64, Int64})
    precompile(Tuple{typeof(Base.println)})
    precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{AbstractString, Any}, String})
    precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 2}, Tuple{Array{Int64, 1}, Int64}})
    precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{Int64, 2}, Int64, Base.Slice{Base.OneTo{Int64}}, Int64})
    precompile(Tuple{typeof(Base.throw_boundserror), DecisionTrees.PooledArraysDTM.PooledArray{Float64, UInt8, 1, Array{UInt8, 1}}, Tuple{Array{Int64, 1}}})
    precompile(Tuple{typeof(Base.setindex!), Array{Any, 2}, Array{Any, 2}, Base.UnitRange{Int64}, typeof(identity)})
    precompile(Tuple{getfield(Base.Sort, Symbol("##sort!#7")), (Base.Sort).QuickSortAlg, typeof(identity), typeof(identity), Bool, (Base.Order).ForwardOrdering, typeof(identity), Array{Int64, 1}})
    precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{MethodError}})
    precompile(Tuple{getfield(Base, Symbol("##sprint#336")), Nothing, Int64, typeof(identity), typeof(identity), UInt64})
    precompile(Tuple{typeof(Base.show_type_name), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Core.TypeName})
    precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, typeof(DataStreams.Data.name)}})
    precompile(Tuple{typeof(Base.setindex!), Array{Any, 2}, Array{String, 2}, Base.UnitRange{Int64}, typeof(identity)})
    precompile(Tuple{typeof(Base.vect), Type{DataStreams.Data.Field}})
    precompile(Tuple{typeof(Base.throw_boundserror), Array{String, 1}, Tuple{Base.LogicalIndex{Int64, Base.BitArray{1}}}})
    precompile(Tuple{typeof(Base.deepcopy_internal), Int, Base.IdDict{Any, Any}})
    precompile(Tuple{typeof(Base.collect_to!), Array{Symbol, 1}, Base.Generator{Array{Any, 1}, getfield(DataStreams.Data, Symbol("##78#94"))}, Int64, Int64})
    precompile(Tuple{typeof(Base._deleteat!), Array{Int64, 1}, Array{Int64, 1}})
    precompile(Tuple{typeof(Base.Cartesian.exprresolve_arith), Expr})
    precompile(Tuple{typeof(Base.grow_to!), Array{String, 1}, Base.Generator{Base.Iterators.Filter{typeof(DataStreams.Data.selected), Core.SimpleVector}, getfield(DataStreams.Data, Symbol("##69#71"))}, Int64})
    precompile(Tuple{getfield(Base, Symbol("##672#673")), Base.IOStream})
    precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{AbstractString, Array{Any, 1}}, String})
    precompile(Tuple{typeof(Base.throw_boundserror), Array{String, 1}, Tuple{Array{UInt8, 1}}})
    precompile(Tuple{typeof(Base.compilecache), Base.PkgId})
    precompile(Tuple{typeof(Base.getindex), Array{Any, 2}, Base.UnitRange{Int64}, typeof(identity)})
    precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Base.Dict{Any, Any}, String})
    precompile(Tuple{typeof(Base._deleteat!), Array{String, 1}, Array{Int64, 1}})
    precompile(Tuple{typeof(Base.Sort.partition!), Array{UInt8, 1}, Int64, Int64, Base.Order.ForwardOrdering})
    precompile(Tuple{typeof(Base._reformat_bt), Array{Ptr{Nothing}, 1}, Array{Any, 1}})
    precompile(Tuple{getfield(Base, Symbol("##quantile!#647")), Bool, typeof(identity), Array{Float64, 1}, Array{Float64, 1}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
    precompile(Tuple{typeof(Base.copyto!), Array{String, 2}, Int64, Array{String, 1}, Int64, Int64})
    precompile(Tuple{typeof(Base.vect), Type{(DataStreams.Data).Column}, DataType})
    precompile(Tuple{typeof(Base.Filesystem.normpath), String})
    precompile(Tuple{getfield(Base, Symbol("##sprint#336")), Nothing, Int64, typeof(identity), typeof(identity), Array{Int64, 1}, Int})
    precompile(Tuple{typeof(Base.setindex!), Base.Dict{WeakRef, Nothing}, Nothing, WeakRef})
    precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Int64}, Int64, Tuple{Ptr{Nothing}, Symbol}})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 1}, Tuple{Array{UInt8, 1}}})
    precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{String, 2}, Array{String, 2}, Array{Any, 2}, Array{String, 2}, Array{String, 2}, Array{String, 2}, Array{String, 2}, Array{Any, 2}, Array{String, 2}, Array{String, 2}}}})
    precompile(Tuple{typeof(Base._deleteat!), Array{Float64, 1}, Array{Int64, 1}})
    precompile(Tuple{typeof(Base.vect), Test.Fail})
    precompile(Tuple{typeof(Base.union!), Base.Set{Int64}, Base.UnitRange{Int64}})
    precompile(Tuple{typeof(Base.isempty), Base.Iterators.Stateful{Array{Float64, 1}, Union{Nothing, Tuple{Float64, Int64}}}})
    precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:append,), Tuple{Bool}}}, Type{NamedTuple{(), Tuple{}}}})
    precompile(Tuple{getfield(Base, Symbol("##print_to_string#337")), Nothing, typeof(identity), Type{Int}, Int})
    
    precompile(Tuple{typeof(Base.convert), Type{Array{Float64, 2}}, Array{Any, 2}})
    precompile(Tuple{typeof(Base.Filesystem.normpath), String})
    precompile(Tuple{typeof(Base.project_file_name_uuid_path), String, String})
    precompile(Tuple{typeof(Base.sort!), Array{Float64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Sort.Float.Left})
    precompile(Tuple{typeof(Base.vect), Type{String}, DataType})
    precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{String, 2}, Array{Float64, 2}}}})
    precompile(Tuple{typeof(Base.version_slug), Base.UUID, Base.SHA1, Int64})
    precompile(Tuple{typeof(Base.unsafe_copyto!), Array{Float64, 1}, Int64, Array{Float64, 2}, Int64, Int64})
    precompile(Tuple{getfield(Base, Symbol("##sprint#336")), Nothing, Int64, typeof(identity), typeof(identity), Tuple{Int64, Int64}, Int})
    precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:reference,), Tuple{Array{UInt8, 1}}}}, Type{NamedTuple{(), Tuple{}}}})
    precompile(Tuple{typeof(Base.cat_shape), Tuple{Bool, Bool}, Tuple{Int64, Int64}, Tuple{Int64}, Tuple{Int64, Int64}})
    precompile(Tuple{typeof(Base.setindex!), Base.IdDict{Any, Any}, Int, Int})
    precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(>)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Tuple{Int64}})
    precompile(Tuple{typeof(Base.displaysize), Base.TTY})
    precompile(Tuple{typeof(Base.vect), Type{Int64}, DataType})
    precompile(Tuple{typeof(Base.uvfinalize), Base.PipeEndpoint})
    precompile(Tuple{typeof(Base.setindex!), Base.IdDict{Module, Base.PkgId}, Int, Int})
    precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Bool, Bool, String, Int64, Int64, String}}})
    precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{Base.Meta.ParseError}})
    precompile(Tuple{typeof(Base.show_type_name), Base.IOContext{Base.TTY}, Core.TypeName})
    precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.isfinite), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
    precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Any, 2}, Array{String, 2}}}})
    precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{String, 2}, Array{Float64, 2}, Array{String, 2}}}})
    precompile(Tuple{typeof(Base.setindex!), Base.Dict{AbstractString, Any}, Int64, String})
    precompile(Tuple{typeof(Base.Sort.partition!), Array{Float64, 1}, Int64, Int64, Base.Sort.Float.Left})
    precompile(Tuple{typeof(Base.typed_vcat), Type{Any}, Array{Any, 2}, Array{Any, 2}, Array{Any, 2}})
    precompile(Tuple{typeof(Base.sort!), Array{UInt8, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.ForwardOrdering})
    
    precompile(Tuple{getfield(Base, Symbol("##sprint#336")), Nothing, Int64, typeof(identity), typeof(identity), Array{Float64, 1}, Int})
    precompile(Tuple{typeof(Base.replace), String, Char, String})
    precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Int64, String})
    precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, String}, String, String})
    precompile(Tuple{typeof(Base.Sort.Float.nans2right!), Array{Float64, 1}, Base.Order.ForwardOrdering, Int64, Int64})
    precompile(Tuple{typeof(Base.vcat), Base.OneTo{Int64}})
    precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Nothing}, Nothing, String})
    precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Core.SimpleVector})
    precompile(Tuple{getfield(Base, Symbol("##print_to_string#337")), Nothing, typeof(identity), DecisionTrees.DifferenceSplit})
    precompile(Tuple{getfield(Base, Symbol("##print_to_string#337")), Nothing, typeof(identity), DecisionTrees.SortByMean})
    precompile(Tuple{typeof(Base.lpad), String, Int64, String})
    precompile(Tuple{getfield(Base.StackTraces, Symbol("##show#9")), Bool, typeof(identity), Base.IOContext{Base.TTY}, (Base.StackTraces).StackFrame})
    precompile(Tuple{typeof(Base.lock), Base.Threads.RecursiveTatasLock})
    
    precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
    precompile(Tuple{typeof(Base.Filesystem.isdirpath), String})
    precompile(Tuple{typeof(Base.Filesystem.splitdir), String})
    precompile(Tuple{typeof(Base.shift!), Array{Float64, 1}})
    precompile(Tuple{typeof(Base.Sort.partition!), Array{Float64, 1}, Int64, Int64, Base.Sort.Float.Right})
    precompile(Tuple{typeof(Base.vect), Float64, Float64})
    precompile(Tuple{typeof(Base.close), Base.TTY})
    precompile(Tuple{typeof(Base.entry_path), String, String})
    precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{String, 2}, Array{Any, 2}, Array{String, 2}}}})
    precompile(Tuple{typeof(Base.find_env), Base.NamedEnv})
    precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{Base.EOFError}})
    precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{String, 2}, Array{Any, 2}}}})
    precompile(Tuple{typeof(Base.vect), UInt8, UInt8})
    precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Float64}}, Tuple{Int64}})
    precompile(Tuple{typeof(Base.displaysize), Base.TTY})
    precompile(Tuple{typeof(Base._collect), Array{Any, 1}, Base.Generator{Array{Any, 1}, getfield(Test, Symbol("##23#24")){Int64}}, Base.EltypeUnknown, Base.HasShape{1}})
    precompile(Tuple{typeof(Base._round), Float64, Base.Rounding.RoundingMode{:Nearest}, Int64, Nothing, Int64})
    precompile(Tuple{typeof(Base.first), String})
    precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}})
    precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
    precompile(Tuple{typeof(Base.getindex), Array{String, 1}, Array{Int64, 1}})
    precompile(Tuple{getfield(Base, Symbol("##sprint#336")), Nothing, Int64, typeof(identity), typeof(identity), Array{Symbol, 1}})
    precompile(Tuple{typeof(Base.typed_vcat), Type{Any}, Array{Any, 2}, Array{Any, 2}})
    precompile(Tuple{getfield(Base.Sort, Symbol("##sort#8")), (Base.Iterators).Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:rev,), Tuple{Bool}}}, typeof(identity), Array{Int64, 1}})
    precompile(Tuple{typeof(Base.setindex!), Base.Dict{AbstractString, Any}, Float64, String})
    precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{DomainError}})
    precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{OverflowError}})
    precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
    precompile(Tuple{typeof(Base.sum), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}})
    precompile(Tuple{typeof(Base.Filesystem.splitext), String})
    precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{ErrorException}})
    precompile(Tuple{typeof(Base.find_env), String})
    precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Dates.DateTime})
    precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{PyCall.PyIOError}})
    precompile(Tuple{typeof(Base.show_default), Base.GenericIOBuffer{Array{UInt8, 1}}, Int})
    precompile(Tuple{typeof(Base.collect_to!), Array{Array{T, 1} where T, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(DecisionTrees, Symbol("##97#100"))}, Int64, Int64})
    precompile(Tuple{typeof(Base.vect), DecisionTrees.ExcelSheet, DecisionTrees.ExcelSheet})
    precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.UnitRange{Int64}}})
    precompile(Tuple{typeof(Base.extrema), Array{Float64, 1}})
    precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{OutOfMemoryError}})
    precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{String, 1}})
    precompile(Tuple{getfield(Base.Cartesian, Symbol("#@ntuple")), LineNumberNode, Module, Int64, Int})
    precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol}})
    precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{InterruptException}})
    precompile(Tuple{typeof(Base.deepcopy_internal), String, Base.IdDict{Any, Any}})
    precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{Any, 2}, Array{Float64, 2}}}})
    precompile(Tuple{typeof(Base.setindex!), Base.Dict{AbstractString, Any}, Bool, String})
    precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{String}, Tuple{Base.Cmd}}})
    precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Any, Int64}, Tuple{Ptr{Nothing}, Symbol}})
    precompile(Tuple{typeof(Base.Iterators.zip_iterate), Base.UnitRange{Int64}, Base.Generator{Array{Any, 1}, getfield(DataStreams.Data, Symbol("##80#96"))}, Tuple{Int64}, Tuple{Int64}})
    precompile(Tuple{typeof(Base.setindex!), Base.Dict{AbstractString, Any}, Base.Dict{Any, Any}, String})
    precompile(Tuple{getfield(Base, Symbol("##_spawn#497")), Nothing, typeof(identity), Base.CmdRedirect, Tuple{Base.Pipe, Base.TTY, Base.TTY}})
    precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{BoundsError}})
    precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, PyCall.PyObject, String})
    precompile(Tuple{getfield(Base, Symbol("#show_bound#369")), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Int})
    precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{Base.SubString{String}}, Tuple{Base.Cmd}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}}})
    precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{StackOverflowError}})
    precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{DivideError}})
    precompile(Tuple{typeof(Base.task_local_storage), Symbol, Tuple{UInt64, Tuple{UInt64, Tuple{}}}})
    precompile(Tuple{typeof(Base.setindex!), Base.Dict{AbstractString, Array{Any, 1}}, Array{Any, 1}, String})
    precompile(Tuple{typeof(Base.CoreLogging.logmsg_shim), Int64, String, Nothing, Symbol, Symbol, Symbol, Int64, Array{Any, 1}})
    precompile(Tuple{typeof(Base.unlock), Base.Threads.RecursiveTatasLock})
    precompile(Tuple{typeof(Base.include_relative), Module, String})
    precompile(Tuple{typeof(Base.setindex!), Base.Dict{AbstractString, Base.Dict{AbstractString, Any}}, Base.Dict{AbstractString, Any}, String})
    precompile(Tuple{getfield(Base, Symbol("##quantile#653")), Bool, typeof(identity), Array{Float64, 1}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
    
    precompile(Tuple{typeof(Base.collect), Type{Any}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.sort!), Array{Float64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Sort.Float.Right})
    precompile(Tuple{typeof(Base.include_relative), Module, String})
    precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{ArgumentError}})
    precompile(Tuple{typeof(Base.explicit_manifest_deps_get), String, Base.UUID, String})
    precompile(Tuple{getfield(Base.StackTraces, Symbol("##show#9")), Bool, typeof(identity), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, (Base.StackTraces).StackFrame})
    precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{UndefRefError}})
    precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{InexactError}})
    precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{LoadError}})
    precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{Base.SystemError}})
    precompile(Tuple{typeof(Base.println), String})
    precompile(Tuple{typeof(Base.mightalias), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, Array{Int64, 1}})
    precompile(Tuple{typeof(Base.getindex), Array{Union{DecisionTrees.Leaf, DecisionTrees.Node{UInt16}, DecisionTrees.Node{UInt8}}, 1}, Int64})
    precompile(Tuple{typeof(Base.open), typeof(identity), String, String})
    precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{Base.KeyError}})
    precompile(Tuple{typeof(Base.show_datatype), Base.IOContext{Base.TTY}, DataType})
    precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{TypeError}})
    precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:mode,), Tuple{Symbol}}}, Type{NamedTuple{(), Tuple{}}}})
    precompile(Tuple{typeof(Base.Filesystem.splitdir), String})
    precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Type{Int}, String, String})
    precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
    precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{String, 1}, Array{String, 2}}}})
    precompile(Tuple{typeof(Base.deepcopy_internal), Array{UInt64, 1}, Base.IdDict{Any, Any}})
    precompile(Tuple{typeof(Base.read), Base.Cmd})
    
    precompile(Tuple{typeof(Base.getindex), Base.BitArray{1}, Int64})
    precompile(Tuple{typeof(Base.show_datatype), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, DataType})
    precompile(Tuple{typeof(Base.throw_boundserror), Array{Symbol, 1}, Tuple{Array{Int64, 1}}})
    precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Type{Int}, String})
    precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{DataType, DataType, DataType}, getfield(Dates, Symbol("##36#37"))}})
    precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol}, Type{NamedTuple{(:sinkindex, :sortindex), Tuple{Int64, Nothing}}}, Type{NamedTuple{(:col,), Tuple{Int64}}}})
    precompile(Tuple{typeof(Base.sort!), Array{Any, 1}, Int64, Int64, Base.Sort.MergeSortAlg, Base.Order.By{getfield(DataStreams.Data, Symbol("##83#99"))}, Array{Any, 1}})
    precompile(Tuple{typeof(Base.show_datatype), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, DataType})
    precompile(Tuple{typeof(Base.include), Module, String})
    precompile(Tuple{typeof(Base.issubset), Array{Symbol, 1}, Array{Symbol, 1}})
    precompile(Tuple{typeof(Base.implicit_project_deps_get), String, String})
    precompile(Tuple{typeof(Base.grow_to!), Array{DataType, 1}, Base.Generator{Base.Iterators.Filter{typeof(DataStreams.Data.selected), Core.SimpleVector}, getfield(DataStreams.Data, Symbol("##68#70")){Bool}}, Int64})
    precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{String, _} where _, 1}, Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:header, :index, :sheet_name, :startrow, :startcol, :encoding), Tuple{Bool, Bool, String, Int64, Int64, String}}}, getfield(PyCall, Symbol("##83#84"))}, Int64, Int64})
    precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{}}})
    precompile(Tuple{typeof(Base.typed_vcat), Type{Any}, Array{String, 2}, Array{Float64, 2}})
    precompile(Tuple{typeof(Base.deepcopy), Array{String, 1}})
    precompile(Tuple{getfield(Base.Sort, Symbol("##sortperm#11")), (Base.Sort).QuickSortAlg, typeof(identity), typeof(identity), Nothing, (Base.Order).ForwardOrdering, typeof(identity), Array{Int64, 1}})
    precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{Base.Cmd}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{String}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}, String}, Tuple{Base.SubString{String}}, Tuple{String}}})
    precompile(Tuple{typeof(Base.Cartesian.lreplace!), Expr, Base.Cartesian.LReplace{String}})
    precompile(Tuple{typeof(Base.print), Base.IOContext{Base.TTY}, Type{Int}})
    precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Array{String, 2}, Array{String, 2}, Array{Any, 2}, Array{String, 2}, Array{String, 2}}}})
    precompile(Tuple{typeof(Base.fill!), Base.SubArray{Any, 1, Array{Any, 1}, Tuple{Base.UnitRange{Int64}}, true}, String})
    precompile(Tuple{getfield(Base, Symbol("##s624#409")), Int, Int, Int, Int, Int, Int})
    precompile(Tuple{typeof(Base.convert), Type{Base.Dict{PyCall.PyAny, PyCall.PyAny}}, PyCall.PyObject})
    precompile(Tuple{typeof(Base.__cat), Array{Any, 2}, Tuple{Int64, Int64}, Tuple{Bool, Bool}, String, Int})
    precompile(Tuple{typeof(Base._similar_for), Base.UnitRange{Int64}, Type{Int}, Base.Generator{Base.UnitRange{Int64}, getfield(DecisionTrees, Symbol("##101#106"))}, Base.HasShape{1}})
    precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{Bool, 1}, Base.BitArray{1}, Base.Slice{Base.OneTo{Int64}}})
    precompile(Tuple{typeof(Base.iterate), Base.ImmutableDict{Symbol, Any}, Base.ImmutableDict{Symbol, Any}})
    precompile(Tuple{typeof(Base.cat_shape), Tuple{Bool, Bool}, Tuple{Int64, Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}})
    precompile(Tuple{Base.Colon, Float64, Float64, Float64})
    precompile(Tuple{typeof(Base._cat_t), Base.Val{2}, Type{Int}, String, Int})
    precompile(Tuple{typeof(Base.mapfoldl_impl), getfield(Base, Symbol("##99#101")), typeof(Base.add_sum), Int64, Tuple{Array{String, 2}, Array{String, 2}, Array{Any, 2}, Array{String, 2}, Array{String, 2}}, Int64})
    precompile(Tuple{typeof(Base.deepcopy), Array{Float64, 1}})
    precompile(Tuple{typeof(Base.show_unquoted), Base.TTY, QuoteNode, Int64, Int64})
    precompile(Tuple{typeof(Base.throw_checksize_error), Base.BitArray{1}, Tuple{Base.OneTo{Int64}}})
    precompile(Tuple{typeof(Base.getindex), Array{AbstractString, 2}, Base.Colon})
    precompile(Tuple{typeof(Base.to_tuple_type), Int})
    precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}, Tuple{String}, Tuple{Array{String, 1}}}})
    precompile(Tuple{typeof(Base.get!), getfield(Base, Symbol("##229#230")){Int64}, Base.Dict{Any, Int64}, Tuple{Ptr{Nothing}, Symbol}})
    precompile(Tuple{typeof(Base.throw_boundserror), Array{Array{Int64, 1}, 1}, Tuple{Base.UnitRange{Int64}}})
    precompile(Tuple{typeof(Base.isfile_casesensitive), String})
    precompile(Tuple{typeof(Base._all), getfield(Base, Symbol("##11#12")), Core.SimpleVector, Base.Colon})
    
    precompile(Tuple{getfield(Base, Symbol("##with_output_color#680")), Bool, typeof(identity), typeof(identity), Symbol, Base.GenericIOBuffer{Array{UInt8, 1}}})
    precompile(Tuple{typeof(Base._similar_for), Base.UnitRange{Int64}, Type{Int}, Base.Generator{Base.UnitRange{Int64}, getfield(DecisionTrees, Symbol("##96#99"))}, Base.HasShape{1}})
    precompile(Tuple{typeof(Base.haskey), Base.Dict{Symbol, Function}, Expr})
    precompile(Tuple{typeof(Base.mapfoldl_impl), getfield(Base, Symbol("##99#101")), typeof(Base.add_sum), Int64, Tuple{Array{String, 2}, Array{String, 2}, Array{Any, 2}, Array{String, 2}, Array{String, 2}, Array{String, 2}, Array{String, 2}, Array{Any, 2}, Array{String, 2}, Array{String, 2}}, Int64})
    precompile(Tuple{typeof(Base.print), Base.TTY, String, Char})
    precompile(Tuple{getfield(Base, Symbol("#kw##with_output_color")), NamedTuple{(:bold,), Tuple{Bool}}, typeof(Base.with_output_color), typeof(identity), Symbol, Base.TTY, String, String})
    precompile(Tuple{typeof(Base.deepcopy), Array{Float64, 2}})
    precompile(Tuple{typeof(Base.show_block), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Array{Any, 1}, Expr, Int64})
    precompile(Tuple{typeof(Base.print), Test.Fail})
    precompile(Tuple{typeof(Base.Iterators.zip_iterate), Array{Symbol, 1}, Tuple{Int64, Int64, Int64}, Tuple{Int64}, Tuple{Int64}})
    precompile(Tuple{typeof(Base.Broadcast.broadcast), typeof(Base.:(/)), Array{Float64, 1}, Int64})
    precompile(Tuple{typeof(Base._similar_for), Base.UnitRange{Int64}, Type{Int}, Base.Generator{Base.UnitRange{Int64}, getfield(DecisionTrees, Symbol("##97#100"))}, Base.HasShape{1}})
    precompile(Tuple{typeof(Base._all), getfield(DataStreams.Data, Symbol("##113#114")), Core.SimpleVector, Base.Colon})
    precompile(Tuple{typeof(Base.push!), Array{Union{Array{Float64, 1}, Array{String, 1}}, 1}, Array{Float64, 1}})
    precompile(Tuple{typeof(Base.sum), Base.BitArray{1}})
    precompile(Tuple{typeof(Base.task_local_storage), Symbol, Tuple{UInt64, Tuple{}}})
    precompile(Tuple{typeof(Base.io_has_tvar_name), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Symbol, Int})
    precompile(Tuple{typeof(Base.success), Base.Cmd})
    precompile(Tuple{typeof(Base._any), typeof(Base.ismissing), Array{Int64, 1}, Base.Colon})
    precompile(Tuple{typeof(Base.show_circular), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Int})
    precompile(Tuple{typeof(Base.deepcopy), Array{Any, 2}})
    precompile(Tuple{typeof(Base.pop!), Array{Test.AbstractTestSet, 1}})
    precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:color,), Tuple{Symbol}}, typeof(Base.printstyled), Base.IOContext{Base.TTY}, String})
    precompile(Tuple{typeof(Base._any), getfield(Test, Symbol("##1#2")){String, Tuple{Symbol, Symbol}}, Array{Base.StackTraces.StackFrame, 1}, Base.Colon})
    precompile(Tuple{typeof(Base._similar_for), Base.UnitRange{Int64}, Type{Int}, Base.Generator{Base.UnitRange{Int64}, getfield(DecisionTrees, Symbol("##103#108"))}, Base.HasShape{1}})
    precompile(Tuple{typeof(Base.which), Int, Int})
    precompile(Tuple{typeof(Base.deepcopy), Array{Array{String, 1}, 1}})
    precompile(Tuple{typeof(Base.iterate), Base.SubArray{Any, 1, Array{Any, 2}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{Base.OneTo{Int64}, Int64}})
    precompile(Tuple{typeof(Base.iterate), Base.Iterators.Filter{getfield(Distributed, Symbol("##65#67")), Array{Any, 1}}, Int64})
    precompile(Tuple{typeof(Base.deepcopy_internal), Array{Int64, 1}, Base.IdDict{Any, Any}})
    precompile(Tuple{typeof(Base.getindex), Array{Tuple{PyCall.PyObject, Type{T} where T}, 1}, Int64})
    precompile(Tuple{typeof(Base.get), PyCall.PyObject, Type{PyCall.PyObject}, String})
    precompile(Tuple{typeof(Base.iterate), Base.SubArray{Any, 1, Array{Any, 2}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}})
    precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{Any, 2}, Array{Any, 1}, Base.Slice{Base.OneTo{Int64}}, Base.UnitRange{Int64}})
    precompile(Tuple{typeof(Base.push!), Array{Char, 1}, Char})
    precompile(Tuple{typeof(Base.throw_boundserror), Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}, Tuple{Base.UnitRange{Int64}}})
    precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:color,), Tuple{Symbol}}, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.SubString{String}})
    precompile(Tuple{typeof(Base.deepcopy), Array{DecisionTrees.Rulepath{T} where T<:Unsigned, 1}})
    precompile(Tuple{typeof(Base._array_for), Type{NamedTuple{(:col,), Tuple{Int64}}}, Base.UnitRange{Int64}, Base.HasShape{1}})
    precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Int64, 1}, Char})
    precompile(Tuple{typeof(Base.throw_boundserror), Base.SubArray{Any, 1, Array{Any, 2}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{Int64}})
    precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{Any, 2}, Array{Float64, 1}, Base.Slice{Base.OneTo{Int64}}, Base.UnitRange{Int64}})
    precompile(Tuple{typeof(Base.issorted), Array{Int64, 1}})
    precompile(Tuple{typeof(Base.depwarn), String, Symbol})
    precompile(Tuple{typeof(Base.throw_boundserror), Array{String, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.UnitRange{Int64}}})
    precompile(Tuple{typeof(Base.checkbounds), Array{Float64, 1}, Array{Int64, 1}})
    precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Base.Generator{Base.UnitRange{Int64}, getfield(DecisionTrees, Symbol("##103#108"))}, Base.EltypeUnknown, Base.HasShape{1}})
    precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Bool})
    precompile(Tuple{typeof(Base.any), Base.BitArray{1}})
    precompile(Tuple{typeof(Base._similar_for), Base.UnitRange{Int64}, Type{Int}, Base.Generator{Base.UnitRange{Int64}, getfield(DecisionTrees, Symbol("##102#107"))}, Base.HasShape{1}})
    precompile(Tuple{typeof(Base.iterate), Base.Iterators.Filter{getfield(Distributed, Symbol("##65#67")), Array{Any, 1}}, Int64})
    precompile(Tuple{typeof(Base.push!), Array{Union{Array{Float64, 1}, Array{String, 1}}, 1}, Array{String, 1}})
    precompile(Tuple{typeof(Base.manifest_deps_get), String, Base.PkgId, String})
    precompile(Tuple{typeof(Base.Cartesian.exprresolve), Expr})
    precompile(Tuple{typeof(Base.deepcopy_internal), Array{UInt8, 1}, Base.IdDict{Any, Any}})
    precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("##178#181")){Array{UInt8, 1}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}}}})
    precompile(Tuple{getfield(Base, Symbol("##print_to_string#337")), Nothing, typeof(identity), Base.Cmd})
    precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Symbol, Array{DataType, 1}, Bool, Int64}}})
    precompile(Tuple{typeof(Base.show_delim_array), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{String, 1}, Char, String, String, Bool, Int64, Int64})
    precompile(Tuple{typeof(Base.Broadcast.broadcast), typeof(Base.:(+)), Array{Float64, 1}, Array{Int64, 1}})
    precompile(Tuple{typeof(Base.locate_package), Base.PkgId})
    precompile(Tuple{typeof(Base.cat_shape), Tuple{Bool, Bool}, Tuple{Int64, Int64}, Tuple{Int64}})
    precompile(Tuple{typeof(Base.deepcopy_internal), Array{DecisionTrees.ExcelSheet, 1}, Base.IdDict{Any, Any}})
    precompile(Tuple{typeof(Base.round), Float64, Int64})
    precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{Any, 2}, Array{Float64, 2}, Base.UnitRange{Int64}, Base.Slice{Base.OneTo{Int64}}})
    precompile(Tuple{typeof(Base.explicit_project_deps_get), String, String})
    precompile(Tuple{typeof(Base.extrema), Array{Int64, 1}})
    precompile(Tuple{typeof(Base.typed_hcat), Type{Float64}, Array{Int64, 1}, Array{Int64, 1}, Array{Float64, 1}, Array{Float64, 1}})
    precompile(Tuple{typeof(Base.show_unquoted), Base.TTY, Symbol, Int64})
    precompile(Tuple{typeof(Base.write), Base.IOStream, String, String, String})
    precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{UInt8}, Tuple{Array{Float64, 1}}}})
    precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Int64})
    precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Symbol, String, Int})
    precompile(Tuple{typeof(Base.copyto!), Array{Any, 2}, Int64, Array{Any, 2}, Int64, Int64})
    precompile(Tuple{typeof(Base.replace), String, Char, Char})
    precompile(Tuple{typeof(Base.throw_boundserror), Array{Any, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.UnitRange{Int64}}})
    precompile(Tuple{typeof(Base.find_all_in_cache_path), Base.PkgId})
    precompile(Tuple{typeof(Base.copyto!), Array{Float64, 2}, Int64, Array{Float64, 1}, Int64, Int64})
    precompile(Tuple{typeof(Base.push!), Array{DecisionTrees.Rulepath{T} where T<:Unsigned, 1}, DecisionTrees.Rulepath{UInt8}})
    precompile(Tuple{getfield(Base, Symbol("#kw##with_output_color")), NamedTuple{(:bold,), Tuple{Bool}}, typeof(Base.with_output_color), typeof(identity), Symbol, Base.TTY, Symbol, Int})
    precompile(Tuple{typeof(Base._any), typeof(Base.ismissing), Array{String, 1}, Base.Colon})
    precompile(Tuple{typeof((Base.Cartesian)._nloops), Int64, Symbol, Symbol, Expr, Expr})
    precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, UInt8}, Int64, String})
    precompile(Tuple{getfield(Base, Symbol("##hasmethod#23")), UInt64, typeof(identity), Int, Int})
    precompile(Tuple{typeof(Base._any), typeof(Base.ismissing), Array{Float64, 1}, Base.Colon})
    precompile(Tuple{typeof(Base.Iterators.zip_iterate), Array{Symbol, 1}, Tuple{Int64, Int64, Int64}, Tuple{}, Tuple{}})
    precompile(Tuple{typeof(Base._array_for), Type{Array{Int64, 1}}, Base.UnitRange{Int64}, Base.HasShape{1}})
    precompile(Tuple{typeof(Base.println), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}})
    precompile(Tuple{typeof(Base.find_env), Array{Any, 1}})
    precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{Any, 2}, Array{String, 2}, Base.UnitRange{Int64}, Base.Slice{Base.OneTo{Int64}}})
    precompile(Tuple{typeof(Base.show_unquoted), Base.TTY, Symbol, Int64, Int64})
    precompile(Tuple{typeof(Base.push!), Array{Array{Float64, 1}, 1}, Array{Float64, 1}})
    precompile(Tuple{typeof(Base.typed_hcat), Type{Any}, Array{Any, 2}, Array{String, 2}})
    precompile(Tuple{typeof(Base._any), getfield(Test, Symbol("##1#2")){String, Tuple{Symbol}}, Array{Base.StackTraces.StackFrame, 1}, Base.Colon})
    precompile(Tuple{typeof(Base.throw_boundserror), Array{AbstractString, 2}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}})
    precompile(Tuple{typeof(Base.uvfinalize), Base.PipeEndpoint})
    precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Nothing}, Nothing, Base.SubString{String}})
    precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 1}, Tuple{Base.LogicalIndex{Int64, Base.BitArray{1}}}})
    precompile(Tuple{typeof(Base.uv_write), Base.TTY, Ptr{UInt8}, UInt64})
    
    precompile(Tuple{getfield(Base, Symbol("##warn#794")), String, Bool, Nothing, Nothing, Nothing, Int64, typeof(identity), Base.TTY, String})
    precompile(Tuple{typeof(Base.throw_boundserror), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Array{Int64, 1}}})
    precompile(Tuple{typeof(Base.StackTraces.show_spec_linfo), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.StackTraces.StackFrame})
    precompile(Tuple{typeof(Base.StackTraces.show_spec_linfo), Base.IOContext{Base.TTY}, Base.StackTraces.StackFrame})
    precompile(Tuple{typeof(Base.print), Base.TTY, String, Expr})
    precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Float64, 1}, String})
    precompile(Tuple{typeof(Base.:(==)), Array{UInt8, 1}, Array{UInt8, 1}})
    precompile(Tuple{typeof(Base.setindex!), Base.Dict{AbstractString, Base.Dict{AbstractString, Any}}, Base.Dict{Any, Any}, String})
    precompile(Tuple{typeof(Base.write), Base.IOStream, String, String, String, String, Int})
    precompile(Tuple{typeof(Base.setindex!), Base.Dict{Ptr{PyCall.PyObject_struct}, Any}, Base.RefValue{Any}, Ptr{PyCall.PyObject_struct}})
    precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:color,), Tuple{Symbol}}, typeof(Base.printstyled), String, String})
    precompile(Tuple{typeof(Base.iterate), Array{UInt8, 1}})
    precompile(Tuple{typeof(Base.deepcopy_internal), Array{DecisionTrees.Rulepath{T} where T<:Unsigned, 1}, Base.IdDict{Any, Any}})
    precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Base.Generator{Base.UnitRange{Int64}, getfield(DecisionTrees, Symbol("##96#99"))}, Base.EltypeUnknown, Base.HasShape{1}})
    precompile(Tuple{typeof(Base._findin), Array{Int64, 1}, Array{Int64, 1}})
    precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}})
    precompile(Tuple{typeof(Base.throw_boundserror), Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Tuple{Int64}})
    precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.TTY, String, String})
    precompile(Tuple{typeof(Base.typed_hcat), Type{String}, Array{String, 1}, Array{String, 2}})
    precompile(Tuple{typeof(Base.min), Nothing, Int64})
    precompile(Tuple{typeof(Base.uv_readcb), Ptr{Nothing}, Int64, Ptr{Nothing}})
    precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{String, 2}, Array{String, 1}, Base.Slice{Base.OneTo{Int64}}, Int64})
    precompile(Tuple{typeof(Base.push!), Array{Int64, 1}, Int64})
    precompile(Tuple{typeof(Base.setindex!), Base.Dict{Float64, UInt8}, Int64, Float64})
    precompile(Tuple{typeof(Base.hash), String, UInt64})
    precompile(Tuple{typeof(Base.Broadcast.materialize!), Array{Symbol, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{Symbol}, Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.Unicode.lowercase), Tuple{Array{Base.SubString{String}, 1}}}}}})
    precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, String, String})
    precompile(Tuple{typeof(Base.setindex!), Base.Dict{Float64, UInt16}, Int64, Float64})
    precompile(Tuple{getfield(Base, Symbol("##s624#412")), Int, Int, Int, Int, Int})
    precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.TTY, Symbol, Int})
    precompile(Tuple{typeof(Base.setindex!), Base.Dict{AbstractString, Array{Any, 1}}, Array{AbstractString, 1}, String})
    precompile(Tuple{typeof(Base._throw_dmrs), Int64, String, Int64})
    precompile(Tuple{getfield(Base, Symbol("##print_to_string#337")), Nothing, typeof(identity), Array{Int64, 1}})
    precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Array{Symbol, 1}})
    precompile(Tuple{typeof(Base.copy), Random.MersenneTwister})
    precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Array{String, 1}}, Array{String, 1}, Symbol})
    precompile(Tuple{typeof(Base._findin), Array{String, 1}, Array{String, 1}})
    precompile(Tuple{typeof(Base.throw_boundserror), Array{Any, 2}, Tuple{Base.UnitRange{Int64}, Base.Slice{Base.OneTo{Int64}}}})
    precompile(Tuple{typeof(Base.deepcopy_internal), Array{Float64, 1}, Base.IdDict{Any, Any}})
    precompile(Tuple{typeof(Base._findin), Array{Int64, 1}, Int64})
    precompile(Tuple{typeof(Base.deepcopy_internal), Array{DecisionTrees.Chart, 1}, Base.IdDict{Any, Any}})
    precompile(Tuple{typeof(Base.debug_color)})
    precompile(Tuple{typeof(Base.push!), Array{DataType, 1}, Type{Int}})
    precompile(Tuple{getfield(Base, Symbol("##pipeline#496")), Nothing, Nothing, Base.TTY, Bool, typeof(identity), Base.Cmd})
    precompile(Tuple{typeof(Base.typed_hcat), Type{Any}, Array{String, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}})
    precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{Any, 2}, Array{Any, 2}, Base.UnitRange{Int64}, Base.Slice{Base.OneTo{Int64}}})
    precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Int64}, Int64, Symbol})
    
    precompile(Tuple{typeof(Base.append!), StatsBase.Histogram{Int64, 1, Tuple{Array{Float64, 1}}}, Tuple{Array{Float64, 1}}})
    precompile(Tuple{typeof(Base.steprangelen_hp), Type{Float64}, Tuple{Int128, Int128}, Tuple{Int128, Int128}, Int64, Int64, Int64})
    precompile(Tuple{typeof(Base.println), String, String})
    precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Nothing}, Nothing, Int64})
    precompile(Tuple{typeof(Base.require), Base.PkgId})
    precompile(Tuple{typeof(Base.typed_hcat), Type{Any}, Array{Any, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}})
    precompile(Tuple{typeof(Base.cat_indices), Array{Int64, 1}, Int64})
    precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}}})
    precompile(Tuple{typeof(Base.cat_indices), Array{String, 2}, Int64})
    precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Base.Generator{Base.UnitRange{Int64}, getfield(DecisionTrees, Symbol("##97#100"))}, Base.EltypeUnknown, Base.HasShape{1}})
    precompile(Tuple{typeof(Base.identify_package), Base.PkgId, String})
    precompile(Tuple{typeof(Base.setindex!), Base.Dict{UInt8, Nothing}, Nothing, UInt8})
    
    precompile(Tuple{typeof(Base.show_datatype), Base.GenericIOBuffer{Array{UInt8, 1}}, DataType})
    precompile(Tuple{typeof(Base.setindex!), Base.Dict{AbstractString, Any}, String, String})
    precompile(Tuple{typeof(Base.push!), Array{Test.AbstractTestSet, 1}, Test.DefaultTestSet})
    precompile(Tuple{typeof(Base.getindex), Array{Any, 1}, UInt64})
    precompile(Tuple{typeof(Base.throw_boundserror), Array{Any, 2}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}})
    
    precompile(Tuple{typeof(Base.fill!), Base.SubArray{String, 2, Array{String, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}, String})
    precompile(Tuple{typeof(Base.throw_boundserror), Array{String, 1}, Tuple{Array{Int64, 1}}})
    precompile(Tuple{typeof(Base.fill!), Base.SubArray{AbstractString, 2, Array{AbstractString, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}, String})
    precompile(Tuple{typeof(Base.Sort.Float.fpsort!), Array{Int64, 1}, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}, Array{Float64, 1}}})
    precompile(Tuple{getfield(Base, Symbol("##print_to_string#337")), Nothing, typeof(identity), Module})
    precompile(Tuple{typeof(Base.show_datatype), Base.GenericIOBuffer{Array{UInt8, 1}}, DataType})
    precompile(Tuple{typeof(Base.print), Base.TTY, Char})
    
    precompile(Tuple{typeof(Base.print), Base.IOContext{Base.TTY}, String})
    precompile(Tuple{typeof(Base.setindex!), Base.Dict{Float64, Nothing}, Nothing, Float64})
    precompile(Tuple{getfield(Base, Symbol("##print_to_string#337")), Nothing, typeof(identity), Array{Float64, 1}})
    precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.string), Tuple{Array{Int64, 1}}}})
    precompile(Tuple{typeof(Base.getindex), Tuple{UInt64, Tuple{UInt64, Tuple{}}}, Int64})
    precompile(Tuple{typeof(Base.deepcopy_internal), Array{String, 1}, Base.IdDict{Any, Any}})
    precompile(Tuple{getfield(Base, Symbol("##print_to_string#337")), Nothing, typeof(identity), Array{String, 1}})
    precompile(Tuple{typeof(Base.first), Core.SimpleVector})
    precompile(Tuple{typeof(Base.length), Base.UnitRange{Int64}})
    precompile(Tuple{typeof(Base._any), getfield(DecisionTrees, Symbol("##95#98")), Array{Float64, 1}, Base.Colon})
    precompile(Tuple{typeof(Base.grow_to!), Array{Any, 1}, Base.Generator{Base.Iterators.Filter{typeof(DataStreams.Data.selected), Core.SimpleVector}, getfield(DataStreams.Data, Symbol("##69#71"))}})
    precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
    precompile(Tuple{typeof(Base.iterate), Array{NamedTuple{(:col,), Tuple{Int64}}, 1}})
    precompile(Tuple{typeof(Base.warn), String})
    precompile(Tuple{typeof(Base.find_all_in_cache_path), Base.PkgId})
    precompile(Tuple{typeof(Base.__cat), Array{AbstractString, 2}, Tuple{Int64, Int64}, Tuple{Bool, Bool}, String, String})
    precompile(Tuple{typeof(Base.mapfoldl_impl), getfield(Base, Symbol("##99#101")), typeof(Base.add_sum), Int64, Tuple{Array{Any, 2}, Array{Any, 2}, Array{Any, 2}, Array{Any, 2}, Array{Any, 2}, Array{Any, 2}, Array{Any, 2}, Array{Any, 2}}, Int64})
    precompile(Tuple{typeof(Base._ntuple), typeof(identity), Int64})
    precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Base.Generator{Base.UnitRange{Int64}, getfield(DecisionTrees, Symbol("##102#107"))}, Base.EltypeUnknown, Base.HasShape{1}})
    precompile(Tuple{typeof(Base.identify_package), String})
    precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Base.Generator{Base.UnitRange{Int64}, getfield(DecisionTrees, Symbol("##101#106"))}, Base.EltypeUnknown, Base.HasShape{1}})
    precompile(Tuple{typeof(Base.deepcopy_internal), Tuple{Int64, Int64}, Base.IdDict{Any, Any}})
    precompile(Tuple{typeof(Base.Broadcast.broadcast), typeof(Base.:(/)), Array{Float64, 1}, Float64})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.iterate), Array{UInt8, 1}, Int64})
    precompile(Tuple{getfield(Base, Symbol("##parse#345")), Nothing, typeof(identity), Type{Int64}, Base.SubString{String}})
    precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:color,), Tuple{Symbol}}, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
    
    
    precompile(Tuple{typeof(Base.typed_hcat), Type{Int}, String, String})
    precompile(Tuple{typeof(Base.manifest_uuid_path), String, Base.PkgId})
    precompile(Tuple{getfield(Base, Symbol("##open#304")), (Base.Iterators).Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(identity), (getfield(Base, Symbol("##666#667"))){String, Base.UUID, String}, String})
    precompile(Tuple{getfield(Base, Symbol("#kw##cat_t")), NamedTuple{(:dims,), Tuple{Base.Val{2}}}, typeof(Base.cat_t), Type{String}, String, String, String})
    precompile(Tuple{typeof(Base.fill!), Base.SubArray{Any, 2, Array{Any, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}, String})
    precompile(Tuple{typeof(Base.deepcopy), DecisionTrees.Leaf})
    precompile(Tuple{typeof(Base._mapreduce), typeof(Base.success), typeof(Base.:(&)), Base.IndexLinear, Array{Base.Process, 1}})
    precompile(Tuple{typeof(Base.env_project_file), String})
    precompile(Tuple{typeof(Base.Broadcast.broadcast), typeof(Base.:(*)), Array{Float64, 1}, Int64})
    precompile(Tuple{typeof(Base.throw_boundserror), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, Tuple{Int64}})
    precompile(Tuple{getfield(Base, Symbol("#kw##sort!")), NamedTuple{(:alg,), Tuple{Base.Sort.QuickSortAlg}}, typeof(Base.sort!), Array{Float64, 1}})
    precompile(Tuple{typeof(Base._redirect), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Base.Dict{Tuple{Union{Nothing, Module}, Union{Nothing, Symbol}}, IO}, Symbol})
    precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{Int64, 2}, Array{Int64, 1}, Base.Slice{Base.OneTo{Int64}}, Int64})
    precompile(Tuple{typeof(Base.getindex), Array{Base.Pair{String, _} where _, 1}, Int64})
    precompile(Tuple{typeof(Base.throw_boundserror), Array{Int64, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}})
    precompile(Tuple{typeof(Base.setindex!), Array{Float64, 2}, Float64, Int64})
    precompile(Tuple{typeof(Base.Filesystem.mktempdir)})
    precompile(Tuple{typeof(Base.hcat), Array{String, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{T, 1} where T})
    precompile(Tuple{typeof(Base.similar), Array{Any, 2}})
    precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{AbstractString, 2}, Array{AbstractString, 1}, Int64, Base.Slice{Base.OneTo{Int64}}})
    precompile(Tuple{typeof(Base.throw_boundserror), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Tuple{Int64}})
    precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, DecisionTrees.DifferenceSplit})
    precompile(Tuple{getfield(Base, Symbol("##open#510")), Bool, Bool, typeof(identity), Base.Cmd, Base.DevNullStream})
    precompile(Tuple{typeof(Base.println), Base.TTY})
    precompile(Tuple{typeof(Base.Filesystem.dirname), String})
    precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Core.TypeofBottom})
    precompile(Tuple{typeof(Base.size), DataFrames.DataFrame, Int64})
    precompile(Tuple{typeof(Base._mapreduce), typeof(Base.success), typeof(Base.:(&)), Base.IndexLinear, Array{Base.Process, 1}})
    precompile(Tuple{typeof(Base.pushfirst!), Array{Any, 1}, TypeVar})
    precompile(Tuple{typeof(Base.Cartesian.poplinenum), Expr})
    precompile(Tuple{typeof(Base.Sort.searchsorted), Array{Int64, 1}, Int64})
    precompile(Tuple{typeof(Base.tail), Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, Type{NamedTuple{(:col,), T} where T<:Tuple}}})
    precompile(Tuple{typeof(Base.promote_eltype), Array{String, 2}, Array{String, 2}, Int})
    precompile(Tuple{typeof(Base._throw_dmrsa), Tuple{Int64, Int64}, Int64})
    precompile(Tuple{typeof(Base.iterate), Core.SimpleVector})
    precompile(Tuple{typeof(Base.Cartesian.exprresolve), Expr})
    precompile(Tuple{typeof(Base.isempty), Array{Test.AbstractTestSet, 1}})
    precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), String, String})
    precompile(Tuple{typeof(Base.setproperty!), DecisionTrees.Tree, Symbol, DecisionTrees.Leaf})
    precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, String})
    precompile(Tuple{getfield(Base, Symbol("#kw##_spawn")), NamedTuple{(:chain,), Tuple{Nothing}}, typeof(Base._spawn), Base.Cmd, Tuple{Base.Pipe, Base.TTY, Base.TTY}})
    precompile(Tuple{typeof(Base.map), getfield(Base, Symbol("##121#122")){Array{Float64, 1}}, Tuple{Array{Int64, 1}}})
    precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:color,), Tuple{Symbol}}, typeof(Base.printstyled), String})
    precompile(Tuple{typeof(Base.print), Base.TTY, Test.Fail})
    precompile(Tuple{typeof(Base.sizehint!), Array{Int64, 1}, Int64})
    precompile(Tuple{typeof(Base.repr), Array{String, 1}})
    precompile(Tuple{getfield(Base, Symbol("#kw##pipeline")), NamedTuple{(:stderr,), Tuple{Base.TTY}}, typeof(Base.pipeline), Base.Cmd})
    precompile(Tuple{typeof(Base.setindex!), Array{Float64, 2}, Int64, Int64})
    precompile(Tuple{typeof(Base.method_exists), typeof(identity), Tuple{DataType, DataType}})
    precompile(Tuple{typeof(Base.similar), Array{String, 1}, Type{Any}, Int64, Int64})
    precompile(Tuple{typeof(Base.vcat), Array{Any, 2}, Array{String, 2}})
    precompile(Tuple{typeof(Base.hcat), Int64, Float64, Float64, Number})
    precompile(Tuple{typeof(Base.typed_hcat), Type{Any}, Array{Any, 2}, Array{Any, 2}})
    precompile(Tuple{typeof(Base.typed_vcat), Type{String}, Array{String, 1}, Array{String, 2}})
    precompile(Tuple{typeof(Base.deepcopy), DecisionTrees.Node{UInt8}})
    precompile(Tuple{typeof(Base.iterate), Array{NamedTuple{(:col,), Tuple{Int64}}, 1}, Int64})
    precompile(Tuple{getfield(Base, Symbol("#kw##cat_t")), NamedTuple{(:dims,), Tuple{Base.Val{2}}}, typeof(Base.cat_t), Type{Any}, String, Int64, Int})
    precompile(Tuple{typeof(Base.promote_eltype), Array{String, 1}, Array{Int64, 1}, Int})
    precompile(Tuple{getfield(Base, Symbol("#kw##cat_t")), NamedTuple{(:dims,), Tuple{Base.Val{2}}}, typeof(Base.cat_t), Type{Any}, String, Float64, Int})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.show_block), Base.IOContext{Base.TTY}, String, Array{Any, 1}, Expr, Int64})
    precompile(Tuple{getfield(Base, Symbol("##printstyled#682")), Bool, Symbol, typeof(identity), String, String})
    precompile(Tuple{typeof(Base.StackTraces.is_loc_meta), Expr, Symbol})
    precompile(Tuple{typeof((Base.Filesystem).abspath), String, String, String})
    precompile(Tuple{getfield(Base, Symbol("#kw##with_output_color")), NamedTuple{(:bold,), Tuple{Bool}}, typeof(Base.with_output_color), typeof(identity), Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, String})
    precompile(Tuple{typeof(Base.length), Array{Int64, 1}})
    
    precompile(Tuple{typeof(Base.map), typeof(Base.cat_size), Tuple{String, String, String, String, String, String, String, String}})
    precompile(Tuple{typeof(Base.similar), Base.UnitRange{Int64}, Type{Int64}, Tuple{Base.OneTo{Int64}}})
    precompile(Tuple{typeof(Base.typed_vcat), Type{Any}, Array{String, 2}, Array{Any, 2}})
    precompile(Tuple{typeof(Base.getindex), Base.IdDict{Any, Any}, Int})
    precompile(Tuple{typeof(Base.setup_stdio), getfield(Base, Symbol("##501#502")){Base.Cmd}, Tuple{Base.DevNullStream, Base.Pipe, Base.TTY}})
    precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}})
    precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float64, Float64}, Int64})
    precompile(Tuple{typeof(Base.setup_stdio), getfield(Base, Symbol("##501#502")){Base.Cmd}, Tuple{Base.Pipe, Base.TTY, Base.TTY}})
    precompile(Tuple{typeof(Base.:(==)), Base.StackTraces.StackFrame, Base.StackTraces.StackFrame})
    precompile(Tuple{typeof(Base._require_from_serialized), String})
    precompile(Tuple{typeof(Base.map), typeof(Base.cat_size), Tuple{String, Float64, Array{String, 2}}})
    precompile(Tuple{typeof(Base.similar), Base.UnitRange{Int64}, Type{Array{String, 1}}, Tuple{Base.OneTo{Int64}}})
    precompile(Tuple{typeof(Base._similar_for), Array{Any, 1}, Type{Int}, Base.Generator{Array{Any, 1}, (getfield(Test, Symbol("##23#24"))){Int64}}, Base.HasShape{1}})
    precompile(Tuple{typeof(Base.maximum), Array{UInt8, 1}})
    precompile(Tuple{typeof(Base.similar), Array{Float64, 1}, Type{Float64}, Int64, Int64})
    precompile(Tuple{typeof(Base.hcat), Array{String, 1}, Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}})
    precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), String})
    precompile(Tuple{typeof(Base.error), String, String})
    precompile(Tuple{typeof(Base.unalias), Array{Int64, 1}, Base.LogicalIndex{Int64, Base.BitArray{1}}})
    precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{AbstractString, Base.Dict{AbstractString, Any}}, Base.IdDict{Any, Any}})
    precompile(Tuple{typeof(Base.max), Float64, Float64})
    precompile(Tuple{typeof(Base.unaliascopy), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}})
    precompile(Tuple{typeof(Base.zeros), Type{Int64}, Int64})
    precompile(Tuple{typeof(Base.map), typeof(identity), Base.UnitRange{Int64}})
    precompile(Tuple{typeof(Base.print), Base.TTY, String})
    precompile(Tuple{typeof(Base.setup_stdio), getfield(Base, Symbol("##501#502")){Base.Cmd}, Tuple{Base.DevNullStream, Base.DevNullStream, Base.DevNullStream}})
    precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, DecisionTrees.SortByMean})
    precompile(Tuple{typeof(Base.similar), Base.UnitRange{Int64}, Type{Array{Float64, 1}}, Tuple{Base.OneTo{Int64}}})
    precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float64, Float64}, Int64, Int64})
    precompile(Tuple{typeof(Base.show_vector), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Int64, 1}, Char, Char})
    precompile(Tuple{typeof(Base.collect), Type{Any}, Core.SimpleVector})
    precompile(Tuple{typeof(Base.in), String, Array{String, 1}})
    precompile(Tuple{typeof(Base.mapreduce_first), getfield(Base, Symbol("##99#101")), typeof(identity), Array{String, 2}})
    precompile(Tuple{typeof(Base.findnext), getfield(Test, Symbol("##3#5")), Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}, Int64})
    precompile(Tuple{typeof(Base.similar), Type{Array{Type{T} where T, N} where N}, Tuple{Base.OneTo{Int64}}})
    precompile(Tuple{typeof(Base.get), NamedTuple{(:col,), Tuple{Int64}}, Symbol, Bool})
    precompile(Tuple{getfield(Base, Symbol("##open#510")), Bool, Bool, typeof(identity), Base.CmdRedirect, Base.TTY})
    precompile(Tuple{typeof(Base.map), typeof(Base.cat_size), Tuple{String, Int64, Array{String, 2}}})
    precompile(Tuple{typeof(Base.collect_to!), Array{NamedTuple{(:col,), Tuple{Int64}}, 1}, Base.Generator{Base.UnitRange{Int64}, Type{NamedTuple{(:col,), T} where T<:Tuple}}, Int64, Int64})
    precompile(Tuple{typeof(Base._array_for), Type{Base.Pair{Int64, DataType}}, Array{Int64, 1}, Base.HasShape{1}})
    precompile(Tuple{typeof(Base.similar), Array{Any, 1}, Type{Int64}, Tuple{Base.OneTo{Int64}}})
    precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{AbstractString, Base.Dict{AbstractString, Any}}, String})
    precompile(Tuple{typeof(Base.project_deps_get), String, String})
    precompile(Tuple{typeof(Base.similar), Type{Array{Symbol, N} where N}, Tuple{Base.OneTo{Int64}}})
    precompile(Tuple{typeof((Base.Order).ord), typeof(identity), typeof(identity), Bool, (Base.Order).ForwardOrdering})
    precompile(Tuple{typeof(Base.size), DataStreams.Data.Schema{true, Tuple{Int64, Float64, Float64, Float64, Float64, Float64, Int64, String, String, String, Int64, String, String, String, String, String, String, String, String, String, String, Int64, String, Int64, String, String, Int64, String, String, Int64, String, String, Int64, String, String, Int64, String, Int64, String, String, Int64, Int64, String, Int64, Int64, String, Int64, Int64, String, Int64, String, String, String, Int64, String, String, String, String, Int64, Int64, Int64, String, String, String, String, String, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Float64, Int64, Float64, Float64, Float64, Float64, Int64, Int64, Int64, Int64, Int64, Int64}}, Int64})
    precompile(Tuple{typeof(Base.repr), String})
    precompile(Tuple{typeof(Base.unsafe_wrap), Type{Array{T, N} where N where T}, Ptr{UInt8}, Tuple{Int64}})
    precompile(Tuple{getfield(Base, Symbol("##printstyled#681")), Bool, Symbol, typeof(identity), Base.TTY, Symbol, Int})
    precompile(Tuple{typeof(Base.setproperty!), Base.Iterators.Stateful{Array{Int64, 1}, Union{Nothing, Tuple{Int64, Int64}}}, Symbol, Tuple{Int64, Int64}})
    precompile(Tuple{typeof(Base.isequal), Tuple{Ptr{Nothing}, Symbol}, Tuple{Ptr{Nothing}, Symbol}})
    precompile(Tuple{typeof(Base.string), Array{Int64, 1}})
    precompile(Tuple{getfield(Base, Symbol("#kw##sort")), NamedTuple{(:rev,), Tuple{Bool}}, typeof(Base.sort), Array{Int64, 1}})
    precompile(Tuple{typeof(Base._array_for), Type{Int64}, Array{Type{T} where T, 1}, Base.HasShape{1}})
    precompile(Tuple{typeof(Base.axes), Array{Type{T} where T, 1}})
    precompile(Tuple{typeof(Base.remove_linenums!), Expr})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Int64, 1}, 1}, Array{Int64, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("##178#181")){Array{UInt8, 1}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}}}, Int64})
    precompile(Tuple{typeof(Base.setproperty!), DecisionTrees.ModelSettings, Symbol, Int64})
    precompile(Tuple{typeof(Base.hashindex), Tuple{Ptr{Nothing}, Symbol}, Int64})
    precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Int64, 1}, getfield(DataStreams.Data, Symbol("##73#89")){Array{Any, 1}}}})
    precompile(Tuple{typeof(Base.convert), Type{UInt8}, Int64})
    precompile(Tuple{typeof(Base.indexed_iterate), Tuple{DecisionTrees.DTMTable, DecisionTrees.ModelSettings, DataFrames.DataFrame}, Int64})
    precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.length), Tuple{Array{Array{T, 1} where T, 1}}}})
    precompile(Tuple{getfield(Base, Symbol("##any#551")), typeof(identity), typeof(identity), typeof(identity), Array{(Base.StackTraces).StackFrame, 1}})
    precompile(Tuple{typeof(Base.:(==)), UInt8, Int64})
    precompile(Tuple{Base.Colon, UInt8, UInt8})
    precompile(Tuple{typeof(Base.to_indices), Array{Float64, 1}, Tuple{Array{Int64, 1}}})
    precompile(Tuple{typeof(Base.any), typeof(identity), Array{String, 1}})
    precompile(Tuple{typeof(Base.setindex!), Array{Int64, 1}, Base.SubString{String}, Int64})
    precompile(Tuple{typeof(Base.convert), Type{PyCall.PyAny}, PyCall.PyObject})
    precompile(Tuple{typeof(Base.finalizer), Int, Int})
    precompile(Tuple{typeof(Base._mapreduce), typeof(Base.success), typeof(Base.:(&)), Base.IndexLinear, Array{Base.Process, 1}})
    precompile(Tuple{typeof(Base.getindex), Array{Float64, 1}, UInt8})
    precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int64, Int64}, Int64, Int64})
    precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Core.CodeInfo})
    precompile(Tuple{typeof(Base.getindex), Base.Dict{AbstractString, Base.Dict{AbstractString, Any}}, String})
    precompile(Tuple{typeof(Base.mapreduce_first), getfield(Base, Symbol("##99#101")), typeof(identity), Array{Any, 2}})
    precompile(Tuple{typeof(Base.any), typeof(identity), Array{Float64, 1}})
    precompile(Tuple{getfield(Base, Symbol("##open#304")), (Base.Iterators).Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(identity), (getfield(Base, Symbol("##662#663"))){String}, String})
    precompile(Tuple{typeof(Base.show), Base.IOContext{Base.TTY}, Core.CodeInfo})
    precompile(Tuple{typeof(Base.findnext), getfield(Test, Symbol("##4#6")), Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}, Int64})
    precompile(Tuple{typeof(Base._array_for), Type{Int64}, Array{Any, 1}, Base.HasShape{1}})
    precompile(Tuple{typeof(Base.copy!), Random.MersenneTwister, Random.MersenneTwister})
    precompile(Tuple{typeof(Base.cat_shape), Tuple{Bool, Bool}, Tuple{}, Tuple{Int64}, Tuple{Int64}, Tuple})
    precompile(Tuple{typeof(Base.backtrace)})
    precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Cmd})
    precompile(Tuple{typeof(Base.unique), Array{Float64, 1}})
    precompile(Tuple{typeof(Base.unique), Array{UInt8, 1}})
    precompile(Tuple{getfield(Base, Symbol("#kw##show_trace_entry")), NamedTuple{(:prefix,), Tuple{String}}, typeof(Base.show_trace_entry), Base.IOContext{Base.TTY}, Base.StackTraces.StackFrame, Int64})
    precompile(Tuple{typeof(Base.promote_typeof), Int64, Float64, Int})
    precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{String, UInt8}, String})
    precompile(Tuple{typeof(Base.download), String, String})
    precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{String, 2}, Base.LogicalIndex{Int64, Base.BitArray{1}}, Base.Slice{Base.OneTo{Int64}}})
    precompile(Tuple{typeof(Base.:(>)), Int64, UInt8})
    precompile(Tuple{typeof(Base.unsafe_view), Array{Float64, 1}, Array{Int64, 1}})
    precompile(Tuple{typeof(Base.setindex!), Array{Array{T, 1} where T, 1}, Array{String, 1}, Int64})
    precompile(Tuple{getfield(Base, Symbol("##printstyled#681")), Bool, Symbol, typeof(identity), Base.TTY, String, String})
    precompile(Tuple{typeof(Base.setproperty!), DecisionTrees.ModelSettings, Symbol, Float64})
    precompile(Tuple{typeof(Base.isempty), Array{DataType, 1}})
    precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int64, Int64}, Int64})
    precompile(Tuple{typeof(Base.hcat), Array{Any, 2}, Array{String, 2}})
    precompile(Tuple{typeof(Base.Cartesian._nloops), Int64, Symbol, Expr, Expr})
    precompile(Tuple{typeof(Base.setproperty!), Expr, Symbol, Type{Int}})
    precompile(Tuple{typeof(Base.mapfoldl), typeof(identity), typeof(identity), Tuple{Array{String, 2}, Array{String, 2}, Array{Any, 2}, Array{String, 2}, Array{String, 2}}})
    precompile(Tuple{getfield(Base, Symbol("##warn#795")), (Base.Iterators).Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(identity), String})
    precompile(Tuple{typeof(Base.show_unquoted_quote_expr), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Expr, Int64, Int64})
    precompile(Tuple{typeof(Base.repeat), Array{Any, 1}, Int64, Int64})
    precompile(Tuple{typeof(Base.axes), Base.SubArray{Any, 1, Array{Any, 2}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}})
    precompile(Tuple{typeof(Base.merge), NamedTuple{(:sinkindex, :sortindex), Tuple{Int64, Nothing}}, NamedTuple{(:col,), Tuple{Int64}}})
    precompile(Tuple{typeof(Base.mapfoldl), typeof(identity), typeof(identity), Tuple{Array{String, 2}, Array{String, 2}, Array{Any, 2}, Array{String, 2}, Array{String, 2}, Array{String, 2}, Array{String, 2}, Array{Any, 2}, Array{String, 2}, Array{String, 2}}})
    precompile(Tuple{typeof(Base.lastindex), Array{UInt8, 1}})
    precompile(Tuple{typeof(Base.get), NamedTuple{(:col,), Tuple{Int64}}, Symbol, Tuple{}})
    precompile(Tuple{typeof(Base._spawn), Base.Cmd, Tuple{Base.DevNullStream, Base.Pipe, Base.TTY}})
    precompile(Tuple{typeof(Base.permutedims!), Array{Any, 2}, Array{Any, 2}, Tuple{Int64, Int64}})
    precompile(Tuple{typeof(Base.getindex), Array{Array{T, 1} where T, 1}, Int64})
    precompile(Tuple{typeof(Base.with_output_color), typeof(identity), Symbol, Base.IOContext{Base.TTY}})
    precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Any, Nothing}, Base.SubString{String}})
    precompile(Tuple{typeof(Base.sort!), Array{Float64, 1}, Int64, Int64, Base.Sort.PartialQuickSort{Base.UnitRange{Int64}}, Base.Order.ForwardOrdering})
    precompile(Tuple{typeof(Base.any), typeof(identity), Array{Int64, 1}})
    precompile(Tuple{typeof(Base.lastindex), Array{Test.AbstractTestSet, 1}})
    precompile(Tuple{typeof(Base.any), typeof(identity), Array{(Base.StackTraces).StackFrame, 1}})
    precompile(Tuple{typeof(Base.setindex!), Array{Int64, 1}, Int64, UInt8})
    precompile(Tuple{typeof(Base.:(>=)), Float64, Int64})
    precompile(Tuple{typeof(Base.repeat), Array{String, 1}, Int64, Int64})
    precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{String, 1}, Base.IndexLinear, Array{Symbol, 1}})
    precompile(Tuple{typeof(Base.haskey), PyCall.PyObject, String})
    precompile(Tuple{typeof(Base.unsafe_convert), Type{Ref{Int64}}, Base.RefValue{Int64}})
    precompile(Tuple{typeof(Base.print_quoted), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
    precompile(Tuple{typeof(Base.in), String, Array{String, 2}})
    precompile(Tuple{typeof(Base.isempty), Array{Type{T} where T, 1}})
    precompile(Tuple{getfield(Base, Symbol("##open#304")), (Base.Iterators).Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(identity), (getfield(Base, Symbol("##666#667"))){String, Base.UUID, String}, String})
    precompile(Tuple{typeof(Base.show_unquoted_quote_expr), Base.IOContext{Base.TTY}, Expr, Int64, Int64})
    precompile(Tuple{typeof(Base.all), typeof(identity), Core.SimpleVector})
    precompile(Tuple{typeof(Base._spawn), Base.CmdRedirect, Tuple{Base.Pipe, Base.TTY, Base.TTY}})
    precompile(Tuple{typeof(Base.vcat), Array{String, 2}, Array{Any, 2}})
    precompile(Tuple{typeof(Base.getindex), Array{Array{String, 1}, 1}, Int64})
    precompile(Tuple{typeof(Base.unsafe_convert), Type{Ref{Ptr{PyCall.PyObject_struct}}}, Base.RefValue{Ptr{PyCall.PyObject_struct}}})
    precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Float64, UInt8}, Float64})
    precompile(Tuple{typeof(Base._quantilesort!), Array{Float64, 1}, Bool, Float64, Float64})
    precompile(Tuple{typeof(Base.copy), PyCall.PyDict{PyCall.PyAny, PyCall.PyAny, true}})
    precompile(Tuple{typeof(Base.promote_eltype), Array{String, 2}, Array{Any, 2}, Int})
    precompile(Tuple{typeof(Base.map), typeof(identity), Array{Any, 1}})
    precompile(Tuple{typeof(Base.similar), Array{String, 1}})
    precompile(Tuple{typeof(Base.Printf.fix_dec), Base.TTY, Float64, String, Int64, Int64, Char})
    precompile(Tuple{typeof(Base.getindex), Array{Int64, 1}, UInt8})
    precompile(Tuple{typeof(Base.promote_eltype), Array{Int64, 1}, Array{Int64, 1}, Int})
    precompile(Tuple{typeof(Base.promote_typeof), Float64, Float64, Int})
    precompile(Tuple{typeof(Base.all), typeof(identity), Core.SimpleVector})
    precompile(Tuple{getfield(Base, Symbol("##printstyled#682")), Bool, Symbol, typeof(identity), String})
    precompile(Tuple{typeof(Base.vcat), Array{String, 2}, Array{Float64, 2}})
    precompile(Tuple{typeof(Base.mapfoldl), typeof(identity), typeof(identity), Tuple{Array{Any, 2}, Array{Any, 2}, Array{Any, 2}, Array{Any, 2}, Array{Any, 2}, Array{Any, 2}, Array{Any, 2}, Array{Any, 2}}})
    precompile(Tuple{typeof(Base.warn), Base.TTY, String})
    precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Float64, UInt16}, Float64})
    precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{Int16}}, Base.Threads.Atomic{Int16}})
    precompile(Tuple{getfield(Base, Symbol("##open#304")), (Base.Iterators).Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(identity), (getfield(Base, Symbol("##268#269"))){Tuple{DataType}}, String})
    precompile(Tuple{typeof(Base.unsafe_write), Base.Pipe, Ptr{UInt8}, UInt64})
    precompile(Tuple{typeof(Base.getindex), PyCall.PyObject, Symbol})
    precompile(Tuple{typeof(Base.:(>)), Float64, Int64})
    
    precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Base.StackTraces.StackFrame})
    precompile(Tuple{typeof(Base.get), NamedTuple{(:col,), Tuple{Int64}}, Symbol, Int64})
    precompile(Tuple{typeof(Base.length), Base.Iterators.Zip2{Array{Symbol, 1}, Tuple{Int64, Int64, Int64}}})
    precompile(Tuple{typeof(Base.with_output_color), typeof(identity), Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}})
    precompile(Tuple{typeof(Base.promote_typeof), Float64, Int64, Int})
    precompile(Tuple{typeof(Base.Filesystem.joinpath), String})
    precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Any, Int64}, Tuple{Ptr{Nothing}, Symbol}})
    precompile(Tuple{typeof(Base.write), Base.TTY, UInt8})
    precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Ptr{PyCall.PyObject_struct}, Any}, Ptr{PyCall.PyObject_struct}})
    precompile(Tuple{typeof(Base.show_vector), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{String, 1}, Char, Char})
    precompile(Tuple{getfield(Base, Symbol("##printstyled#681")), Bool, Symbol, typeof(identity), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, String})
    precompile(Tuple{typeof(Base.similar), Array{String, 2}})
    precompile(Tuple{typeof(Base.length), Array{DecisionTrees.Chart, 1}})
    precompile(Tuple{typeof(Base.indexed_iterate), Tuple{DecisionTrees.DTMTable, DecisionTrees.ModelSettings, DataFrames.DataFrame}, Int64, Int64})
    precompile(Tuple{typeof(Base.collect_to!), Array{Array{Float64, 1}, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(DecisionTrees, Symbol("##97#100"))}, Int64, Int64})
    precompile(Tuple{typeof(Base.setproperty!), DecisionTrees.Tree, Symbol, DecisionTrees.Node{UInt8}})
    precompile(Tuple{getfield(Base, Symbol("##open#304")), (Base.Iterators).Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(identity), (getfield(Base, Symbol("##668#669"))){String, Base.PkgId}, String})
    precompile(Tuple{typeof(Base.show_unquoted), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Type{Int}, Int64, Int64})
    precompile(Tuple{typeof(Base.vcat), Array{Any, 2}, Array{Any, 2}})
    precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, Int64}, Symbol})
    precompile(Tuple{getfield(Base.Iterators, Symbol("#interleave#1")), Tuple{Symbol, Int64}, Tuple{Int64, Int64}})
    precompile(Tuple{typeof(Base.MainInclude.include), String})
    precompile(Tuple{typeof(Base.string), Float64})
    precompile(Tuple{typeof(Base.length), Base.BitArray{1}})
    precompile(Tuple{typeof(Base.setindex!), Array{Union{Test.Error, Test.Fail}, 1}, Test.Fail, Int64})
    precompile(Tuple{typeof(Base.similar), Array{DecisionTrees.Chart, 2}})
    precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{UInt8, Nothing}, UInt8})
    precompile(Tuple{typeof(Base.promote_typeof), Int64, Int64, Int})
    precompile(Tuple{getfield(Base, Symbol("##open#304")), (Base.Iterators).Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(identity), getfield(Base, Symbol("##672#673")), String, String})
    precompile(Tuple{typeof(Base._linspace), Type{Float64}, Int64, Int64, Int64, Int64})
    precompile(Tuple{typeof(Base.show_unquoted), Base.TTY, Expr, Int64})
    precompile(Tuple{typeof(Base.grow_to!), Array{Any, 1}, Base.Generator{Base.Iterators.Filter{typeof(DataStreams.Data.selected), Core.SimpleVector}, getfield(DataStreams.Data, Symbol("##68#70")){Bool}}})
    precompile(Tuple{getfield(Base, Symbol("##any#551")), typeof(identity), typeof(identity), typeof(identity), Array{String, 1}})
    precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, PyCall.PyObject})
    precompile(Tuple{getfield(Base, Symbol("##open#304")), (Base.Iterators).Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(identity), (getfield(Base, Symbol("##664#665"))){String, String}, String})
    precompile(Tuple{typeof(Base.view), DecisionTrees.PooledArraysDTM.PooledArray{String, UInt8, 1, Array{UInt8, 1}}, Array{Int64, 1}})
    precompile(Tuple{typeof(Base.setproperty!), DataStreams.Data.Schema{true, Tuple{Int64, Float64, Float64, Float64, Float64, Float64, Int64, String, String, String, Int64, String, String, String, String, String, String, String, String, String, String, Int64, String, Int64, String, String, Int64, String, String, Int64, String, String, Int64, String, String, Int64, String, Int64, String, String, Int64, Int64, String, Int64, Int64, String, Int64, Int64, String, Int64, String, String, String, Int64, String, String, String, String, Int64, Int64, Int64, String, String, String, String, String, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Float64, Int64, Float64, Float64, Float64, Float64, Int64, Int64, Int64, Int64, Int64, Int64}}, Symbol, Int64})
    precompile(Tuple{typeof(Base.:(<=)), Int64, Int32})
    precompile(Tuple{typeof(Base.setindex!), Array{Base.Pair{String, _} where _, 1}, Base.Pair{String, String}, Int64})
    precompile(Tuple{typeof(Base.show_vector), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Symbol, 1}, Char, Char})
    precompile(Tuple{typeof(Base.size), Array{String, 1}, Int64})
    precompile(Tuple{typeof(Base._append!), Array{Any, 1}, Base.HasShape{1}, Base.Generator{Array{Any, 1}, getfield(DataStreams.Data, Symbol("##80#96"))}})
    
    precompile(Tuple{typeof(Base.convert), Type{DataFrames.DataFrame}, Array{Any, 2}})
    precompile(Tuple{typeof(Base.show_vector), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Float64, 1}, Char, Char})
    precompile(Tuple{typeof(Base.view), DecisionTrees.PooledArraysDTM.PooledArray{Float64, UInt8, 1, Array{UInt8, 1}}, Array{Int64, 1}})
    precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{Int64, Int64}})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    
    
    precompile(Tuple{typeof(Base.cat_indices), Float64, Int64})
    precompile(Tuple{typeof(Base.:(<)), Float64, Float64})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, Array{String, 1}}, Symbol})
    precompile(Tuple{typeof(Base.length), DecisionTrees.PooledArraysDTM.PooledArray{Float64, UInt16, 1, Array{UInt16, 1}}})
    precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Sort.Float.Right, Array{Float64, 1}}})
    precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, Tuple{Int64, Int64}}}, Tuple{Int64, Int64}})
    precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Float64, Nothing}, Float64})
    precompile(Tuple{typeof(Base._include_from_serialized), String, Array{Any, 1}})
    precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Sort.Float.Left, Array{Float64, 1}}})
    
    precompile(Tuple{typeof(Base.length), Array{Any, 2}})
    precompile(Tuple{typeof(Base.size), Array{Float64, 1}, Int64})
    precompile(Tuple{typeof(Base.collect_to!), Array{Array{String, 1}, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(DecisionTrees, Symbol("##96#99"))}, Int64, Int64})
    precompile(Tuple{typeof(Base._range), Float64, Nothing, Float64, Int64})
    precompile(Tuple{typeof(Base.cat_indices), Int64, Int64})
    precompile(Tuple{typeof(Base.cat_size), Array{String, 2}, Int64})
    precompile(Tuple{typeof(Base.size), Array{Int64, 1}, Int64})
    precompile(Tuple{typeof(Base.:(*)), Int64, Float64})
    precompile(Tuple{typeof(Base.indexed_iterate), Base.Pair{Int64, DataType}, Int64})
    precompile(Tuple{typeof(Base.setindex!), Array{Array{T, 1} where T, 1}, Array{Float64, 1}, Int64})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.show_enclosed_list), Base.IOContext{Base.TTY}, Char, Array{Any, 1}, Symbol, Char, Int64, Int64, Bool})
    precompile(Tuple{typeof(Base.getindex), Array{Array{Float64, 1}, 1}, Int64})
    precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Any, Any}, String})
    precompile(Tuple{typeof(Base.setproperty!), DecisionTrees.Tree, Symbol, DecisionTrees.ExcelData})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.copy_exprs), Expr})
    precompile(Tuple{getfield(Base, Symbol("##open#304")), (Base.Iterators).Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(identity), (getfield(Base, Symbol("##660#661"))){String}, String})
    precompile(Tuple{typeof(Base.similar), Array{DecisionTrees.Chart, 1}})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, DataType})
    precompile(Tuple{getfield(Base, Symbol("##cat_t#107")), Base.Val{2}, typeof(identity), Type{String}, String, String})
    precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Order.By{getfield(DataStreams.Data, Symbol("##72#88"))}, Array{Any, 1}}})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.Iterators.zip), Array{Symbol, 1}, Tuple{Int64, Int64, Int64}})
    precompile(Tuple{typeof(Base.foreach), getfield(DataStreams.Data, Symbol("##55#61")){Base.Set{Any}, Base.Set{Any}}, Tuple{}})
    precompile(Tuple{typeof(Base.show_enclosed_list), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Char, Array{Any, 1}, Symbol, Char, Int64, Int64, Bool})
    precompile(Tuple{typeof(Base.setproperty!), DecisionTrees.Tree, Symbol, DataFrames.DataFrame})
    precompile(Tuple{typeof(Base.size), Array{DecisionTrees.Leaf, 1}, Int64})
    precompile(Tuple{getfield(Base, Symbol("##any#551")), typeof(identity), typeof(identity), typeof(identity), Array{Float64, 1}})
    precompile(Tuple{typeof(Base.Filesystem.dirname), String})
    precompile(Tuple{typeof(Base.similar), Array{DecisionTrees.Rulepath{T} where T<:Unsigned, 1}})
    precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{String, Bool}, 1}, Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:header, :index, :sheet_name, :startrow, :startcol, :encoding), Tuple{Bool, Bool, String, Int64, Int64, String}}}, getfield(PyCall, Symbol("##83#84"))}, Int64, Int64})
    precompile(Tuple{typeof(Base.similar), Array{DecisionTrees.ExcelSheet, 1}})
    precompile(Tuple{typeof(Base.lcm), Int64, Int64})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.setproperty!), DecisionTrees.ModelSettings, Symbol, String})
    precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{String, 1}, Base.LogicalIndex{Int64, Base.BitArray{1}}})
    precompile(Tuple{typeof((Base.Broadcast).broadcasted), (Base.Broadcast).DefaultArrayStyle{1}, typeof(identity), Array{Float64, 1}, Int64})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.getindex), Base.RefValue{Ptr{PyCall.PyObject_struct}}})
    precompile(Tuple{typeof(Base.promote_eltype), Array{String, 1}, Array{Float64, 1}, Array{Float64, 1}})
    precompile(Tuple{typeof(Base.sum), typeof(identity), Tuple{Array{Any, 2}, Array{Any, 2}, Array{Any, 2}, Array{Any, 2}, Array{Any, 2}, Array{Any, 2}, Array{Any, 2}, Array{Any, 2}}})
    precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}})
    precompile(Tuple{typeof(Base.similar), Array{Array{String, 1}, 1}})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.repl_color), String, Symbol})
    precompile(Tuple{typeof(Base.collect_to!), Array{Array{Int64, 1}, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("##178#181")){Array{UInt8, 1}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}}}, Int64, Int64})
    precompile(Tuple{typeof(Base.getindex), Array{Array{Int64, 1}, 1}, Int64})
    precompile(Tuple{typeof(Base.sort!), Array{UInt8, 1}})
    precompile(Tuple{typeof(Base.getindex), Array{Int64, 1}, Int64})
    precompile(Tuple{typeof(Base.setproperty!), DecisionTrees.ModelSettings, Symbol, Array{Symbol, 1}})
    precompile(Tuple{typeof(Base.size), Array{UInt8, 1}, Int64})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.show_enclosed_list), Base.TTY, Char, Array{Any, 1}, String, Char, Int64, Int64, Bool})
    precompile(Tuple{typeof(Base.string), UInt8})
    precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Int64, 1}}})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.show_enclosed_list), Base.TTY, Char, Array{Any, 1}, Symbol, Char, Int64, Int64, Bool})
    precompile(Tuple{typeof(Base.collect), Base.Generator{Base.LogicalIndex{Int64, Base.BitArray{1}}, getfield(Base, Symbol("##385#386"))}})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.getindex), Array{Float64, 1}, Int64})
    precompile(Tuple{typeof(Base.sort), Array{UInt8, 1}})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.join), Array{Int64, 1}, String})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.length), DecisionTrees.PooledArraysDTM.PooledArray{Float64, UInt8, 1, Array{UInt8, 1}}})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.:(==)), Ptr{PyCall.PyObject_struct}, Ptr{PyCall.PyObject_struct}})
    precompile(Tuple{typeof(Base.abs), Int64})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.setindex!), Array{Expr, 1}, Expr, Int64})
    precompile(Tuple{typeof(Base.close), Base.Pipe})
    precompile(Tuple{typeof(Base.uv_write), Base.PipeEndpoint, Ptr{UInt8}, UInt64})
    precompile(Tuple{typeof(Base._maximum), Array{Int64, 1}, Base.Colon})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.lock), getfield(Distributed, Symbol("##131#132")){Distributed.ProcessGroup, Distributed.RRID, typeof(Distributed.def_rv_channel)}, Base.Threads.RecursiveTatasLock})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.getindex), Array{Test.AbstractTestSet, 1}, Int64})
    precompile(Tuple{typeof((Base.Broadcast).broadcasted), typeof(identity), Array{Base.SubString{String}, 1}})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{AbstractString, Array{Any, 1}}, String})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    precompile(Tuple{getfield(Base, Symbol("##cat_t#107")), Base.Val{2}, typeof(identity), Type{Any}, String, Int})
    precompile(Tuple{typeof(Base.cat_size), Array{Int64, 1}, Int64})
    precompile(Tuple{typeof(Base.setindex!), Array{Float64, 1}, Float64, Int64})
    precompile(Tuple{typeof(Base.string), DecisionTrees.DifferenceSplit})
    precompile(Tuple{getfield(Base, Symbol("##any#551")), typeof(identity), typeof(identity), typeof(identity), Array{Int64, 1}})
    precompile(Tuple{typeof(Base._array_for), Type{Base.Pair{String, Bool}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:header, :index, :sheet_name, :startrow, :startcol, :encoding), Tuple{Bool, Bool, String, Int64, Int64, String}}}, Base.HasLength})
    precompile(Tuple{typeof(Base._array_for), Type{Int64}, Tuple{DataType, DataType, DataType}, Base.HasLength})
    precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{UInt64, UInt64}})
    precompile(Tuple{typeof(Base.show_vector), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Any, 1}, Char, Char})
    precompile(Tuple{typeof((Base.Filesystem).joinpath), String, String, String, String})
    precompile(Tuple{typeof(Base.indexed_iterate), Base.Pair{Int64, DataType}, Int64, Int64})
    precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:header, :index, :sheet_name, :startrow, :startcol, :encoding), Tuple{Bool, Bool, String, Int64, Int64, String}}}, getfield(PyCall, Symbol("##83#84"))}})
    precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{AbstractString, Any}, String})
    precompile(Tuple{typeof(Base.copy), DataFrames.DataFrame})
    precompile(Tuple{typeof(Base.push!), Array{DecisionTrees.Chart, 1}, DecisionTrees.Chart, DecisionTrees.Chart, DecisionTrees.Chart, DecisionTrees.Chart})
    precompile(Tuple{typeof(Base.println), Base.TTY, String, String})
    precompile(Tuple{typeof(Base.:(|)), UInt8, UInt8})
    precompile(Tuple{typeof(Base.string), Array{String, 1}})
    precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{Int64, DataType}, 1}, Base.Generator{Array{Int64, 1}, getfield(DataStreams.Data, Symbol("##73#89")){Array{Any, 1}}}, Int64, Int64})
    
    precompile(Tuple{typeof(Base.unalias), Array{Float64, 1}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}})
    precompile(Tuple{typeof(Base.cache_file_entry), Base.PkgId})
    precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{PyCall.PyObject_struct}}, PyCall.PyObject})
    precompile(Tuple{typeof(Base.sum), Array{Int64, 2}, Int64})
    precompile(Tuple{typeof(Base.size), Array{Any, 2}, Int64})
    precompile(Tuple{typeof(Base.getindex), Array{String, 1}, Array{UInt8, 1}})
    precompile(Tuple{typeof(Base.hasmethod), Int, Int})
    precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, DataType})
    precompile(Tuple{typeof(Base.julia_cmd)})
    precompile(Tuple{typeof(Base.string), Array{Float64, 1}})
    precompile(Tuple{typeof(Base.string), DecisionTrees.SortByMean})
    precompile(Tuple{typeof(Base.size), Array{String, 2}, Int64})
    precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Any, 2}, Base.UnitRange{Int64}, Base.Slice{Base.OneTo{Int64}}})
    precompile(Tuple{typeof(Base.join), Array{String, 1}, String})
    precompile(Tuple{typeof(Base.getindex), Array{Base.Pair{Int64, DataType}, 1}, Int64})
    precompile(Tuple{typeof(Base.sum), typeof(identity), Tuple{Array{String, 2}, Array{String, 2}, Array{Any, 2}, Array{String, 2}, Array{String, 2}}})
    precompile(Tuple{typeof(Base.copyto!), Array{Int64, 1}, Base.LogicalIndex{Int64, Base.BitArray{1}}})
    precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{UInt8, 1}, Base.LogicalIndex{Int64, Base.BitArray{1}}})
    precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.QuickSortAlg, Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}})
    precompile(Tuple{typeof(Base.print_to_string), String, Int})
    
    precompile(Tuple{typeof(Base.promote_eltype), Array{Float64, 1}, Array{Float64, 1}, Array{Float64, 1}})
    precompile(Tuple{typeof(Base.map), Type{Int}, Tuple{String, PyCall.PyObject}})
    precompile(Tuple{typeof(Base.sum), typeof(identity), Tuple{Array{String, 2}, Array{String, 2}, Array{Any, 2}, Array{String, 2}, Array{String, 2}, Array{String, 2}, Array{String, 2}, Array{Any, 2}, Array{String, 2}, Array{String, 2}}})
    precompile(Tuple{typeof(Base.findall), Base.Fix2{typeof(Base.in), Array{Int64, 1}}, Array{Int64, 1}})
    precompile(Tuple{typeof(Base.empty), Array{Any, 1}, Type{DataType}})
    precompile(Tuple{typeof(Base.append!), Array{DecisionTrees.Chart, 1}, Tuple{DecisionTrees.Chart, DecisionTrees.Chart, DecisionTrees.Chart, DecisionTrees.Chart, DecisionTrees.Chart, DecisionTrees.Chart, DecisionTrees.Chart, DecisionTrees.Chart, DecisionTrees.Chart, DecisionTrees.Chart, DecisionTrees.Chart, DecisionTrees.Chart, DecisionTrees.Chart, DecisionTrees.Chart, DecisionTrees.Chart, DecisionTrees.Chart, DecisionTrees.Chart, DecisionTrees.Chart}})
    precompile(Tuple{typeof(Base.string), String, Char, Int})
    precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Pairs{Symbol, String, Tuple{Symbol}, NamedTuple{(:engine,), Tuple{String}}}, getfield(PyCall, Symbol("##83#84"))}})
    precompile(Tuple{typeof(Base.collect_to!), Array{Array{T, 1} where T, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("##178#181")){Array{UInt8, 1}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}}}, Int64, Int64})
    precompile(Tuple{typeof(Base.empty), Array{Any, 1}, Type{String}})
    precompile(Tuple{typeof(Base.string), String, Dates.DateTime, Int})
    precompile(Tuple{typeof(Base.unique), Array{Int64, 1}})
    precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, DataType})
    precompile(Tuple{typeof(Base.show), Base.IOContext{Base.TTY}, DataType})
    precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Symbol})
    precompile(Tuple{typeof(Base.length), Array{DecisionTrees.Chart, 2}})
    precompile(Tuple{getfield(Base, Symbol("##_spawn#500")), Nothing, typeof(identity), Base.Cmd, Tuple{Base.DevNullStream, Base.Pipe, Base.TTY}})
    precompile(Tuple{getfield(Base.Sort, Symbol("##sort!#7")), (Base.Sort).QuickSortAlg, typeof(identity), typeof(identity), Nothing, (Base.Order).ForwardOrdering, typeof(identity), Array{UInt8, 1}})
    precompile(Tuple{typeof(Base.sort!), Array{UInt8, 1}, Int64, Int64, Base.Sort.QuickSortAlg, Base.Order.ForwardOrdering})
    precompile(Tuple{typeof(Base.:(>)), Float64, Float64})
    precompile(Tuple{typeof(Base.length), Array{UInt8, 1}})
    precompile(Tuple{typeof(Base.length), Array{Base.SubString{String}, 1}})
    precompile(Tuple{typeof(Base.getindex), Tuple{PyCall.PyObject, PyCall.PyObject}, Int64})
    precompile(Tuple{typeof(Base.lock), getfield(Distributed, Symbol("##137#138")){Distributed.ProcessGroup, Distributed.RRID, Int64}, Base.Threads.RecursiveTatasLock})
    precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Float64, 1}, Base.LogicalIndex{Int64, Base.BitArray{1}}})
    precompile(Tuple{typeof(Base.length), Array{DecisionTrees.Rulepath{T} where T<:Unsigned, 1}})
    precompile(Tuple{typeof(Base.length), Array{DecisionTrees.ExcelSheet, 1}})
    precompile(Tuple{typeof((Base.Order)._ord), typeof(Base.isless), typeof(identity), (Base.Order).ForwardOrdering})
    
    precompile(Tuple{typeof(Base.identify_package), Module, String})
    precompile(Tuple{typeof(Base.:(!=)), Float64, Float64})
    precompile(Tuple{typeof(Base.length), Array{Float64, 1}})
    precompile(Tuple{typeof((Base.Broadcast).broadcasted), (Base.Broadcast).DefaultArrayStyle{1}, typeof(identity), Array{Array{T, 1} where T, 1}})
    precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Any, 1}, Array{Int64, 1}})
    precompile(Tuple{typeof(Base.sort!), Array{Float64, 1}, Int64, Int64, Base.Sort.QuickSortAlg, Base.Sort.Float.Left})
    precompile(Tuple{typeof(Base.Sort.Float.fpsort!), Array{Int64, 1}, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Float64, 1}}})
    precompile(Tuple{typeof(Base.findall), Base.Fix2{typeof(Base.in), Int64}, Array{Int64, 1}})
    precompile(Tuple{typeof(Base.getindex), Array{String, 1}, Base.BitArray{1}})
    
    precompile(Tuple{typeof(Base.string), String, Float64, Int})
    precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Core.TypeName})
    precompile(Tuple{typeof(Base.length), Array{Test.AbstractTestSet, 1}})
    precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Base.Generator{Base.UnitRange{Int64}, getfield(DecisionTrees, Symbol("##74#76")){Array{Int64, 1}}}, Base.EltypeUnknown, Base.HasShape{1}})
    precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Expr})
    precompile(Tuple{typeof(Base.max), Int64, Int64})
    precompile(Tuple{typeof((Base.Broadcast).broadcasted), (Base.Broadcast).DefaultArrayStyle{1}, typeof(identity), Array{Int64, 1}})
    precompile(Tuple{typeof((Base.Order).lt), (Base.Order).By{getfield(DataStreams.Data, Symbol("##72#88"))}, Type{Int}, Type{Int}})
    precompile(Tuple{typeof(Base.promote_eltype), Array{Any, 2}, Array{String, 2}, Array{String, 2}})
    precompile(Tuple{typeof(Base.isfile_casesensitive), String})
    precompile(Tuple{typeof(Base.push!), Base.Set{String}, String})
    precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DecisionTrees, Symbol("##131#132"))}})
    precompile(Tuple{typeof(Base.length), Array{String, 2}})
    precompile(Tuple{typeof(Base.promote_eltype), Array{Int64, 1}, Array{Float64, 1}, Array{Float64, 1}})
    precompile(Tuple{typeof(Base.:(*)), Float64, Float64})
    precompile(Tuple{typeof((Base.Broadcast).broadcasted), (Base.Broadcast).DefaultArrayStyle{1}, Type{Int}, Array{Float64, 1}})
    precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, DataFrames.DataFrame, Array{Symbol, 1}})
    precompile(Tuple{typeof(Base.isless), Int64, Int64})
    precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, DataType})
    precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{AbstractString, 2}, Base.Slice{Base.OneTo{Int64}}, Int64})
    precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{DecisionTrees.Splitdef{UInt8}, 1}, Array{Int64, 1}})
    precompile(Tuple{typeof(Base.sort!), Array{Float64, 1}, Int64, Int64, Base.Sort.QuickSortAlg, Base.Sort.Float.Right})
    precompile(Tuple{typeof(Base.mapreduce), typeof(identity), typeof(identity), Tuple{Array{String, 2}, Array{String, 2}, Array{Any, 2}, Array{String, 2}, Array{String, 2}}})
    precompile(Tuple{typeof(Base.unaliascopy), Base.LogicalIndex{Int64, Base.BitArray{1}}})
    precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Pairs{Symbol, Array{Symbol, 1}, Tuple{Symbol}, NamedTuple{(:columns,), Tuple{Array{Symbol, 1}}}}, getfield(PyCall, Symbol("##83#84"))}})
    precompile(Tuple{typeof((Base.Broadcast).broadcasted), (Base.Broadcast).DefaultArrayStyle{1}, typeof(identity), Array{String, 1}})
    precompile(Tuple{typeof(Base.length), Array{Array{String, 1}, 1}})
    precompile(Tuple{typeof(Base.Filesystem.pwd)})
    precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{UInt8, 1}, Base.UnitRange{UInt64}})
    precompile(Tuple{typeof(Base.start), Nothing})
    precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Int64, 1}})
    precompile(Tuple{typeof(Base.convert), Type{Float64}, Float64})
    precompile(Tuple{getfield(Base, Symbol("##_spawn#500")), Nothing, typeof(identity), Base.Cmd, Tuple{Base.Pipe, Base.TTY, Base.TTY}})
    precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Int64, 1}, Array{Int64, 1}})
    precompile(Tuple{typeof((Base.Broadcast).broadcasted), (Base.Broadcast).DefaultArrayStyle{1}, typeof(identity), (Base.Broadcast).Broadcasted{(Base.Broadcast).DefaultArrayStyle{1}, Nothing, typeof(Base.isvalid), Tuple{Array{String, 1}}}})
    precompile(Tuple{typeof(Base.mapreduce), typeof(identity), typeof(identity), Tuple{Array{String, 2}, Array{String, 2}, Array{Any, 2}, Array{String, 2}, Array{String, 2}, Array{String, 2}, Array{String, 2}, Array{Any, 2}, Array{String, 2}, Array{String, 2}}})
    precompile(Tuple{typeof(Base.getindex), Array{Float64, 1}, Array{UInt8, 1}})
    precompile(Tuple{typeof(Base.:(>=)), Float64, Float64})
    precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Module})
    precompile(Tuple{typeof(Base.start), Nothing})
    precompile(Tuple{typeof((Base.Broadcast).broadcasted), (Base.Broadcast).DefaultArrayStyle{1}, Type{Int}, (Base.Broadcast).Broadcasted{(Base.Broadcast).DefaultArrayStyle{1}, Nothing, typeof((Base.Unicode).lowercase), Tuple{Array{Base.SubString{String}, 1}}}})
    precompile(Tuple{typeof(Base.collect), Base.Generator{Array{UInt8, 1}, getfield(DecisionTrees, Symbol("##31#32"))}})
    precompile(Tuple{typeof(Base.convert), Type{Ptr{UInt8}}, UInt64})
    precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{String, Bool}, 1}, Base.Pair{String, Bool}, Base.Generator{Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:header, :index, :sheet_name, :startrow, :startcol, :encoding), Tuple{Bool, Bool, String, Int64, Int64, String}}}, getfield(PyCall, Symbol("##83#84"))}, Int64})
    precompile(Tuple{typeof(Base.cconvert), Type{Ptr{Nothing}}, Ptr{Nothing}})
    precompile(Tuple{typeof(Base.mapreduce), typeof(identity), typeof(identity), Tuple{Array{Any, 2}, Array{Any, 2}, Array{Any, 2}, Array{Any, 2}, Array{Any, 2}, Array{Any, 2}, Array{Any, 2}, Array{Any, 2}}})
    precompile(Tuple{typeof(Base.keys), NamedTuple{(:col,), Tuple{Int64}}})
    precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Symbol, 1}, Array{Int64, 1}})
    precompile(Tuple{typeof(Base._collect), Type{Int64}, Base.Generator{Base.Iterators.Filter{getfield(Distributed, Symbol("##65#67")), Array{Any, 1}}, getfield(Distributed, Symbol("##64#66"))}, Base.SizeUnknown})
    
    precompile(Tuple{typeof(Base.:(|)), Bool, Bool})
    precompile(Tuple{typeof(Base._collect), Array{Float64, 1}, Base.Generator{Array{Float64, 1}, getfield(DecisionTrees, Symbol("##92#93")){Float64}}, Base.EltypeUnknown, Base.HasShape{1}})
    precompile(Tuple{typeof(Base.:(+)), UInt64, UInt64})
    precompile(Tuple{getfield(Base, Symbol("##_spawn#500")), Nothing, typeof(identity), Base.Cmd, Tuple{Base.DevNullStream, Base.DevNullStream, Base.DevNullStream}})
    precompile(Tuple{typeof(Base.getindex), Base.Dict{AbstractString, Array{Any, 1}}, String})
    precompile(Tuple{typeof(Base.convert), Type{Array{String, 1}}, Array{String, 1}})
    precompile(Tuple{typeof(Base.last), Int64})
    precompile(Tuple{typeof(Base.require), Module, Symbol})
    precompile(Tuple{typeof(Base.collect), Base.Generator{Array{UInt8, 1}, getfield(DecisionTrees, Symbol("##36#37"))}})
    precompile(Tuple{typeof(Base.fetch), Int})
    precompile(Tuple{typeof(Base.:(==)), JLD2.HasReferences, JLD2.HasReferences})
    precompile(Tuple{typeof(Base.collect), Base.Generator{Array{String, 2}, getfield(DecisionTrees, Symbol("##19#21"))}})
    precompile(Tuple{typeof(Base.convert), Type{Union{Base.Missing, Int64}}, Int64})
    precompile(Tuple{typeof(Base.stream_wait), Base.PipeEndpoint, Base.Condition})
    precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Module})
    precompile(Tuple{typeof(Base.start), DataFrames.SubDataFrame{Array{Int64, 1}}})
    precompile(Tuple{typeof(Base.convert), Type{Union{DecisionTrees.Leaf, DecisionTrees.Node{UInt16}, DecisionTrees.Node{UInt8}}}, DecisionTrees.Node{UInt8}})
    precompile(Tuple{typeof(Base.info_color)})
    precompile(Tuple{typeof(Base._collect), Type{Int64}, Base.Generator{Base.Iterators.Filter{getfield(Distributed, Symbol("##65#67")), Array{Any, 1}}, getfield(Distributed, Symbol("##64#66"))}, Base.SizeUnknown})
    precompile(Tuple{typeof(Base.collect), Base.Generator{Array{UInt8, 1}, getfield(DecisionTrees, Symbol("##138#139"))}})
    precompile(Tuple{typeof(Base.collect), Base.Generator{Array{DecisionTrees.TreeWithErrorStats, 1}, getfield(DecisionTrees, Symbol("##23#24")){String}}})
    precompile(Tuple{typeof(Base.collect), Base.Generator{Array{String, 2}, getfield(DecisionTrees, Symbol("##20#22"))}})
    precompile(Tuple{typeof(Base.unaliascopy), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}})
    precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Float64, 1}})
    precompile(Tuple{typeof(Base.setindex!), Base.Dict{DataType, Ptr{PyCall.PyObject_struct}}, Ptr{PyCall.PyObject_struct}, Type{Exception}})
    precompile(Tuple{typeof(Base.Broadcast.broadcastable), Array{Array{T, 1} where T, 1}})
    
    precompile(Tuple{typeof(Base.Sort.Float.fpsort!), Array{Float64, 1}, Base.Sort.QuickSortAlg, Base.Order.ForwardOrdering})
    precompile(Tuple{typeof(Base.convert), Type{Tuple}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
    
    
    precompile(Tuple{typeof(Base.Cartesian.lreplace!), QuoteNode, Base.Cartesian.LReplace{String}})
    precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Symbol, 1}, getfield(DataFrames, Symbol("##12#13")){DataFrames.Index}}})
    precompile(Tuple{typeof(Base.start), Base.StackTraces.StackFrame})
    precompile(Tuple{typeof(Base.getindex), Base.Dict{Any, Any}, String})
    
    precompile(Tuple{typeof(Base.convert), Type{DataFrames.DataFrame}, DataFrames.DataFrame})
    precompile(Tuple{typeof(Base.convert), Type{DecisionTrees.ExcelData}, DecisionTrees.ExcelData})
    precompile(Tuple{typeof(Base.Cartesian.exprresolve), QuoteNode})
    precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Base.SubString{String}, 1}, getfield(DecisionTrees, Symbol("##3#4"))}})
    precompile(Tuple{typeof(Base.Cartesian.inlineanonymous), Expr, Int64})
    precompile(Tuple{typeof(Base.:(!=)), PyCall.PyObject, PyCall.PyObject})
    precompile(Tuple{typeof(Base.warn_color)})
    precompile(Tuple{typeof(Base.Broadcast.broadcastable), Array{Int64, 1}})
    precompile(Tuple{typeof(Base.copy), Expr})
    precompile(Tuple{typeof(Base.convert), Type{Array{Float64, 1}}, Array{Float64, 1}})
    precompile(Tuple{typeof(Base.getindex), Base.Dict{AbstractString, Any}, String})
    precompile(Tuple{typeof(Base.convert), Type{Array{UInt8, 1}}, Array{UInt8, 1}})
    
    precompile(Tuple{typeof(Base.collect), Base.Generator{Array{DecisionTrees.ExcelSheet, 1}, getfield(DecisionTrees, Symbol("##73#75"))}})
    precompile(Tuple{typeof(Base.Cartesian.inlineanonymous), Expr, Int64})
    precompile(Tuple{typeof(Base.stream_wait), Base.Process, Base.Condition})
    precompile(Tuple{typeof(Base.collect), Base.Generator{Array{UInt8, 1}, getfield(DecisionTrees, Symbol("##41#42"))}})
    precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Union})
    precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, getfield(DataStreams.Data, Symbol("##76#92"))}})
    precompile(Tuple{typeof(Base.Broadcast.broadcastable), Array{String, 1}})
    precompile(Tuple{typeof(Base.collect), Base.Generator{Array{UInt8, 1}, getfield(DecisionTrees, Symbol("##33#34"))}})
    precompile(Tuple{typeof(Base._collect), Array{DecisionTrees.Leaf, 1}, Base.Generator{Array{DecisionTrees.Leaf, 1}, getfield(DecisionTrees, Symbol("##17#18"))}, Base.EltypeUnknown, Base.HasShape{1}})
    precompile(Tuple{typeof(Base.Broadcast.broadcastable), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.isvalid), Tuple{Array{String, 1}}}})
    precompile(Tuple{typeof(Base.signif), Float64, Int64})
    precompile(Tuple{typeof(Base.convert), Type{PyCall.PyObject}, PyCall.PyObject})
    precompile(Tuple{typeof(Base.stream_wait), Base.TTY, Base.Condition})
    precompile(Tuple{typeof(Base.Broadcast.broadcastable), Array{Float64, 1}})
    precompile(Tuple{typeof(Base.Broadcast.broadcastable), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.Unicode.lowercase), Tuple{Array{Base.SubString{String}, 1}}}})
    precompile(Tuple{typeof(Base.hcat), Array{String, 1}, Array{Int64, 1}, Array{Float64, 1}})
    precompile(Tuple{typeof(Base.collect_similar), Array{Any, 1}, Base.Generator{Array{Any, 1}, getfield(Test, Symbol("##23#24")){Int64}}})
    precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, DecisionTrees.PooledArraysDTM.PooledArray{String, UInt8, 1, Array{UInt8, 1}}, Symbol})
    
    precompile(Tuple{typeof(Base.copy), Base.EnvDict})
    precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, Type{QuoteNode}}})
    precompile(Tuple{typeof(Base.collect_similar), Base.UnitRange{Int64}, Base.Generator{Base.UnitRange{Int64}, getfield(DecisionTrees, Symbol("##97#100"))}})
    
    precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, DecisionTrees.PooledArraysDTM.PooledArray{Float64, UInt16, 1, Array{UInt16, 1}}, Symbol})
    precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Float64, 1}, 1}, Array{Float64, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(DecisionTrees, Symbol("##97#100"))}, Int64})
    precompile(Tuple{typeof(Base.hcat), Array{Any, 1}, Array{String, 2}, Array{Any, 2}})
    precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, getfield(DataStreams.Data, Symbol("##86#102"))}})
    precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, getfield(DataStreams.Data, Symbol("##84#100"))}})
    precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, getfield(DataStreams.Data, Symbol("##85#101"))}})
    precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, getfield(DataStreams.Data, Symbol("##87#103"))}})
    precompile(Tuple{typeof(Base.append!), Array{DecisionTrees.Chart, 1}, Tuple{DecisionTrees.Chart, DecisionTrees.Chart, DecisionTrees.Chart, DecisionTrees.Chart}})
    precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Base.UnitRange{Int64}, getfield(DecisionTrees, Symbol("##101#106"))}, Int64})
    precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{String, 1}, 1}, Array{String, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(DecisionTrees, Symbol("##96#99"))}, Int64})
    precompile(Tuple{typeof(Base.read), Base.Pipe})
    precompile(Tuple{typeof(Base.find), Bool})
    precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, getfield(DataStreams.Data, Symbol("##79#95"))}})
    precompile(Tuple{typeof(Base.collect_to_with_first!), Array{NamedTuple{(:col,), Tuple{Int64}}, 1}, NamedTuple{(:col,), Tuple{Int64}}, Base.Generator{Base.UnitRange{Int64}, Type{NamedTuple{(:col,), T} where T<:Tuple}}, Int64})
    
    precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, getfield(DataStreams.Data, Symbol("##78#94"))}})
    precompile(Tuple{typeof(Base.linspace), Float64, Float64, Int64})
    precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Any, 1}, getfield(DataFrames, Symbol("##48#50"))}, Int64})
    precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, getfield(DataStreams.Data, Symbol("##77#93"))}})
    precompile(Tuple{typeof(Base.close), Base.PipeEndpoint})
    precompile(Tuple{typeof(Base.convert), Type{Array{Type{T} where T, 1}}, Array{DataType, 1}})
    precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Type{T} where T, 1}, getfield(Dates, Symbol("##33#34"))}, Int64})
    precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{Int64, DataType}, 1}, Base.Pair{Int64, DataType}, Base.Generator{Array{Int64, 1}, getfield(DataStreams.Data, Symbol("##73#89")){Array{Any, 1}}}, Int64})
    precompile(Tuple{typeof(Base.convert), Type{Array{Float64, 1}}, Array{Int64, 1}})
    precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Tuple{DataType, DataType, DataType}, getfield(Dates, Symbol("##36#37"))}, Int64})
    precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Tuple{}})
    precompile(Tuple{typeof(Base.error_color)})
    precompile(Tuple{typeof(Base.Filesystem.joinpath), String, String, String})
    precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Int64, 1}, Symbol})
    precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Base.UnitRange{Int64}, getfield(DecisionTrees, Symbol("##103#108"))}, Int64})
    precompile(Tuple{typeof(Base.collect_similar), Base.UnitRange{Int64}, Base.Generator{Base.UnitRange{Int64}, getfield(DecisionTrees, Symbol("##96#99"))}})
    precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Any, 1}, getfield(Test, Symbol("##23#24")){Int64}}, Int64})
    precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Base.UnitRange{Int64}, getfield(DecisionTrees, Symbol("##102#107"))}, Int64})
    precompile(Tuple{typeof(Base.vcat), Array{Any, 2}, Array{Float64, 2}})
    precompile(Tuple{typeof(Base.fetch), Distributed.Future})
    precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, DecisionTrees.PooledArraysDTM.PooledArray{Float64, UInt8, 1, Array{UInt8, 1}}, Symbol})
    precompile(Tuple{typeof(Base.fieldnames), DecisionTrees.ModelSettings})
    precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Float64, 1}}})
    precompile(Tuple{typeof(Base.setindex!), DataFrames.DataFrame, Array{Float64, 1}, Symbol})
    precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Order.By{getfield(DataStreams.Data, Symbol("##72#88"))}, Array{Any, 1}}})
    precompile(Tuple{typeof(Base.close), Base.TTY})
    precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}, Array{Float64, 1}}})
    precompile(Tuple{typeof(Base.convert), Type{Array{String, 1}}, Array{Symbol, 1}})
    precompile(Tuple{typeof(Base.include), Module, String})
    precompile(Tuple{typeof(Base.hcat), Array{String, 1}, Array{String, 2}})
    precompile(Tuple{typeof(Base.vcat), Array{String, 1}, Array{String, 2}})
    precompile(Tuple{typeof(Base.findin), Array{Int64, 1}, Array{Int64, 1}})
    precompile(Tuple{typeof(Base.write), Base.TTY, Array{UInt8, 1}})
    precompile(Tuple{typeof(Base.:(^)), String, PyCall.PyObject})
    precompile(Tuple{typeof(Base.write), Base.Pipe, String})
    precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Int64, 1}}})
    precompile(Tuple{typeof(Base.findin), Array{Int64, 1}, Int64})
    
    precompile(Tuple{typeof(Base.:(*)), String, PyCall.PyObject})
    precompile(Tuple{typeof(Base.copymutable), Base.LogicalIndex{Int64, Base.BitArray{1}}})
    precompile(Tuple{typeof(Base.unaliascopy), Base.BitArray{1}})
    precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Base.Sort.QuickSortAlg, Base.Order.ReverseOrdering{Base.Order.ForwardOrdering}})
    precompile(Tuple{typeof(Base.:(!=)), PyCall.PyObject, String})
    
    precompile(Tuple{typeof(Base.findin), Array{String, 1}, Array{String, 1}})
    precompile(Tuple{typeof(Base.Cartesian.lreplace), Expr, Symbol, Int64})
    precompile(Tuple{typeof(Base.findin), Array{String, 2}, Array{String, 1}})
    precompile(Tuple{typeof(Base.read), Base.Cmd, Type{String}})
    precompile(Tuple{typeof(Base.Cartesian.lreplace), Expr, Symbol, Int64})
    precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Array{Any, 1}})
    precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Symbol, 1}})
    precompile(Tuple{typeof(Base.collect), Base.UnitRange{UInt8}})
    precompile(Tuple{typeof(Base.find_env), Base.CurrentEnv})
    precompile(Tuple{typeof(Base.unique), Array{UInt8, 1}})
    precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{String, 1}})
    precompile(Tuple{typeof(Base.readstring), Base.Cmd})
    precompile(Tuple{typeof(Base.copy), Base.LogicalIndex{Int64, Base.BitArray{1}}})
    precompile(Tuple{typeof(Base.println), Base.TTY, String})
    precompile(Tuple{typeof(Base.get), getfield(DataStreams.Data, Symbol("##54#60")), NamedTuple{(:col,), Tuple{Int64}}, Symbol})
    precompile(Tuple{typeof(Base.push!), Base.Set{Any}, Int64})
    precompile(Tuple{typeof(Base.get), getfield(DataStreams.Data, Symbol("##56#62")), NamedTuple{(:col,), Tuple{Int64}}, Symbol})
end
